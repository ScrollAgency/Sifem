/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rUkVVDt4QdBYgiD2ZFMTLj
// Component: 7UorYIxI72E3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select2 from "../../Select2"; // plasmic-import: yOCayUgMy_Fc/component
import MenuItem2 from "../../MenuItem2"; // plasmic-import: ew7FJhN9rVji/component
import MenuSection2 from "../../MenuSection2"; // plasmic-import: kngf_o5pMtFg/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rUkVVDt4QdBYgiD2ZFMTLj/projectcss
import sty from "./PlasmicDropdown.module.css"; // plasmic-import: 7UorYIxI72E3/css

createPlasmicElementProxy;

export type PlasmicDropdown__VariantMembers = {};
export type PlasmicDropdown__VariantsArgs = {};
type VariantPropType = keyof PlasmicDropdown__VariantsArgs;
export const PlasmicDropdown__VariantProps = new Array<VariantPropType>();

export type PlasmicDropdown__ArgsType = {};
type ArgPropType = keyof PlasmicDropdown__ArgsType;
export const PlasmicDropdown__ArgProps = new Array<ArgPropType>();

export type PlasmicDropdown__OverridesType = {
  select?: Flex__<typeof Select2>;
};

export interface DefaultDropdownProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDropdown__RenderFunc(props: {
  variants: PlasmicDropdown__VariantsArgs;
  args: PlasmicDropdown__ArgsType;
  overrides: PlasmicDropdown__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Select2
      data-plasmic-name={"select"}
      data-plasmic-override={overrides.select}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.select)}
      label={"Taille"}
      onChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["select", "value"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }

        (async val => {
          const $steps = {};

          $steps["updateStateVariable"] = true
            ? (() => {
                const actionArgs = {};
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;
                  undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateStateVariable"] != null &&
            typeof $steps["updateStateVariable"] === "object" &&
            typeof $steps["updateStateVariable"].then === "function"
          ) {
            $steps["updateStateVariable"] = await $steps["updateStateVariable"];
          }
        }).apply(null, eventArgs);
      }}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  select: ["select"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  select: typeof Select2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDropdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDropdown__VariantsArgs;
    args?: PlasmicDropdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDropdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDropdown__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDropdown__ArgProps,
          internalVariantPropNames: PlasmicDropdown__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "select") {
    func.displayName = "PlasmicDropdown";
  } else {
    func.displayName = `PlasmicDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdown = Object.assign(
  // Top-level PlasmicDropdown renders the root element
  makeNodeComponent("select"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicDropdown
    internalVariantProps: PlasmicDropdown__VariantProps,
    internalArgProps: PlasmicDropdown__ArgProps
  }
);

export default PlasmicDropdown;
/* prettier-ignore-end */
