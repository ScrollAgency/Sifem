/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rUkVVDt4QdBYgiD2ZFMTLj
// Component: zpWzU0peLf8E

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Checkbox from "../../Checkbox"; // plasmic-import: 3BWKCht5CjdE/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rUkVVDt4QdBYgiD2ZFMTLj/projectcss
import sty from "./PlasmicCheckboxWrapper.module.css"; // plasmic-import: zpWzU0peLf8E/css

import PlayIcon from "./icons/PlasmicIcon__Play"; // plasmic-import: aQrLPKXcS71r/icon

createPlasmicElementProxy;

export type PlasmicCheckboxWrapper__VariantMembers = {
  isChecked: "isChecked";
  hasMedia: "hasMedia";
  isEndometriome: "isEndometriome";
};
export type PlasmicCheckboxWrapper__VariantsArgs = {
  isChecked?: SingleBooleanChoiceArg<"isChecked">;
  hasMedia?: SingleBooleanChoiceArg<"hasMedia">;
  isEndometriome?: SingleBooleanChoiceArg<"isEndometriome">;
};
type VariantPropType = keyof PlasmicCheckboxWrapper__VariantsArgs;
export const PlasmicCheckboxWrapper__VariantProps = new Array<VariantPropType>(
  "isChecked",
  "hasMedia",
  "isEndometriome"
);

export type PlasmicCheckboxWrapper__ArgsType = {
  isChecked2?: boolean;
  onIsChecked2Change?: (val: string) => void;
  checkbox2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCheckboxWrapper__ArgsType;
export const PlasmicCheckboxWrapper__ArgProps = new Array<ArgPropType>(
  "isChecked2",
  "onIsChecked2Change",
  "checkbox2"
);

export type PlasmicCheckboxWrapper__OverridesType = {
  checkboxWrapper?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  badge?: Flex__<"div">;
  badgeBase?: Flex__<"div">;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
  image5?: Flex__<"div">;
};

export interface DefaultCheckboxWrapperProps {
  isChecked2?: boolean;
  onIsChecked2Change?: (val: string) => void;
  checkbox2?: React.ReactNode;
  isChecked?: SingleBooleanChoiceArg<"isChecked">;
  hasMedia?: SingleBooleanChoiceArg<"hasMedia">;
  isEndometriome?: SingleBooleanChoiceArg<"isEndometriome">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCheckboxWrapper__RenderFunc(props: {
  variants: PlasmicCheckboxWrapper__VariantsArgs;
  args: PlasmicCheckboxWrapper__ArgsType;
  overrides: PlasmicCheckboxWrapper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isChecked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isChecked
      },
      {
        path: "isChecked2",
        type: "writable",
        variableType: "boolean",

        valueProp: "isChecked2",
        onChangeProp: "onIsChecked2Change"
      },
      {
        path: "hasMedia",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasMedia
      },
      {
        path: "isEndometriome",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isEndometriome
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"checkboxWrapper"}
      data-plasmic-override={overrides.checkboxWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.checkboxWrapper,
        {
          [sty.checkboxWrapperhasMedia]: hasVariant(
            $state,
            "hasMedia",
            "hasMedia"
          ),
          [sty.checkboxWrapperisChecked]: hasVariant(
            $state,
            "isChecked",
            "isChecked"
          ),
          [sty.checkboxWrapperisEndometriome]: hasVariant(
            $state,
            "isEndometriome",
            "isEndometriome"
          )
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateIsChecked"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "isChecked",
                operation: 2,
                value: "isChecked"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                const oldValue = $stateGet($state, vgroup);
                $stateSet($state, vgroup, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateIsChecked"] != null &&
          typeof $steps["updateIsChecked"] === "object" &&
          typeof $steps["updateIsChecked"].then === "function"
        ) {
          $steps["updateIsChecked"] = await $steps["updateIsChecked"];
        }
      }}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxhasMedia]: hasVariant($state, "hasMedia", "hasMedia")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <Checkbox
              className={classNames("__wab_instance", sty.checkbox__hbNSm, {
                [sty.checkboxhasMedia__hbNSmjFpYl]: hasVariant(
                  $state,
                  "hasMedia",
                  "hasMedia"
                )
              })}
            >
              {"Absence d'endom\u00e9triose superficielle visible"}
            </Checkbox>
          ),
          value: args.checkbox2
        })}
        <div
          data-plasmic-name={"badge"}
          data-plasmic-override={overrides.badge}
          className={classNames(projectcss.all, sty.badge, {
            [sty.badgehasMedia]: hasVariant($state, "hasMedia", "hasMedia")
          })}
        >
          {(() => {
            try {
              return $state.hasMedia;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"badgeBase"}
              data-plasmic-override={overrides.badgeBase}
              hasGap={true}
              className={classNames(projectcss.all, sty.badgeBase)}
            >
              <PlayIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg, {
                  [sty.svghasMedia]: hasVariant($state, "hasMedia", "hasMedia")
                })}
                role={"img"}
              />

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Video"}
              </div>
            </Stack__>
          ) : null}
        </div>
      </Stack__>
      {(() => {
        try {
          return $state.hasMedia;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"image5"}
          data-plasmic-override={overrides.image5}
          className={classNames(projectcss.all, sty.image5, {
            [sty.image5hasMedia]: hasVariant($state, "hasMedia", "hasMedia")
          })}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  checkboxWrapper: [
    "checkboxWrapper",
    "freeBox",
    "badge",
    "badgeBase",
    "svg",
    "text",
    "image5"
  ],
  freeBox: ["freeBox", "badge", "badgeBase", "svg", "text"],
  badge: ["badge", "badgeBase", "svg", "text"],
  badgeBase: ["badgeBase", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
  image5: ["image5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  checkboxWrapper: "div";
  freeBox: "div";
  badge: "div";
  badgeBase: "div";
  svg: "svg";
  text: "div";
  image5: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckboxWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckboxWrapper__VariantsArgs;
    args?: PlasmicCheckboxWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCheckboxWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCheckboxWrapper__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCheckboxWrapper__ArgProps,
          internalVariantPropNames: PlasmicCheckboxWrapper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCheckboxWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "checkboxWrapper") {
    func.displayName = "PlasmicCheckboxWrapper";
  } else {
    func.displayName = `PlasmicCheckboxWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckboxWrapper = Object.assign(
  // Top-level PlasmicCheckboxWrapper renders the root element
  makeNodeComponent("checkboxWrapper"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    badge: makeNodeComponent("badge"),
    badgeBase: makeNodeComponent("badgeBase"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    image5: makeNodeComponent("image5"),

    // Metadata about props expected for PlasmicCheckboxWrapper
    internalVariantProps: PlasmicCheckboxWrapper__VariantProps,
    internalArgProps: PlasmicCheckboxWrapper__ArgProps
  }
);

export default PlasmicCheckboxWrapper;
/* prettier-ignore-end */
