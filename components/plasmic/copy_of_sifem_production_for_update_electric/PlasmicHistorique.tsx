/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jND4haQkMjdpXVH9tN144R
// Component: Hw6VVENvWKAa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: hCuAnYyEatdq/component
import Button from "../../Button"; // plasmic-import: DVuV3lh8L2we/component
import SifemTitleWrapper from "../../SifemTitleWrapper"; // plasmic-import: kWHhENwxRpxl/component

import { LocaleValue, useLocale } from "./PlasmicGlobalVariant__Locale"; // plasmic-import: KemWC_IXZp7Y/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jND4haQkMjdpXVH9tN144R/projectcss
import sty from "./PlasmicHistorique.module.css"; // plasmic-import: Hw6VVENvWKAa/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: umpGfCAaGpna/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: kj2DLaVP_RvL/icon
import ArrowCircleLeftIcon from "./icons/PlasmicIcon__ArrowCircleLeft"; // plasmic-import: co1BeHPDadwu/icon

createPlasmicElementProxy;

export type PlasmicHistorique__VariantMembers = {};
export type PlasmicHistorique__VariantsArgs = {};
type VariantPropType = keyof PlasmicHistorique__VariantsArgs;
export const PlasmicHistorique__VariantProps = new Array<VariantPropType>();

export type PlasmicHistorique__ArgsType = {};
type ArgPropType = keyof PlasmicHistorique__ArgsType;
export const PlasmicHistorique__ArgProps = new Array<ArgPropType>();

export type PlasmicHistorique__OverridesType = {
  accueil?: Flex__<"div">;
  main?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  button?: Flex__<typeof Button>;
  text?: Flex__<"div">;
  sifemTitleWrapper?: Flex__<typeof SifemTitleWrapper>;
  input?: Flex__<"div">;
  frame1437253861?: Flex__<"a"> & Partial<LinkProps>;
  text5?: Flex__<"div">;
  frame1437253843?: Flex__<"div">;
  frame1437253837?: Flex__<"div">;
  password?: Flex__<"div">;
  password2?: Flex__<"div">;
  frame1437253862?: Flex__<"a"> & Partial<LinkProps>;
  text2?: Flex__<"div">;
  frame1437253844?: Flex__<"div">;
  frame1437253838?: Flex__<"div">;
  password3?: Flex__<"div">;
  password4?: Flex__<"div">;
  frame1437253863?: Flex__<"a"> & Partial<LinkProps>;
  text3?: Flex__<"div">;
  frame1437253845?: Flex__<"div">;
  frame1437253839?: Flex__<"div">;
  password5?: Flex__<"div">;
  password6?: Flex__<"div">;
  frame1437253864?: Flex__<"a"> & Partial<LinkProps>;
  text4?: Flex__<"div">;
  frame1437253846?: Flex__<"div">;
  frame1437253840?: Flex__<"div">;
  password7?: Flex__<"div">;
  password8?: Flex__<"div">;
};

export interface DefaultHistoriqueProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHistorique__RenderFunc(props: {
  variants: PlasmicHistorique__VariantsArgs;
  args: PlasmicHistorique__ArgsType;
  overrides: PlasmicHistorique__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "round"
      },
      {
        path: "navbar.show",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    locale: useLocale()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHistorique.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHistorique.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHistorique.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"accueil"}
          data-plasmic-override={overrides.accueil}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.accueil
          )}
        >
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main, {
              [sty.mainglobal_locale_en]: hasVariant(
                globalVariants,
                "locale",
                "en"
              )
            })}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              button2={
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  link={`/bilan`}
                  onShapeChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "shape"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={generateStateValueProp($state, ["button", "shape"])}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Button"}
                  </div>
                </Button>
              }
              className={classNames("__wab_instance", sty.navbar)}
              onShowChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["navbar", "show"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              show={generateStateValueProp($state, ["navbar", "show"])}
            />

            <SifemTitleWrapper
              data-plasmic-name={"sifemTitleWrapper"}
              data-plasmic-override={overrides.sifemTitleWrapper}
              className={classNames("__wab_instance", sty.sifemTitleWrapper)}
            >
              {hasVariant(globalVariants, "locale", "en")
                ? "PREVIOUS"
                : "HISTORIQUE"}
            </SifemTitleWrapper>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__za79Q)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"input"}
                data-plasmic-override={overrides.input}
                hasGap={true}
                className={classNames(projectcss.all, sty.input)}
              >
                <Stack__
                  as={PlasmicLink__}
                  data-plasmic-name={"frame1437253861"}
                  data-plasmic-override={overrides.frame1437253861}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.frame1437253861
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"text5"}
                      data-plasmic-override={overrides.text5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text5
                      )}
                    >
                      {"Contreparties"}
                    </div>
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame1437253843"}
                    data-plasmic-override={overrides.frame1437253843}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1437253843)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame1437253837"}
                      data-plasmic-override={overrides.frame1437253837}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437253837
                      )}
                    >
                      <div
                        data-plasmic-name={"password"}
                        data-plasmic-override={overrides.password}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password
                        )}
                      >
                        {"29/01/2025 \u00e0 11:08"}
                      </div>
                      <div
                        data-plasmic-name={"password2"}
                        data-plasmic-override={overrides.password2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password2
                        )}
                      >
                        {"Score 1"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__scId7
                        )}
                      >
                        <ArrowCircleLeftIcon
                          className={classNames(projectcss.all, sty.svg__viyCg)}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={PlasmicLink__}
                  data-plasmic-name={"frame1437253862"}
                  data-plasmic-override={overrides.frame1437253862}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.frame1437253862
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"text2"}
                      data-plasmic-override={overrides.text2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text2
                      )}
                    >
                      {"Contreparties"}
                    </div>
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame1437253844"}
                    data-plasmic-override={overrides.frame1437253844}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1437253844)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame1437253838"}
                      data-plasmic-override={overrides.frame1437253838}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437253838
                      )}
                    >
                      <div
                        data-plasmic-name={"password3"}
                        data-plasmic-override={overrides.password3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password3
                        )}
                      >
                        {"29/01/2025 \u00e0 11:08"}
                      </div>
                      <div
                        data-plasmic-name={"password4"}
                        data-plasmic-override={overrides.password4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password4
                        )}
                      >
                        {"Score 1"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v6NWc
                        )}
                      >
                        <ArrowCircleLeftIcon
                          className={classNames(projectcss.all, sty.svg__goiRn)}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={PlasmicLink__}
                  data-plasmic-name={"frame1437253863"}
                  data-plasmic-override={overrides.frame1437253863}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.frame1437253863
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"text3"}
                      data-plasmic-override={overrides.text3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text3
                      )}
                    >
                      {"Contreparties"}
                    </div>
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame1437253845"}
                    data-plasmic-override={overrides.frame1437253845}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1437253845)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame1437253839"}
                      data-plasmic-override={overrides.frame1437253839}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437253839
                      )}
                    >
                      <div
                        data-plasmic-name={"password5"}
                        data-plasmic-override={overrides.password5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password5
                        )}
                      >
                        {"29/01/2025 \u00e0 11:08"}
                      </div>
                      <div
                        data-plasmic-name={"password6"}
                        data-plasmic-override={overrides.password6}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password6
                        )}
                      >
                        {"Score 1"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__m91Bu
                        )}
                      >
                        <ArrowCircleLeftIcon
                          className={classNames(projectcss.all, sty.svg__rYsJz)}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={PlasmicLink__}
                  data-plasmic-name={"frame1437253864"}
                  data-plasmic-override={overrides.frame1437253864}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.frame1437253864
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"text4"}
                      data-plasmic-override={overrides.text4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text4
                      )}
                    >
                      {"Contreparties"}
                    </div>
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame1437253846"}
                    data-plasmic-override={overrides.frame1437253846}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame1437253846)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame1437253840"}
                      data-plasmic-override={overrides.frame1437253840}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437253840
                      )}
                    >
                      <div
                        data-plasmic-name={"password7"}
                        data-plasmic-override={overrides.password7}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password7
                        )}
                      >
                        {"29/01/2025 \u00e0 11:08"}
                      </div>
                      <div
                        data-plasmic-name={"password8"}
                        data-plasmic-override={overrides.password8}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password8
                        )}
                      >
                        {"Score 1"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oB8Ld
                        )}
                      >
                        <ArrowCircleLeftIcon
                          className={classNames(projectcss.all, sty.svg__hcpmX)}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  accueil: [
    "accueil",
    "main",
    "navbar",
    "button",
    "text",
    "sifemTitleWrapper",
    "input",
    "frame1437253861",
    "text5",
    "frame1437253843",
    "frame1437253837",
    "password",
    "password2",
    "frame1437253862",
    "text2",
    "frame1437253844",
    "frame1437253838",
    "password3",
    "password4",
    "frame1437253863",
    "text3",
    "frame1437253845",
    "frame1437253839",
    "password5",
    "password6",
    "frame1437253864",
    "text4",
    "frame1437253846",
    "frame1437253840",
    "password7",
    "password8"
  ],
  main: [
    "main",
    "navbar",
    "button",
    "text",
    "sifemTitleWrapper",
    "input",
    "frame1437253861",
    "text5",
    "frame1437253843",
    "frame1437253837",
    "password",
    "password2",
    "frame1437253862",
    "text2",
    "frame1437253844",
    "frame1437253838",
    "password3",
    "password4",
    "frame1437253863",
    "text3",
    "frame1437253845",
    "frame1437253839",
    "password5",
    "password6",
    "frame1437253864",
    "text4",
    "frame1437253846",
    "frame1437253840",
    "password7",
    "password8"
  ],
  navbar: ["navbar", "button", "text"],
  button: ["button", "text"],
  text: ["text"],
  sifemTitleWrapper: ["sifemTitleWrapper"],
  input: [
    "input",
    "frame1437253861",
    "text5",
    "frame1437253843",
    "frame1437253837",
    "password",
    "password2",
    "frame1437253862",
    "text2",
    "frame1437253844",
    "frame1437253838",
    "password3",
    "password4",
    "frame1437253863",
    "text3",
    "frame1437253845",
    "frame1437253839",
    "password5",
    "password6",
    "frame1437253864",
    "text4",
    "frame1437253846",
    "frame1437253840",
    "password7",
    "password8"
  ],
  frame1437253861: [
    "frame1437253861",
    "text5",
    "frame1437253843",
    "frame1437253837",
    "password",
    "password2"
  ],
  text5: ["text5"],
  frame1437253843: [
    "frame1437253843",
    "frame1437253837",
    "password",
    "password2"
  ],
  frame1437253837: ["frame1437253837", "password", "password2"],
  password: ["password"],
  password2: ["password2"],
  frame1437253862: [
    "frame1437253862",
    "text2",
    "frame1437253844",
    "frame1437253838",
    "password3",
    "password4"
  ],
  text2: ["text2"],
  frame1437253844: [
    "frame1437253844",
    "frame1437253838",
    "password3",
    "password4"
  ],
  frame1437253838: ["frame1437253838", "password3", "password4"],
  password3: ["password3"],
  password4: ["password4"],
  frame1437253863: [
    "frame1437253863",
    "text3",
    "frame1437253845",
    "frame1437253839",
    "password5",
    "password6"
  ],
  text3: ["text3"],
  frame1437253845: [
    "frame1437253845",
    "frame1437253839",
    "password5",
    "password6"
  ],
  frame1437253839: ["frame1437253839", "password5", "password6"],
  password5: ["password5"],
  password6: ["password6"],
  frame1437253864: [
    "frame1437253864",
    "text4",
    "frame1437253846",
    "frame1437253840",
    "password7",
    "password8"
  ],
  text4: ["text4"],
  frame1437253846: [
    "frame1437253846",
    "frame1437253840",
    "password7",
    "password8"
  ],
  frame1437253840: ["frame1437253840", "password7", "password8"],
  password7: ["password7"],
  password8: ["password8"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  accueil: "div";
  main: "div";
  navbar: typeof Navbar;
  button: typeof Button;
  text: "div";
  sifemTitleWrapper: typeof SifemTitleWrapper;
  input: "div";
  frame1437253861: "a";
  text5: "div";
  frame1437253843: "div";
  frame1437253837: "div";
  password: "div";
  password2: "div";
  frame1437253862: "a";
  text2: "div";
  frame1437253844: "div";
  frame1437253838: "div";
  password3: "div";
  password4: "div";
  frame1437253863: "a";
  text3: "div";
  frame1437253845: "div";
  frame1437253839: "div";
  password5: "div";
  password6: "div";
  frame1437253864: "a";
  text4: "div";
  frame1437253846: "div";
  frame1437253840: "div";
  password7: "div";
  password8: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHistorique__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHistorique__VariantsArgs;
    args?: PlasmicHistorique__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHistorique__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHistorique__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHistorique__ArgProps,
          internalVariantPropNames: PlasmicHistorique__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHistorique__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "accueil") {
    func.displayName = "PlasmicHistorique";
  } else {
    func.displayName = `PlasmicHistorique.${nodeName}`;
  }
  return func;
}

export const PlasmicHistorique = Object.assign(
  // Top-level PlasmicHistorique renders the root element
  makeNodeComponent("accueil"),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    navbar: makeNodeComponent("navbar"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    sifemTitleWrapper: makeNodeComponent("sifemTitleWrapper"),
    input: makeNodeComponent("input"),
    frame1437253861: makeNodeComponent("frame1437253861"),
    text5: makeNodeComponent("text5"),
    frame1437253843: makeNodeComponent("frame1437253843"),
    frame1437253837: makeNodeComponent("frame1437253837"),
    password: makeNodeComponent("password"),
    password2: makeNodeComponent("password2"),
    frame1437253862: makeNodeComponent("frame1437253862"),
    text2: makeNodeComponent("text2"),
    frame1437253844: makeNodeComponent("frame1437253844"),
    frame1437253838: makeNodeComponent("frame1437253838"),
    password3: makeNodeComponent("password3"),
    password4: makeNodeComponent("password4"),
    frame1437253863: makeNodeComponent("frame1437253863"),
    text3: makeNodeComponent("text3"),
    frame1437253845: makeNodeComponent("frame1437253845"),
    frame1437253839: makeNodeComponent("frame1437253839"),
    password5: makeNodeComponent("password5"),
    password6: makeNodeComponent("password6"),
    frame1437253864: makeNodeComponent("frame1437253864"),
    text4: makeNodeComponent("text4"),
    frame1437253846: makeNodeComponent("frame1437253846"),
    frame1437253840: makeNodeComponent("frame1437253840"),
    password7: makeNodeComponent("password7"),
    password8: makeNodeComponent("password8"),

    // Metadata about props expected for PlasmicHistorique
    internalVariantProps: PlasmicHistorique__VariantProps,
    internalArgProps: PlasmicHistorique__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "dPEI Pocket",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHistorique;
/* prettier-ignore-end */
