/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jND4haQkMjdpXVH9tN144R
// Component: hCuAnYyEatdq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select2 from "../../Select2"; // plasmic-import: BkBJrIugFO-a/component
import { LocaleToggleWrapper } from "@plasmic-library/jean/LocaleToggleWrapper/LocaleToggleWrapper"; // plasmic-import: LOGw_01ZSIYW/codeComponent
import MenuItem2 from "../../MenuItem2"; // plasmic-import: yWcgJkcChm8E/component
import Button from "../../Button"; // plasmic-import: DVuV3lh8L2we/component

import { LocaleValue, useLocale } from "./PlasmicGlobalVariant__Locale"; // plasmic-import: KemWC_IXZp7Y/globalVariant
import { useScreenVariants as useScreenVariantsggzDd8Lo95Pq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GgzDd8Lo95PQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jND4haQkMjdpXVH9tN144R/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: hCuAnYyEatdq/css

import IconsaxLinearHambergermenuIcon from "./icons/PlasmicIcon__IconsaxLinearHambergermenu"; // plasmic-import: vishBEZtblLT/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: umpGfCAaGpna/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: kj2DLaVP_RvL/icon
import X2Icon from "./icons/PlasmicIcon__X2"; // plasmic-import: b0iyMdH1A7Zs/icon

createPlasmicElementProxy;

export type PlasmicNavbar__VariantMembers = {};
export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {
  button2?: React.ReactNode;
  show?: boolean;
  onShowChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>(
  "button2",
  "show",
  "onShowChange"
);

export type PlasmicNavbar__OverridesType = {
  navbar?: Flex__<"div">;
  menuIcon?: Flex__<"a"> & Partial<LinkProps>;
  logo3?: Flex__<"div">;
  lang3?: Flex__<typeof Select2>;
  localeToggleWrapper?: Flex__<typeof LocaleToggleWrapper>;
  lang?: Flex__<typeof Select2>;
  sideBar?: Flex__<"div">;
  title?: Flex__<"div">;
  logo4?: Flex__<"div">;
  space?: Flex__<"div">;
  mobileNavbarTiles?: Flex__<"div">;
  mobileNavbarTiles2?: Flex__<"div">;
  mobileNavbarTiles3?: Flex__<"div">;
  mobileNavbarTiles4?: Flex__<"div">;
  mobileNavbarTiles5?: Flex__<"div">;
  mobileNavbarTiles6?: Flex__<"div">;
};

export interface DefaultNavbarProps {
  button2?: React.ReactNode;
  show?: boolean;
  onShowChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "show",
        type: "writable",
        variableType: "boolean",

        valueProp: "show",
        onChangeProp: "onShowChange"
      },
      {
        path: "lang.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lang3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    locale: useLocale(),
    screen: useScreenVariantsggzDd8Lo95Pq()
  });

  return (
    <div
      data-plasmic-name={"navbar"}
      data-plasmic-override={overrides.navbar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.navbar,
        {
          [sty.navbarglobal_locale_en]: hasVariant(
            globalVariants,
            "locale",
            "en"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__x0S3T)}>
        <PlasmicLink__
          data-plasmic-name={"menuIcon"}
          data-plasmic-override={overrides.menuIcon}
          className={classNames(projectcss.all, projectcss.a, sty.menuIcon)}
          component={Link}
          onClick={async event => {
            const $steps = {};

            $steps["updateShow"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["show"]
                    },
                    operation: 4
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateShow"] != null &&
              typeof $steps["updateShow"] === "object" &&
              typeof $steps["updateShow"].then === "function"
            ) {
              $steps["updateShow"] = await $steps["updateShow"];
            }
          }}
          platform={"nextjs"}
        >
          <IconsaxLinearHambergermenuIcon
            className={classNames(projectcss.all, sty.svg__pA2L)}
            role={"img"}
          />
        </PlasmicLink__>
        <div
          data-plasmic-name={"logo3"}
          data-plasmic-override={overrides.logo3}
          className={classNames(projectcss.all, sty.logo3, {
            [sty.logo3global_locale_en]: hasVariant(
              globalVariants,
              "locale",
              "en"
            )
          })}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__alOu)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "140px"
                : "160px"
            }
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/copy_of_sifem_production_for_update_electric/images/logoDPeiPocketPng.png",
              fullWidth: 811,
              fullHeight: 86,
              aspectRatio: undefined
            }}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wJbR5)}
        >
          <Select2
            data-plasmic-name={"lang3"}
            data-plasmic-override={overrides.lang3}
            className={classNames("__wab_instance", sty.lang3, {
              [sty.lang3global_locale_en]: hasVariant(
                globalVariants,
                "locale",
                "en"
              ),
              [sty.lang3global_locale_fr]: hasVariant(
                globalVariants,
                "locale",
                "fr"
              )
            })}
            initialSelectedValue={
              hasVariant(globalVariants, "locale", "en") ? "EN" : "FR"
            }
            items={
              <React.Fragment>
                <MenuItem2 label={"FR"} value={"FR"} />

                <MenuItem2 label={"EN"} value={"EN"} />
              </React.Fragment>
            }
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["lang3", "value"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["runActionOnLocaleToggleWrapper"] =
                  $state.lang3.value === "FR"
                    ? (() => {
                        const actionArgs = {
                          tplRef: "localeToggleWrapper",
                          action: "setLocale",
                          args: ["fr"]
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runActionOnLocaleToggleWrapper"] != null &&
                  typeof $steps["runActionOnLocaleToggleWrapper"] ===
                    "object" &&
                  typeof $steps["runActionOnLocaleToggleWrapper"].then ===
                    "function"
                ) {
                  $steps["runActionOnLocaleToggleWrapper"] = await $steps[
                    "runActionOnLocaleToggleWrapper"
                  ];
                }

                $steps["runActionOnLocaleToggleWrapper2"] =
                  $state.lang3.value === "EN"
                    ? (() => {
                        const actionArgs = {
                          tplRef: "localeToggleWrapper",
                          action: "setLocale",
                          args: ["en"]
                        };
                        return (({ tplRef, action, args }) => {
                          return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runActionOnLocaleToggleWrapper2"] != null &&
                  typeof $steps["runActionOnLocaleToggleWrapper2"] ===
                    "object" &&
                  typeof $steps["runActionOnLocaleToggleWrapper2"].then ===
                    "function"
                ) {
                  $steps["runActionOnLocaleToggleWrapper2"] = await $steps[
                    "runActionOnLocaleToggleWrapper2"
                  ];
                }
              }).apply(null, eventArgs);
            }}
            placeholder={"FR"}
            showLabel={false}
          />

          <LocaleToggleWrapper
            data-plasmic-name={"localeToggleWrapper"}
            data-plasmic-override={overrides.localeToggleWrapper}
            className={classNames("__wab_instance", sty.localeToggleWrapper, {
              [sty.localeToggleWrapperglobal_locale_en]: hasVariant(
                globalVariants,
                "locale",
                "en"
              ),
              [sty.localeToggleWrapperglobal_locale_fr]: hasVariant(
                globalVariants,
                "locale",
                "fr"
              )
            })}
            ref={ref => {
              $refs["localeToggleWrapper"] = ref;
            }}
          >
            <DataCtxReader__>
              {$ctx => (
                <Select2
                  data-plasmic-name={"lang"}
                  data-plasmic-override={overrides.lang}
                  className={classNames("__wab_instance", sty.lang, {
                    [sty.langglobal_locale_en]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    ),
                    [sty.langglobal_locale_fr]: hasVariant(
                      globalVariants,
                      "locale",
                      "fr"
                    )
                  })}
                  initialSelectedValue={
                    hasVariant(globalVariants, "locale", "en") ? "EN" : "FR"
                  }
                  items={
                    <React.Fragment>
                      <MenuItem2 label={"FR"} value={"FR"} />

                      <MenuItem2 label={"EN"} value={"EN"} />
                    </React.Fragment>
                  }
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["lang", "value"]).apply(
                      null,
                      eventArgs
                    );

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }

                    (async val => {
                      const $steps = {};

                      $steps["runActionOnLocaleToggleWrapper"] =
                        $state.lang.value === "FR"
                          ? (() => {
                              const actionArgs = {
                                tplRef: "localeToggleWrapper",
                                action: "setLocale",
                                args: ["fr"]
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runActionOnLocaleToggleWrapper"] != null &&
                        typeof $steps["runActionOnLocaleToggleWrapper"] ===
                          "object" &&
                        typeof $steps["runActionOnLocaleToggleWrapper"].then ===
                          "function"
                      ) {
                        $steps["runActionOnLocaleToggleWrapper"] = await $steps[
                          "runActionOnLocaleToggleWrapper"
                        ];
                      }

                      $steps["runActionOnLocaleToggleWrapper2"] =
                        $state.lang.value === "EN"
                          ? (() => {
                              const actionArgs = {
                                tplRef: "localeToggleWrapper",
                                action: "setLocale",
                                args: ["en"]
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runActionOnLocaleToggleWrapper2"] != null &&
                        typeof $steps["runActionOnLocaleToggleWrapper2"] ===
                          "object" &&
                        typeof $steps["runActionOnLocaleToggleWrapper2"]
                          .then === "function"
                      ) {
                        $steps["runActionOnLocaleToggleWrapper2"] =
                          await $steps["runActionOnLocaleToggleWrapper2"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={"FR"}
                  showLabel={false}
                />
              )}
            </DataCtxReader__>
          </LocaleToggleWrapper>
          {renderPlasmicSlot({
            defaultContents: (
              <Button
                children={null}
                className={classNames("__wab_instance", sty.button__q9YkY)}
                shape={"round"}
              />
            ),

            value: args.button2
          })}
        </Stack__>
      </div>
      {(() => {
        try {
          return $state.show;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"sideBar"}
          data-plasmic-override={overrides.sideBar}
          hasGap={true}
          className={classNames(projectcss.all, sty.sideBar, {
            [sty.sideBarglobal_locale_en]: hasVariant(
              globalVariants,
              "locale",
              "en"
            )
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            hasGap={true}
            className={classNames(projectcss.all, sty.title)}
          >
            <X2Icon
              className={classNames(projectcss.all, sty.svg__sM9Xk)}
              onClick={async event => {
                const $steps = {};

                $steps["updateShow"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["show"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateShow"] != null &&
                  typeof $steps["updateShow"] === "object" &&
                  typeof $steps["updateShow"].then === "function"
                ) {
                  $steps["updateShow"] = await $steps["updateShow"];
                }
              }}
              role={"img"}
            />

            <div
              data-plasmic-name={"logo4"}
              data-plasmic-override={overrides.logo4}
              className={classNames(projectcss.all, sty.logo4)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__bD3NN, {
                  [sty.imgglobal_locale_en__bD3NNy6Rt2]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"160px"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/copy_of_sifem_production_for_update_electric/images/logoDPeiPocketPng.png",
                  fullWidth: 811,
                  fullHeight: 86,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"space"}
              data-plasmic-override={overrides.space}
              className={classNames(projectcss.all, sty.space)}
            />
          </Stack__>
          <div
            data-plasmic-name={"mobileNavbarTiles"}
            data-plasmic-override={overrides.mobileNavbarTiles}
            className={classNames(projectcss.all, sty.mobileNavbarTiles)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__gnHTf,
                {
                  [sty.linkglobal_locale_en__gnHTfY6Rt2]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  ),
                  [sty.linkglobal_locale_fr__gnHTfJEyh5]: hasVariant(
                    globalVariants,
                    "locale",
                    "fr"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};

                $steps["goToLexique"] = true
                  ? (() => {
                      const actionArgs = { destination: `/lexique` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToLexique"] != null &&
                  typeof $steps["goToLexique"] === "object" &&
                  typeof $steps["goToLexique"].then === "function"
                ) {
                  $steps["goToLexique"] = await $steps["goToLexique"];
                }
              }}
              platform={"nextjs"}
            >
              {hasVariant(globalVariants, "locale", "en")
                ? "General Information (HAS)"
                : "G\u00e9n\u00e9ralit\u00e9s (HAS)"}
            </PlasmicLink__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"mobileNavbarTiles2"}
            data-plasmic-override={overrides.mobileNavbarTiles2}
            hasGap={true}
            className={classNames(projectcss.all, sty.mobileNavbarTiles2)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ubUf6,
                {
                  [sty.linkglobal_locale_en__ubUf6Y6Rt2]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};

                $steps["goToBilan"] = true
                  ? (() => {
                      const actionArgs = { destination: `/bilan` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToBilan"] != null &&
                  typeof $steps["goToBilan"] === "object" &&
                  typeof $steps["goToBilan"].then === "function"
                ) {
                  $steps["goToBilan"] = await $steps["goToBilan"];
                }
              }}
              platform={"nextjs"}
            >
              {"dPEI SCORE"}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"mobileNavbarTiles3"}
            data-plasmic-override={overrides.mobileNavbarTiles3}
            hasGap={true}
            className={classNames(projectcss.all, sty.mobileNavbarTiles3, {
              [sty.mobileNavbarTiles3global_locale_en]: hasVariant(
                globalVariants,
                "locale",
                "en"
              )
            })}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__wwTv2,
                {
                  [sty.linkglobal_locale_en__wwTv2Y6Rt2]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};

                $steps["goToHistorique"] = true
                  ? (() => {
                      const actionArgs = { destination: `/historique` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHistorique"] != null &&
                  typeof $steps["goToHistorique"] === "object" &&
                  typeof $steps["goToHistorique"].then === "function"
                ) {
                  $steps["goToHistorique"] = await $steps["goToHistorique"];
                }
              }}
              platform={"nextjs"}
            >
              {hasVariant(globalVariants, "locale", "en")
                ? "HISTORY"
                : "HISTORIQUE"}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"mobileNavbarTiles4"}
            data-plasmic-override={overrides.mobileNavbarTiles4}
            hasGap={true}
            className={classNames(projectcss.all, sty.mobileNavbarTiles4)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__gC4G,
                {
                  [sty.linkglobal_locale_en__gC4Gy6Rt2]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};

                $steps["goToFaq"] = true
                  ? (() => {
                      const actionArgs = { destination: `/FAQ` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToFaq"] != null &&
                  typeof $steps["goToFaq"] === "object" &&
                  typeof $steps["goToFaq"].then === "function"
                ) {
                  $steps["goToFaq"] = await $steps["goToFaq"];
                }
              }}
              platform={"nextjs"}
            >
              {"FAQ"}
            </PlasmicLink__>
          </Stack__>
          <div
            data-plasmic-name={"mobileNavbarTiles5"}
            data-plasmic-override={overrides.mobileNavbarTiles5}
            className={classNames(projectcss.all, sty.mobileNavbarTiles5)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__dvJkV,
                {
                  [sty.linkglobal_locale_en__dvJkVy6Rt2]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};

                $steps["goToRessources"] = true
                  ? (() => {
                      const actionArgs = { destination: `/ressources` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToRessources"] != null &&
                  typeof $steps["goToRessources"] === "object" &&
                  typeof $steps["goToRessources"].then === "function"
                ) {
                  $steps["goToRessources"] = await $steps["goToRessources"];
                }
              }}
              platform={"nextjs"}
            >
              {hasVariant(globalVariants, "locale", "en")
                ? "Bibliographic Resources"
                : "Ressources Biblio"}
            </PlasmicLink__>
          </div>
          <div
            data-plasmic-name={"mobileNavbarTiles6"}
            data-plasmic-override={overrides.mobileNavbarTiles6}
            className={classNames(projectcss.all, sty.mobileNavbarTiles6)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__k1VHz,
                {
                  [sty.linkglobal_locale_en__k1VHzy6Rt2]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  )
                }
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};

                $steps["goToContact"] = true
                  ? (() => {
                      const actionArgs = { destination: `/contact` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToContact"] != null &&
                  typeof $steps["goToContact"] === "object" &&
                  typeof $steps["goToContact"].then === "function"
                ) {
                  $steps["goToContact"] = await $steps["goToContact"];
                }
              }}
              platform={"nextjs"}
            >
              {hasVariant(globalVariants, "locale", "en")
                ? "Contact"
                : "Contact"}
            </PlasmicLink__>
          </div>
        </Stack__>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navbar: [
    "navbar",
    "menuIcon",
    "logo3",
    "lang3",
    "localeToggleWrapper",
    "lang",
    "sideBar",
    "title",
    "logo4",
    "space",
    "mobileNavbarTiles",
    "mobileNavbarTiles2",
    "mobileNavbarTiles3",
    "mobileNavbarTiles4",
    "mobileNavbarTiles5",
    "mobileNavbarTiles6"
  ],
  menuIcon: ["menuIcon"],
  logo3: ["logo3"],
  lang3: ["lang3"],
  localeToggleWrapper: ["localeToggleWrapper", "lang"],
  lang: ["lang"],
  sideBar: [
    "sideBar",
    "title",
    "logo4",
    "space",
    "mobileNavbarTiles",
    "mobileNavbarTiles2",
    "mobileNavbarTiles3",
    "mobileNavbarTiles4",
    "mobileNavbarTiles5",
    "mobileNavbarTiles6"
  ],
  title: ["title", "logo4", "space"],
  logo4: ["logo4"],
  space: ["space"],
  mobileNavbarTiles: ["mobileNavbarTiles"],
  mobileNavbarTiles2: ["mobileNavbarTiles2"],
  mobileNavbarTiles3: ["mobileNavbarTiles3"],
  mobileNavbarTiles4: ["mobileNavbarTiles4"],
  mobileNavbarTiles5: ["mobileNavbarTiles5"],
  mobileNavbarTiles6: ["mobileNavbarTiles6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navbar: "div";
  menuIcon: "a";
  logo3: "div";
  lang3: typeof Select2;
  localeToggleWrapper: typeof LocaleToggleWrapper;
  lang: typeof Select2;
  sideBar: "div";
  title: "div";
  logo4: "div";
  space: "div";
  mobileNavbarTiles: "div";
  mobileNavbarTiles2: "div";
  mobileNavbarTiles3: "div";
  mobileNavbarTiles4: "div";
  mobileNavbarTiles5: "div";
  mobileNavbarTiles6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navbar") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("navbar"),
  {
    // Helper components rendering sub-elements
    menuIcon: makeNodeComponent("menuIcon"),
    logo3: makeNodeComponent("logo3"),
    lang3: makeNodeComponent("lang3"),
    localeToggleWrapper: makeNodeComponent("localeToggleWrapper"),
    lang: makeNodeComponent("lang"),
    sideBar: makeNodeComponent("sideBar"),
    title: makeNodeComponent("title"),
    logo4: makeNodeComponent("logo4"),
    space: makeNodeComponent("space"),
    mobileNavbarTiles: makeNodeComponent("mobileNavbarTiles"),
    mobileNavbarTiles2: makeNodeComponent("mobileNavbarTiles2"),
    mobileNavbarTiles3: makeNodeComponent("mobileNavbarTiles3"),
    mobileNavbarTiles4: makeNodeComponent("mobileNavbarTiles4"),
    mobileNavbarTiles5: makeNodeComponent("mobileNavbarTiles5"),
    mobileNavbarTiles6: makeNodeComponent("mobileNavbarTiles6"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
