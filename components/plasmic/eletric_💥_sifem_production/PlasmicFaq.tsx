/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sYXMYndb1v9rTXALzdZyn1
// Component: Y-9OzP5tdiQw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: l6InCk_Pji2S/component
import Button from "../../Button"; // plasmic-import: -BkoXfQ_mA7-/component

import { LocaleValue, useLocale } from "./PlasmicGlobalVariant__Locale"; // plasmic-import: -c6F2vHxxdiZ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sYXMYndb1v9rTXALzdZyn1/projectcss
import sty from "./PlasmicFaq.module.css"; // plasmic-import: Y-9OzP5tdiQw/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: Yw1_HV9alQRc/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: AFWtWFpVw7kz/icon
import Vector5SvgIcon from "./icons/PlasmicIcon__Vector5Svg"; // plasmic-import: niGSHPHnWY7B/icon
import Vector6SvgIcon from "./icons/PlasmicIcon__Vector6Svg"; // plasmic-import: SJenxLeoYOMs/icon

createPlasmicElementProxy;

export type PlasmicFaq__VariantMembers = {};
export type PlasmicFaq__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaq__VariantsArgs;
export const PlasmicFaq__VariantProps = new Array<VariantPropType>();

export type PlasmicFaq__ArgsType = { isChecked2?: boolean };
type ArgPropType = keyof PlasmicFaq__ArgsType;
export const PlasmicFaq__ArgProps = new Array<ArgPropType>("isChecked2");

export type PlasmicFaq__OverridesType = {
  root?: Flex__<"div">;
  main?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  button?: Flex__<typeof Button>;
  input?: Flex__<"div">;
  faq?: Flex__<"div">;
  title?: Flex__<"div">;
  password?: Flex__<"div">;
  content?: Flex__<"div">;
  password2?: Flex__<"div">;
};

export interface DefaultFaqProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFaq__RenderFunc(props: {
  variants: PlasmicFaq__VariantsArgs;
  args: PlasmicFaq__ArgsType;
  overrides: PlasmicFaq__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "round"
      },
      {
        path: "navbar.show",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "faqContent",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            content:
              "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.",
            label: "Comment lire le dPEI score ?",
            content_en:
              "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.",
            label_en: "How to read the dPEI score?",
            visible: false,
            value: 1
          },
          {
            content:
              "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.",
            label: "Comment lire le dPEI score ?",
            content_en:
              "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.",
            label_en: "How to read the dPEI score?",
            visible: false,
            value: 2
          },
          {
            content:
              "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.",
            label: "Comment lire le dPEI score ?",
            content_en:
              "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.",
            label_en: "How to read the dPEI score?",
            visible: false,
            value: 3
          },
          {
            content:
              "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.",
            label: "Comment lire le dPEI score ?",
            content_en:
              "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.",
            label_en: "How to read the dPEI score?",
            visible: false,
            value: 4
          }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    locale: useLocale()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicFaq.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFaq.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFaq.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              button2={
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  children={null}
                  className={classNames("__wab_instance", sty.button)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToBilan"] = true
                      ? (() => {
                          const actionArgs = { destination: `/bilan` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToBilan"] != null &&
                      typeof $steps["goToBilan"] === "object" &&
                      typeof $steps["goToBilan"].then === "function"
                    ) {
                      $steps["goToBilan"] = await $steps["goToBilan"];
                    }
                  }}
                  onShapeChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "shape"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={generateStateValueProp($state, ["button", "shape"])}
                />
              }
              className={classNames("__wab_instance", sty.navbar)}
              onShowChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["navbar", "show"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              show={generateStateValueProp($state, ["navbar", "show"])}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"input"}
              data-plasmic-override={overrides.input}
              hasGap={true}
              className={classNames(projectcss.all, sty.input, {
                [sty.inputglobal_locale_en]: hasVariant(
                  globalVariants,
                  "locale",
                  "en"
                )
              })}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.faqContent;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"faq"}
                    data-plasmic-override={overrides.faq}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.faq)}
                    key={currentIndex}
                  >
                    <div
                      data-plasmic-name={"title"}
                      data-plasmic-override={overrides.title}
                      className={classNames(projectcss.all, sty.title)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.faqContent[
                                    currentIndex
                                  ].visible =
                                    !$state.faqContent[currentIndex].visible);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      <div
                        data-plasmic-name={"password"}
                        data-plasmic-override={overrides.password}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password,
                          {
                            [sty.passwordglobal_locale_en]: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "locale", "en") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.label_en;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Adh\u00e9rence";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.label;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Adh\u00e9rence";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                      {(() => {
                        try {
                          return !currentItem.visible;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <Vector5SvgIcon
                          className={classNames(projectcss.all, sty.svg___9VlN)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return currentItem.visible;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Vector6SvgIcon
                          className={classNames(projectcss.all, sty.svg__scUv)}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                    {(() => {
                      try {
                        return currentItem.visible;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"content"}
                        data-plasmic-override={overrides.content}
                        className={classNames(projectcss.all, sty.content)}
                      >
                        <div
                          data-plasmic-name={"password2"}
                          data-plasmic-override={overrides.password2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.password2,
                            {
                              [sty.password2global_locale_en]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.content_en;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.content;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Lorem ipsum dolor sit amet consectetur. Quam felis a gravida faucibus nisl. Consequat ut magnis a aliquet odio eros imperdiet. Ultricies id mi fusce amet. Libero amet neque viverra donec et purus ultrices nunc.";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      </div>
                    ) : null}
                  </Stack__>
                );
              })}
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "main",
    "navbar",
    "button",
    "input",
    "faq",
    "title",
    "password",
    "content",
    "password2"
  ],
  main: [
    "main",
    "navbar",
    "button",
    "input",
    "faq",
    "title",
    "password",
    "content",
    "password2"
  ],
  navbar: ["navbar", "button"],
  button: ["button"],
  input: ["input", "faq", "title", "password", "content", "password2"],
  faq: ["faq", "title", "password", "content", "password2"],
  title: ["title", "password"],
  password: ["password"],
  content: ["content", "password2"],
  password2: ["password2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  main: "div";
  navbar: typeof Navbar;
  button: typeof Button;
  input: "div";
  faq: "div";
  title: "div";
  password: "div";
  content: "div";
  password2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaq__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaq__VariantsArgs;
    args?: PlasmicFaq__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaq__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaq__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFaq__ArgProps,
          internalVariantPropNames: PlasmicFaq__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaq__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaq";
  } else {
    func.displayName = `PlasmicFaq.${nodeName}`;
  }
  return func;
}

export const PlasmicFaq = Object.assign(
  // Top-level PlasmicFaq renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    navbar: makeNodeComponent("navbar"),
    button: makeNodeComponent("button"),
    input: makeNodeComponent("input"),
    faq: makeNodeComponent("faq"),
    title: makeNodeComponent("title"),
    password: makeNodeComponent("password"),
    content: makeNodeComponent("content"),
    password2: makeNodeComponent("password2"),

    // Metadata about props expected for PlasmicFaq
    internalVariantProps: PlasmicFaq__VariantProps,
    internalArgProps: PlasmicFaq__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "dPEI Pocket",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFaq;
/* prettier-ignore-end */
