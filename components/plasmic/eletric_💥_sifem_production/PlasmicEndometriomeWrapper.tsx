/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sYXMYndb1v9rTXALzdZyn1
// Component: DTGQof0r_0Bl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sYXMYndb1v9rTXALzdZyn1/projectcss
import sty from "./PlasmicEndometriomeWrapper.module.css"; // plasmic-import: DTGQof0r_0Bl/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: 4oXSGoV4rKYK/icon

createPlasmicElementProxy;

export type PlasmicEndometriomeWrapper__VariantMembers = {};
export type PlasmicEndometriomeWrapper__VariantsArgs = {};
type VariantPropType = keyof PlasmicEndometriomeWrapper__VariantsArgs;
export const PlasmicEndometriomeWrapper__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEndometriomeWrapper__ArgsType = { text2?: React.ReactNode };
type ArgPropType = keyof PlasmicEndometriomeWrapper__ArgsType;
export const PlasmicEndometriomeWrapper__ArgProps = new Array<ArgPropType>(
  "text2"
);

export type PlasmicEndometriomeWrapper__OverridesType = {
  endometriomeWrapper?: Flex__<"div">;
  badgeBase?: Flex__<"div">;
  svg?: Flex__<"svg">;
  freeBox?: Flex__<"div">;
  select2?: Flex__<typeof AntdSelect>;
};

export interface DefaultEndometriomeWrapperProps {
  text2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEndometriomeWrapper__RenderFunc(props: {
  variants: PlasmicEndometriomeWrapper__VariantsArgs;
  args: PlasmicEndometriomeWrapper__ArgsType;
  overrides: PlasmicEndometriomeWrapper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"endometriomeWrapper"}
      data-plasmic-override={overrides.endometriomeWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.endometriomeWrapper
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"badgeBase"}
        data-plasmic-override={overrides.badgeBase}
        hasGap={true}
        className={classNames(projectcss.all, sty.badgeBase)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iXzCj
              )}
            >
              {"Endom\u00e9triome 1"}
            </div>
          ),
          value: args.text2,
          className: classNames(sty.slotTargetText2)
        })}
        <XIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </Stack__>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <AntdSelect
          data-plasmic-name={"select2"}
          data-plasmic-override={overrides.select2}
          className={classNames("__wab_instance", sty.select2)}
          defaultOpen={false}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          mode={"single"}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["select2", "value"]).apply(
              null,
              eventArgs
            );
          }}
          options={(() => {
            const __composite = [
              { value: null, label: null, type: "option" },
              { value: null, label: null, type: "option" }
            ];
            __composite["0"]["value"] = "1";
            __composite["0"]["label"] = "1 cm";
            __composite["1"]["value"] = "2";
            __composite["1"]["label"] = "2 cm";
            return __composite;
          })()}
          placeholder={"S\u00e9lectionner..."}
          popupScopeClassName={sty["select2__popup"]}
          value={generateStateValueProp($state, ["select2", "value"])}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  endometriomeWrapper: [
    "endometriomeWrapper",
    "badgeBase",
    "svg",
    "freeBox",
    "select2"
  ],
  badgeBase: ["badgeBase", "svg"],
  svg: ["svg"],
  freeBox: ["freeBox", "select2"],
  select2: ["select2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  endometriomeWrapper: "div";
  badgeBase: "div";
  svg: "svg";
  freeBox: "div";
  select2: typeof AntdSelect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEndometriomeWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEndometriomeWrapper__VariantsArgs;
    args?: PlasmicEndometriomeWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEndometriomeWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEndometriomeWrapper__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEndometriomeWrapper__ArgProps,
          internalVariantPropNames: PlasmicEndometriomeWrapper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEndometriomeWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "endometriomeWrapper") {
    func.displayName = "PlasmicEndometriomeWrapper";
  } else {
    func.displayName = `PlasmicEndometriomeWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicEndometriomeWrapper = Object.assign(
  // Top-level PlasmicEndometriomeWrapper renders the root element
  makeNodeComponent("endometriomeWrapper"),
  {
    // Helper components rendering sub-elements
    badgeBase: makeNodeComponent("badgeBase"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    select2: makeNodeComponent("select2"),

    // Metadata about props expected for PlasmicEndometriomeWrapper
    internalVariantProps: PlasmicEndometriomeWrapper__VariantProps,
    internalArgProps: PlasmicEndometriomeWrapper__ArgProps
  }
);

export default PlasmicEndometriomeWrapper;
/* prettier-ignore-end */
