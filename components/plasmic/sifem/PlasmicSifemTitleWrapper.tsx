/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jND4haQkMjdpXVH9tN144R
// Component: kWHhENwxRpxl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jND4haQkMjdpXVH9tN144R/projectcss
import sty from "./PlasmicSifemTitleWrapper.module.css"; // plasmic-import: kWHhENwxRpxl/css

createPlasmicElementProxy;

export type PlasmicSifemTitleWrapper__VariantMembers = {};
export type PlasmicSifemTitleWrapper__VariantsArgs = {};
type VariantPropType = keyof PlasmicSifemTitleWrapper__VariantsArgs;
export const PlasmicSifemTitleWrapper__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSifemTitleWrapper__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicSifemTitleWrapper__ArgsType;
export const PlasmicSifemTitleWrapper__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicSifemTitleWrapper__OverridesType = {
  mobileNavbarTiles?: Flex__<"div">;
  frame1437253913?: Flex__<"div">;
  frame22?: Flex__<"div">;
};

export interface DefaultSifemTitleWrapperProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSifemTitleWrapper__RenderFunc(props: {
  variants: PlasmicSifemTitleWrapper__VariantsArgs;
  args: PlasmicSifemTitleWrapper__ArgsType;
  overrides: PlasmicSifemTitleWrapper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"mobileNavbarTiles"}
      data-plasmic-override={overrides.mobileNavbarTiles}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.mobileNavbarTiles
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame1437253913"}
        data-plasmic-override={overrides.frame1437253913}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame1437253913)}
      >
        {renderPlasmicSlot({
          defaultContents: "HISTORIQUE",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </Stack__>
      {false ? (
        <div
          data-plasmic-name={"frame22"}
          data-plasmic-override={overrides.frame22}
          className={classNames(projectcss.all, sty.frame22)}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mobileNavbarTiles: ["mobileNavbarTiles", "frame1437253913", "frame22"],
  frame1437253913: ["frame1437253913"],
  frame22: ["frame22"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mobileNavbarTiles: "div";
  frame1437253913: "div";
  frame22: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSifemTitleWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSifemTitleWrapper__VariantsArgs;
    args?: PlasmicSifemTitleWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSifemTitleWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSifemTitleWrapper__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSifemTitleWrapper__ArgProps,
          internalVariantPropNames: PlasmicSifemTitleWrapper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSifemTitleWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mobileNavbarTiles") {
    func.displayName = "PlasmicSifemTitleWrapper";
  } else {
    func.displayName = `PlasmicSifemTitleWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicSifemTitleWrapper = Object.assign(
  // Top-level PlasmicSifemTitleWrapper renders the root element
  makeNodeComponent("mobileNavbarTiles"),
  {
    // Helper components rendering sub-elements
    frame1437253913: makeNodeComponent("frame1437253913"),
    frame22: makeNodeComponent("frame22"),

    // Metadata about props expected for PlasmicSifemTitleWrapper
    internalVariantProps: PlasmicSifemTitleWrapper__VariantProps,
    internalArgProps: PlasmicSifemTitleWrapper__ArgProps
  }
);

export default PlasmicSifemTitleWrapper;
/* prettier-ignore-end */
