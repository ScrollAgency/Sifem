/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jND4haQkMjdpXVH9tN144R
// Component: BkBJrIugFO-a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseSelect } from "@plasmicpkgs/react-aria/skinny/registerSelect";
import Label2 from "../../Label2"; // plasmic-import: 3w8Ls3OEahMQ/component
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import { BaseSelectValue } from "@plasmicpkgs/react-aria/skinny/registerSelect";
import Description2 from "../../Description2"; // plasmic-import: RJY3Zm1ONBbU/component
import MenuPopover2 from "../../MenuPopover2"; // plasmic-import: NMuDVhuXDIhc/component
import MenuItem2 from "../../MenuItem2"; // plasmic-import: yWcgJkcChm8E/component
import MenuSection2 from "../../MenuSection2"; // plasmic-import: UVY77y08KHgv/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jND4haQkMjdpXVH9tN144R/projectcss
import sty from "./PlasmicSelect2.module.css"; // plasmic-import: BkBJrIugFO-a/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: nKWApul0bZY3/icon

createPlasmicElementProxy;

export type PlasmicSelect2__VariantMembers = {
  type: "soft" | "plain";
};
export type PlasmicSelect2__VariantsArgs = {
  type?: SingleChoiceArg<"soft" | "plain">;
};
type VariantPropType = keyof PlasmicSelect2__VariantsArgs;
export const PlasmicSelect2__VariantProps = new Array<VariantPropType>("type");

export type PlasmicSelect2__ArgsType = {
  onChange?: (val: string) => void;
  placeholder?: string;
  showLabel?: boolean;
  showDescription?: boolean;
  initialSelectedValue?: "Dynamic options";
  disabled?: boolean;
  ariaLabel?: string;
  label?: React.ReactNode;
  description?: React.ReactNode;
  items?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSelect2__ArgsType;
export const PlasmicSelect2__ArgProps = new Array<ArgPropType>(
  "onChange",
  "placeholder",
  "showLabel",
  "showDescription",
  "initialSelectedValue",
  "disabled",
  "ariaLabel",
  "label",
  "description",
  "items"
);

export type PlasmicSelect2__OverridesType = {
  ariaSelect?: Flex__<typeof BaseSelect>;
  label2?: Flex__<typeof Label2>;
  ariaButton?: Flex__<typeof BaseButton>;
  ariaSelectedValue?: Flex__<typeof BaseSelectValue>;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
  description2?: Flex__<typeof Description2>;
  menuPopover2?: Flex__<typeof MenuPopover2>;
};

export interface DefaultSelect2Props {
  onChange?: (val: string) => void;
  placeholder?: string;
  showLabel?: boolean;
  showDescription?: boolean;
  initialSelectedValue?: "Dynamic options";
  disabled?: boolean;
  ariaLabel?: string;
  label?: React.ReactNode;
  description?: React.ReactNode;
  items?: React.ReactNode;
  type?: SingleChoiceArg<"soft" | "plain">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelect2__RenderFunc(props: {
  variants: PlasmicSelect2__VariantsArgs;
  args: PlasmicSelect2__ArgsType;
  overrides: PlasmicSelect2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          placeholder: "Select an item",
          showLabel: true,
          showDescription: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaSelect.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "ariaSelect.selectedValue",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props["initialSelectedValue"],

        onChangeProp: "onChange"
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    focused: false,
    focusVisible: false,
    disabled: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BaseSelect
      data-plasmic-name={"ariaSelect"}
      data-plasmic-override={overrides.ariaSelect}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.ariaSelect,
        { [sty.ariaSelecttype_soft]: hasVariant($state, "type", "soft") }
      )}
      defaultSelectedKey={args.initialSelectedValue}
      isDisabled={args.disabled}
      isOpen={generateStateValueProp($state, ["ariaSelect", "isOpen"])}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["ariaSelect", "isOpen"]).apply(
          null,
          eventArgs
        );
      }}
      onSelectionChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, [
          "ariaSelect",
          "selectedValue"
        ]).apply(null, eventArgs);
      }}
      plasmicUpdateVariant={updateVariant}
      selectedKey={generateStateValueProp($state, [
        "ariaSelect",
        "selectedValue"
      ])}
    >
      {$props.showLabel ? (
        <Label2
          data-plasmic-name={"label2"}
          data-plasmic-override={overrides.label2}
          className={classNames("__wab_instance", sty.label2)}
        >
          {renderPlasmicSlot({
            defaultContents: "Label",
            value: args.label
          })}
        </Label2>
      ) : null}
      <BaseButton
        data-plasmic-name={"ariaButton"}
        data-plasmic-override={overrides.ariaButton}
        className={classNames("__wab_instance", sty.ariaButton, {
          [sty.ariaButtontype_soft]: hasVariant($state, "type", "soft")
        })}
      >
        <BaseSelectValue
          data-plasmic-name={"ariaSelectedValue"}
          data-plasmic-override={overrides.ariaSelectedValue}
          className={classNames("__wab_instance", sty.ariaSelectedValue)}
          customize={true}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.placeholder;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Select an item";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </BaseSelectValue>
        <ChevronDownIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </BaseButton>
      {$props.showDescription ? (
        <Description2
          data-plasmic-name={"description2"}
          data-plasmic-override={overrides.description2}
          className={classNames("__wab_instance", sty.description2)}
        >
          {renderPlasmicSlot({
            defaultContents: "Description...",
            value: args.description
          })}
        </Description2>
      ) : null}
      <MenuPopover2
        data-plasmic-name={"menuPopover2"}
        data-plasmic-override={overrides.menuPopover2}
        className={classNames("__wab_instance", sty.menuPopover2)}
        menuItems={renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <MenuItem2 label={"Item 1"} value={"item1"} />

              <MenuItem2 label={"Item 2"} value={"item2"} />

              <MenuItem2 label={"Item 3"} value={"item3"} />

              <MenuSection2
                className={classNames(
                  "__wab_instance",
                  sty.menuSection2__xYgXk
                )}
                header={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0KPLr
                    )}
                  >
                    {"Section"}
                  </div>
                }
                items={
                  <React.Fragment>
                    <MenuItem2
                      label={"Section Item 1"}
                      value={"section-item-1"}
                    />

                    <MenuItem2
                      label={"Section Item 2"}
                      value={"section-item-2"}
                    />

                    <MenuItem2
                      label={"Section Item 3"}
                      value={"section-item-3"}
                    />
                  </React.Fragment>
                }
              />
            </React.Fragment>
          ),
          value: args.items
        })}
        offset={2}
      />
    </BaseSelect>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaSelect: [
    "ariaSelect",
    "label2",
    "ariaButton",
    "ariaSelectedValue",
    "text",
    "svg",
    "description2",
    "menuPopover2"
  ],
  label2: ["label2"],
  ariaButton: ["ariaButton", "ariaSelectedValue", "text", "svg"],
  ariaSelectedValue: ["ariaSelectedValue", "text"],
  text: ["text"],
  svg: ["svg"],
  description2: ["description2"],
  menuPopover2: ["menuPopover2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaSelect: typeof BaseSelect;
  label2: typeof Label2;
  ariaButton: typeof BaseButton;
  ariaSelectedValue: typeof BaseSelectValue;
  text: "div";
  svg: "svg";
  description2: typeof Description2;
  menuPopover2: typeof MenuPopover2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelect2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelect2__VariantsArgs;
    args?: PlasmicSelect2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelect2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelect2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelect2__ArgProps,
          internalVariantPropNames: PlasmicSelect2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelect2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaSelect") {
    func.displayName = "PlasmicSelect2";
  } else {
    func.displayName = `PlasmicSelect2.${nodeName}`;
  }
  return func;
}

export const PlasmicSelect2 = Object.assign(
  // Top-level PlasmicSelect2 renders the root element
  makeNodeComponent("ariaSelect"),
  {
    // Helper components rendering sub-elements
    label2: makeNodeComponent("label2"),
    ariaButton: makeNodeComponent("ariaButton"),
    ariaSelectedValue: makeNodeComponent("ariaSelectedValue"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    description2: makeNodeComponent("description2"),
    menuPopover2: makeNodeComponent("menuPopover2"),

    // Metadata about props expected for PlasmicSelect2
    internalVariantProps: PlasmicSelect2__VariantProps,
    internalArgProps: PlasmicSelect2__ArgProps
  }
);

export default PlasmicSelect2;
/* prettier-ignore-end */
