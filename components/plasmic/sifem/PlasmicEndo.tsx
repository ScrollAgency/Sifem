/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sYXMYndb1v9rTXALzdZyn1
// Component: kNiaobpWe5ah

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import Button from "../../Button"; // plasmic-import: -BkoXfQ_mA7-/component

import { LocaleValue, useLocale } from "./PlasmicGlobalVariant__Locale"; // plasmic-import: -c6F2vHxxdiZ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sYXMYndb1v9rTXALzdZyn1/projectcss
import sty from "./PlasmicEndo.module.css"; // plasmic-import: kNiaobpWe5ah/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: 4oXSGoV4rKYK/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: Yw1_HV9alQRc/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: AFWtWFpVw7kz/icon

createPlasmicElementProxy;

export type PlasmicEndo__VariantMembers = {};
export type PlasmicEndo__VariantsArgs = {};
type VariantPropType = keyof PlasmicEndo__VariantsArgs;
export const PlasmicEndo__VariantProps = new Array<VariantPropType>();

export type PlasmicEndo__ArgsType = {
  submissionEndometriome?: any;
  onSubmissionEndometriomeChange?: (val: string) => void;
  lesionId?: number;
  onLesionIdChange?: (val: string) => void;
  options?: any;
};
type ArgPropType = keyof PlasmicEndo__ArgsType;
export const PlasmicEndo__ArgProps = new Array<ArgPropType>(
  "submissionEndometriome",
  "onSubmissionEndometriomeChange",
  "lesionId",
  "onLesionIdChange",
  "options"
);

export type PlasmicEndo__OverridesType = {
  root?: Flex__<"div">;
  detailsEndometriome?: Flex__<"div">;
  endometriomeWrapper?: Flex__<"div">;
  fr?: Flex__<"div">;
  text3?: Flex__<"div">;
  en?: Flex__<"div">;
  text6?: Flex__<"div">;
  select2?: Flex__<typeof AntdSelect>;
  button11?: Flex__<typeof Button>;
};

export interface DefaultEndoProps {
  submissionEndometriome?: any;
  onSubmissionEndometriomeChange?: (val: string) => void;
  lesionId?: number;
  onLesionIdChange?: (val: string) => void;
  options?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEndo__RenderFunc(props: {
  variants: PlasmicEndo__VariantsArgs;
  args: PlasmicEndo__ArgsType;
  overrides: PlasmicEndo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "button11[].shape",
        type: "private",
        variableType: "text"
      },
      {
        path: "submissionEndometriome",
        type: "writable",
        variableType: "array",

        valueProp: "submissionEndometriome",
        onChangeProp: "onSubmissionEndometriomeChange"
      },
      {
        path: "lesionId",
        type: "writable",
        variableType: "number",

        valueProp: "lesionId",
        onChangeProp: "onLesionIdChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    locale: useLocale()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.submissionEndometriome.filter(
              x => x.lesion_id === $state.lesionId
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem3 = __plasmic_item_0;
        const currentIndex3 = __plasmic_idx_0;
        return (
          <Stack__
            as={"div"}
            data-plasmic-name={"detailsEndometriome"}
            data-plasmic-override={overrides.detailsEndometriome}
            hasGap={true}
            className={classNames(projectcss.all, sty.detailsEndometriome)}
            key={currentIndex3}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"endometriomeWrapper"}
              data-plasmic-override={overrides.endometriomeWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.endometriomeWrapper)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"fr"}
                data-plasmic-override={overrides.fr}
                hasGap={true}
                className={classNames(projectcss.all, sty.fr, {
                  [sty.frglobal_locale_en]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  )
                })}
              >
                <div
                  data-plasmic-name={"text3"}
                  data-plasmic-override={overrides.text3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text3,
                    {
                      [sty.text3global_locale_en]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "locale", "en") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return "Endometrioma " + (currentIndex3 + 1);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Endom\u00e9triome 1";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return "Endom√©triome " + (currentIndex3 + 1);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Endom\u00e9triome 1";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
                <XIcon
                  className={classNames(projectcss.all, sty.svg___3OdRy)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSubmissionEndometriome"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["submissionEndometriome"]
                            },
                            operation: 6,
                            startIndex: (() => {
                              try {
                                return $state.submissionEndometriome.findIndex(
                                  item =>
                                    item.state_id ===
                                    $state.lesionId + currentIndex3
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            deleteCount: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const arr = $stateGet(objRoot, variablePath);
                            arr.splice(startIndex, deleteCount);
                            return arr;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSubmissionEndometriome"] != null &&
                      typeof $steps["updateSubmissionEndometriome"] ===
                        "object" &&
                      typeof $steps["updateSubmissionEndometriome"].then ===
                        "function"
                    ) {
                      $steps["updateSubmissionEndometriome"] = await $steps[
                        "updateSubmissionEndometriome"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"en"}
                data-plasmic-override={overrides.en}
                hasGap={true}
                className={classNames(projectcss.all, sty.en, {
                  [sty.englobal_locale_en]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  )
                })}
              >
                <div
                  data-plasmic-name={"text6"}
                  data-plasmic-override={overrides.text6}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text6
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "Endometrioma " + (currentIndex3 + 1);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Endom\u00e9triome 1";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <XIcon
                  className={classNames(projectcss.all, sty.svg__iQbAb)}
                  role={"img"}
                />
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__aWkkj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dzDja,
                    {
                      [sty.textglobal_locale_en__dzDjAfhlYu]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "locale", "en")
                    ? "Size"
                    : "Taille"}
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.select2),
                    defaultStylesClassName: classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    ),
                    defaultValue: (() => {
                      try {
                        return $props.options[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "27";
                        }
                        throw e;
                      }
                    })(),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "select2",
                        __plasmic_idx_0,
                        "value"
                      ]).apply(null, eventArgs);

                      (async (value, option) => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.submissionEndometriome.filter(
                                    x => x.lesion_id === $state.lesionId
                                  )[currentIndex3].id =
                                    $state.select2[currentIndex3].value);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    },
                    options: (() => {
                      try {
                        return $props.options;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ];
                        }
                        throw e;
                      }
                    })(),
                    placeholder: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fnwBz
                        )}
                      >
                        {"S\u00e9lectionner..."}
                      </div>
                    ),
                    popupScopeClassName: sty["select2__popup"],
                    value: generateStateValueProp($state, [
                      "select2",
                      __plasmic_idx_0,
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "select2[].value"
                      }
                    ],
                    [__plasmic_idx_0],
                    undefined ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "select2[].value",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return $props.options[0];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "27";
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <AntdSelect
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox___9NsLx)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.button11),
                  onShapeChange: async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button11",
                        __plasmic_idx_0,
                        "shape"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  },
                  shape: generateStateValueProp($state, [
                    "button11",
                    __plasmic_idx_0,
                    "shape"
                  ])
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "button11[].shape",
                      initFunc: ({ $props, $state, $queries }) => "round"
                    }
                  ],
                  [__plasmic_idx_0]
                );
                return (
                  <Button
                    data-plasmic-name={"button11"}
                    data-plasmic-override={overrides.button11}
                    {...child$Props}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qxtT5
                      )}
                    >
                      {"Button"}
                    </div>
                  </Button>
                );
              })()}
            </div>
          </Stack__>
        );
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "detailsEndometriome",
    "endometriomeWrapper",
    "fr",
    "text3",
    "en",
    "text6",
    "select2",
    "button11"
  ],
  detailsEndometriome: [
    "detailsEndometriome",
    "endometriomeWrapper",
    "fr",
    "text3",
    "en",
    "text6",
    "select2",
    "button11"
  ],
  endometriomeWrapper: [
    "endometriomeWrapper",
    "fr",
    "text3",
    "en",
    "text6",
    "select2"
  ],
  fr: ["fr", "text3"],
  text3: ["text3"],
  en: ["en", "text6"],
  text6: ["text6"],
  select2: ["select2"],
  button11: ["button11"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  detailsEndometriome: "div";
  endometriomeWrapper: "div";
  fr: "div";
  text3: "div";
  en: "div";
  text6: "div";
  select2: typeof AntdSelect;
  button11: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEndo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEndo__VariantsArgs;
    args?: PlasmicEndo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEndo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEndo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEndo__ArgProps,
          internalVariantPropNames: PlasmicEndo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEndo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEndo";
  } else {
    func.displayName = `PlasmicEndo.${nodeName}`;
  }
  return func;
}

export const PlasmicEndo = Object.assign(
  // Top-level PlasmicEndo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    detailsEndometriome: makeNodeComponent("detailsEndometriome"),
    endometriomeWrapper: makeNodeComponent("endometriomeWrapper"),
    fr: makeNodeComponent("fr"),
    text3: makeNodeComponent("text3"),
    en: makeNodeComponent("en"),
    text6: makeNodeComponent("text6"),
    select2: makeNodeComponent("select2"),
    button11: makeNodeComponent("button11"),

    // Metadata about props expected for PlasmicEndo
    internalVariantProps: PlasmicEndo__VariantProps,
    internalArgProps: PlasmicEndo__ArgProps
  }
);

export default PlasmicEndo;
/* prettier-ignore-end */
