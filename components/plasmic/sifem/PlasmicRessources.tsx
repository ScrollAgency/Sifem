/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jND4haQkMjdpXVH9tN144R
// Component: nMKmspBaikY6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: hCuAnYyEatdq/component
import Button from "../../Button"; // plasmic-import: DVuV3lh8L2we/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { LocaleValue, useLocale } from "./PlasmicGlobalVariant__Locale"; // plasmic-import: KemWC_IXZp7Y/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jND4haQkMjdpXVH9tN144R/projectcss
import sty from "./PlasmicRessources.module.css"; // plasmic-import: nMKmspBaikY6/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: umpGfCAaGpna/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: kj2DLaVP_RvL/icon

createPlasmicElementProxy;

export type PlasmicRessources__VariantMembers = {};
export type PlasmicRessources__VariantsArgs = {};
type VariantPropType = keyof PlasmicRessources__VariantsArgs;
export const PlasmicRessources__VariantProps = new Array<VariantPropType>();

export type PlasmicRessources__ArgsType = { isChecked2?: boolean };
type ArgPropType = keyof PlasmicRessources__ArgsType;
export const PlasmicRessources__ArgProps = new Array<ArgPropType>("isChecked2");

export type PlasmicRessources__OverridesType = {
  root?: Flex__<"div">;
  main?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  button?: Flex__<typeof Button>;
  text?: Flex__<"div">;
  input?: Flex__<"div">;
  adh?: Flex__<"div">;
  title?: Flex__<"div">;
  password?: Flex__<"div">;
  content?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultRessourcesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRessources__RenderFunc(props: {
  variants: PlasmicRessources__VariantsArgs;
  args: PlasmicRessources__ArgsType;
  overrides: PlasmicRessources__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "round"
      },
      {
        path: "navbar.show",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "lexiqueContent",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            label:
              "ESUR consensus MRI for endometriosis: indications, reporting, and classifications",
            label_en:
              "ESUR consensus MRI for endometriosis: indications, reporting, and classifications",
            content_en:
              '<p><a href="https://rdcu.be/en4MB">https://rdcu.be/en4MB</a></p>\n<p>Thomassin-Naggara et al.</p>\n<p>DOI: 10.1007/s00330-025-11579-0</p>',
            content:
              '<p><a href="https://rdcu.be/en4MB">https://rdcu.be/en4MB</a></p>\n<p>Thomassin-Naggara et al.</p>\n<p>DOI: 10.1007/s00330-025-11579-0</p>'
          },
          {
            label:
              "ESUR consensus MRI for endometriosis: protocol, lexicon, and compartment-based analysis",
            label_en:
              "ESUR consensus MRI for endometriosis: protocol, lexicon, and compartment-based analysis",
            content_en:
              '<p><a href="https://rdcu.be/en4MT">https://rdcu.be/en4MT</a></p>\n<p>Thomassin-Naggara et al.</p>\n<p>DOI: 10.1007/s00330-025-11611-3</p>',
            content:
              '<p><a href="https://rdcu.be/en4MT">https://rdcu.be/en4MT</a></p>\n<p>Thomassin-Naggara et al.</p>\n<p>DOI: 10.1007/s00330-025-11611-3</p>'
          },
          {
            label:
              "Multicenter External Validation of the Deep Pelvic Endometriosis Index Magnetic Resonance Imaging Score",
            label_en:
              "Multicenter External Validation of the Deep Pelvic Endometriosis Index Magnetic Resonance Imaging Score",
            content_en:
              '<p><a href="https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2804476">https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2804476</a></p>\n<p>Thomassin-Naggara I, Monroc M, Chauveau et al.</p>\n<p>DOI: 10.1001/jamanetworkopen.2023.10254</p>',
            content:
              '<p><a href="https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2804476">https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2804476</a></p>\n<p>Thomassin-Naggara I, Monroc M, Chauveau et al.</p>\n<p>DOI: 10.1001/jamanetworkopen.2023.10254</p>'
          },
          {
            label:
              "Imaging of Endometriosis : Comparative Guide of US, MRI and surgery",
            label_en:
              "Imaging of Endometriosis : Comparative Guide of US, MRI and surgery",
            content_en:
              '<p><a href="https://link.springer.com/book/10.1007/978-3-031-82750-1">https://link.springer.com/book/10.1007/978-3-031-82750-1</a></p>\n<p>Thomassin-Naggara I and Rousset P</p>',
            content:
              '<p><a href="https://link.springer.com/book/10.1007/978-3-031-82750-1">https://link.springer.com/book/10.1007/978-3-031-82750-1</a></p>\n<p>Thomassin-Naggara I and Rousset P</p>'
          },
          {
            label:
              "Pelvic nerve endometriosis: MRI features and key findings for surgical decision",
            label_en:
              "Pelvic nerve endometriosis: MRI features and key findings for surgical decision",
            content_en:
              '<p><a href="https://insightsimaging.springeropen.com/articles/10.1186/s13244-025-02005-6">https://insightsimaging.springeropen.com/articles/10.1186/s13244-025-02005-6</a></p>\n<p>Justine Bourg, Edouard Ruaux, Pierre Adrien Bolze, Marie Gavrel, Mathilde Charlot, Fran\u00e7ois Golfier, Isabelle Thomassin-Naggara & Pascal Rousset</p>',
            content:
              '<p><a href="https://insightsimaging.springeropen.com/articles/10.1186/s13244-025-02005-6">https://insightsimaging.springeropen.com/articles/10.1186/s13244-025-02005-6</a></p>\n<p>Justine Bourg, Edouard Ruaux, Pierre Adrien Bolze, Marie Gavrel, Mathilde Charlot, Fran\u00e7ois Golfier, Isabelle Thomassin-Naggara & Pascal Rousset</p>'
          },
          {
            label:
              "Actualisation de la place des diff\u00e9rents examens d\u2019imagerie pour le diagnostic d\u2019endom\u00e9triose",
            label_en:
              "Actualisation de la place des diff\u00e9rents examens d\u2019imagerie pour le diagnostic d\u2019endom\u00e9triose",
            content_en:
              '<p><a href="https://www.has-sante.fr/jcms/p_3524940/fr/actualisation-de-la-place-des-differents-examens-d-imagerie-pour-le-diagnostic-d-endometriose">https://www.has-sante.fr/jcms/p_3524940/fr/actualisation-de-la-place-des-differents-examens-d-imagerie-pour-le-diagnostic-d-endometriose</a></p>\n<p>Haute Autorit\u00e9 de Sant\u00e9 (HAS)</p>',
            content:
              '<p><a href="https://www.has-sante.fr/jcms/p_3524940/fr/actualisation-de-la-place-des-differents-examens-d-imagerie-pour-le-diagnostic-d-endometriose">https://www.has-sante.fr/jcms/p_3524940/fr/actualisation-de-la-place-des-differents-examens-d-imagerie-pour-le-diagnostic-d-endometriose</a></p>\n<p>Haute Autorit\u00e9 de Sant\u00e9 (HAS)</p>'
          },
          {
            label: "Remerciements",
            label_en: "Acknowledgements",
            content_en:
              "<ul>  <li>Pr Isabelle Thomassin-Naggara (APHP Sorbonne Universit\u00e9)</li>  <li>Pr Pascal Rousset (HCLyon)</li>  <li>Dr Michele Monroc (Clinique)</li>  <li>Dr Wendaline Van Buren (Mayo Clinic)</li></ul>",
            content:
              "<ul>  <li>Pr Isabelle Thomassin-Naggara (APHP Sorbonne Universit\u00e9)</li>  <li>Pr Pascal Rousset (HCLyon)</li>  <li>Dr Michele Monroc (Clinique)</li>  <li>Dr Wendaline Van Buren (Mayo Clinic)</li></ul>"
          }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    locale: useLocale()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicRessources.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicRessources.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicRessources.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              button2={
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToBilan"] = true
                      ? (() => {
                          const actionArgs = { destination: `/bilan` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToBilan"] != null &&
                      typeof $steps["goToBilan"] === "object" &&
                      typeof $steps["goToBilan"].then === "function"
                    ) {
                      $steps["goToBilan"] = await $steps["goToBilan"];
                    }

                    $steps["updateButtonShape"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["button", "shape"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateButtonShape"] != null &&
                      typeof $steps["updateButtonShape"] === "object" &&
                      typeof $steps["updateButtonShape"].then === "function"
                    ) {
                      $steps["updateButtonShape"] = await $steps[
                        "updateButtonShape"
                      ];
                    }
                  }}
                  onShapeChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "shape"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={generateStateValueProp($state, ["button", "shape"])}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Button"}
                  </div>
                </Button>
              }
              className={classNames("__wab_instance", sty.navbar)}
              onShowChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["navbar", "show"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              show={generateStateValueProp($state, ["navbar", "show"])}
            />

            <Stack__
              as={"div"}
              data-plasmic-name={"input"}
              data-plasmic-override={overrides.input}
              hasGap={true}
              className={classNames(projectcss.all, sty.input, {
                [sty.inputglobal_locale_en]: hasVariant(
                  globalVariants,
                  "locale",
                  "en"
                ),
                [sty.inputglobal_locale_fr]: hasVariant(
                  globalVariants,
                  "locale",
                  "fr"
                )
              })}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.lexiqueContent;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"adh"}
                    data-plasmic-override={overrides.adh}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.adh)}
                    key={currentIndex}
                  >
                    <div
                      data-plasmic-name={"title"}
                      data-plasmic-override={overrides.title}
                      className={classNames(projectcss.all, sty.title)}
                    >
                      <div
                        data-plasmic-name={"password"}
                        data-plasmic-override={overrides.password}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.password,
                          {
                            [sty.passwordglobal_locale_en]: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "locale", "en") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.label_en;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Adh\u00e9rence";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.label;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Adh\u00e9rence";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"content"}
                      data-plasmic-override={overrides.content}
                      className={classNames(projectcss.all, sty.content)}
                    >
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml, {
                          [sty.embedHtmlglobal_locale_en]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        })}
                        code={
                          hasVariant(globalVariants, "locale", "en")
                            ? (() => {
                                try {
                                  return currentItem.content_en;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "<div>Paste your embed code via the right sidebar</div>";
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return currentItem.content;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "<div>Paste your embed code via the right sidebar</div>";
                                  }
                                  throw e;
                                }
                              })()
                        }
                      />
                    </div>
                  </Stack__>
                );
              })}
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "main",
    "navbar",
    "button",
    "text",
    "input",
    "adh",
    "title",
    "password",
    "content",
    "embedHtml"
  ],
  main: [
    "main",
    "navbar",
    "button",
    "text",
    "input",
    "adh",
    "title",
    "password",
    "content",
    "embedHtml"
  ],
  navbar: ["navbar", "button", "text"],
  button: ["button", "text"],
  text: ["text"],
  input: ["input", "adh", "title", "password", "content", "embedHtml"],
  adh: ["adh", "title", "password", "content", "embedHtml"],
  title: ["title", "password"],
  password: ["password"],
  content: ["content", "embedHtml"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  main: "div";
  navbar: typeof Navbar;
  button: typeof Button;
  text: "div";
  input: "div";
  adh: "div";
  title: "div";
  password: "div";
  content: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRessources__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRessources__VariantsArgs;
    args?: PlasmicRessources__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRessources__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRessources__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRessources__ArgProps,
          internalVariantPropNames: PlasmicRessources__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRessources__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRessources";
  } else {
    func.displayName = `PlasmicRessources.${nodeName}`;
  }
  return func;
}

export const PlasmicRessources = Object.assign(
  // Top-level PlasmicRessources renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    navbar: makeNodeComponent("navbar"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    input: makeNodeComponent("input"),
    adh: makeNodeComponent("adh"),
    title: makeNodeComponent("title"),
    password: makeNodeComponent("password"),
    content: makeNodeComponent("content"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicRessources
    internalVariantProps: PlasmicRessources__VariantProps,
    internalArgProps: PlasmicRessources__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "dPEI Pocket",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRessources;
/* prettier-ignore-end */
