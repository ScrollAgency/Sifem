/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2rVY7FDpNEigoftN9kimn
// Component: ET2g_kpCvPkB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: i2rVY7FDpNEigoftN9kimn/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: i2rVY7FDpNEigoftN9kimn/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: i2rVY7FDpNEigoftN9kimn/projectcss
import sty from "./PlasmicCheckbox.module.css"; // plasmic-import: ET2g_kpCvPkB/css

import Checkbox2SvgIcon from "./icons/PlasmicIcon__Checkbox2Svg"; // plasmic-import: 5GBPLlWUvZ2O/icon
import Checkbox1SvgIcon from "./icons/PlasmicIcon__Checkbox1Svg"; // plasmic-import: G92WiV9KqftF/icon
import SquareMinusSvgIcon from "./icons/PlasmicIcon__SquareMinusSvg"; // plasmic-import: vowVMNU3AkaP/icon
import Checkbox3SvgIcon from "./icons/PlasmicIcon__Checkbox3Svg"; // plasmic-import: xpKhRBLhJF6K/icon
import SquareCheckFilledSvgIcon from "./icons/PlasmicIcon__SquareCheckFilledSvg"; // plasmic-import: 08zbz34pl8wR/icon

createPlasmicElementProxy;

export type PlasmicCheckbox__VariantMembers = {
  noLabel: "noLabel";
  isDisabled: "isDisabled";
  isChecked: "isChecked";
  isIndeterminate: "isIndeterminate";
};
export type PlasmicCheckbox__VariantsArgs = {
  noLabel?: SingleBooleanChoiceArg<"noLabel">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  isChecked?: SingleBooleanChoiceArg<"isChecked">;
  isIndeterminate?: SingleBooleanChoiceArg<"isIndeterminate">;
};
type VariantPropType = keyof PlasmicCheckbox__VariantsArgs;
export const PlasmicCheckbox__VariantProps = new Array<VariantPropType>(
  "noLabel",
  "isDisabled",
  "isChecked",
  "isIndeterminate"
);

export type PlasmicCheckbox__ArgsType = {
  name?: string;
  value?: string;
  "aria-label"?: string;
  "aria-labelledby"?: string;
  onChange?: (isChecked: boolean) => void;
  subContentDisplay?: boolean;
  imageDisplay?: boolean;
  imageValue?: React.ComponentProps<typeof PlasmicImg__>["src"];
  videoDisplay?: boolean;
  videoContent?: string;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCheckbox__ArgsType;
export const PlasmicCheckbox__ArgProps = new Array<ArgPropType>(
  "name",
  "value",
  "aria-label",
  "aria-labelledby",
  "onChange",
  "subContentDisplay",
  "imageDisplay",
  "imageValue",
  "videoDisplay",
  "videoContent",
  "children"
);

export type PlasmicCheckbox__OverridesType = {
  root?: Flex__<"div">;
  content?: Flex__<"div">;
  mainCheck?: Flex__<"div">;
  left?: Flex__<"div">;
  icon?: Flex__<"div">;
  labelContainer?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultCheckboxProps extends pp.CheckboxProps {
  "aria-label"?: string;
  "aria-labelledby"?: string;
  onChange?: (isChecked: boolean) => void;
  subContentDisplay?: boolean;
  imageDisplay?: boolean;
  imageValue?: React.ComponentProps<typeof PlasmicImg__>["src"];
  videoDisplay?: boolean;
  videoContent?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCheckbox__RenderFunc(props: {
  variants: PlasmicCheckbox__VariantsArgs;
  args: PlasmicCheckbox__ArgsType;
  overrides: PlasmicCheckbox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          subContentDisplay: false,
          imageDisplay: false,
          videoDisplay: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noLabel",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noLabel
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "isChecked",
        type: "writable",
        variableType: "boolean",

        valueProp: "isChecked",
        onChangeProp: "onChange"
      },
      {
        path: "isIndeterminate",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isIndeterminate
      },
      {
        path: "openVideo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.rootisChecked]: hasVariant($state, "isChecked", "isChecked"),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootisIndeterminate]: hasVariant(
            $state,
            "isIndeterminate",
            "isIndeterminate"
          ),
          [sty.rootnoLabel]: hasVariant($state, "noLabel", "noLabel")
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content, {
          [sty.contentisChecked]: hasVariant($state, "isChecked", "isChecked")
        })}
      >
        <div
          data-plasmic-name={"mainCheck"}
          data-plasmic-override={overrides.mainCheck}
          className={classNames(projectcss.all, sty.mainCheck, {
            [sty.mainCheckisChecked]: hasVariant(
              $state,
              "isChecked",
              "isChecked"
            ),
            [sty.mainCheckisDisabled]: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            )
          })}
        >
          <div
            data-plasmic-name={"left"}
            data-plasmic-override={overrides.left}
            className={classNames(projectcss.all, sty.left, {
              [sty.leftisChecked]: hasVariant($state, "isChecked", "isChecked"),
              [sty.leftisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              )
            })}
          >
            <div
              data-plasmic-name={"icon"}
              data-plasmic-override={overrides.icon}
              className={classNames(projectcss.all, sty.icon, {
                [sty.icon___focusVisibleWithin]:
                  triggers.focusVisibleWithin_root,
                [sty.iconisChecked]: hasVariant(
                  $state,
                  "isChecked",
                  "isChecked"
                ),
                [sty.iconisDisabled]: hasVariant(
                  $state,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.iconisIndeterminate]: hasVariant(
                  $state,
                  "isIndeterminate",
                  "isIndeterminate"
                ),
                [sty.iconnoLabel]: hasVariant($state, "noLabel", "noLabel")
              })}
            >
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant($state, "isIndeterminate", "isIndeterminate")
                    ? SquareMinusSvgIcon
                    : hasVariant($state, "isChecked", "isChecked")
                    ? Checkbox1SvgIcon
                    : Checkbox2SvgIcon
                }
                className={classNames(projectcss.all, sty.svg__h3MlO, {
                  [sty.svg___focusVisibleWithin__h3MlOdMbkp]:
                    triggers.focusVisibleWithin_root,
                  [sty.svgisChecked__h3MlOqPnWo]: hasVariant(
                    $state,
                    "isChecked",
                    "isChecked"
                  ),
                  [sty.svgisDisabled__h3MlOu7D1G]: hasVariant(
                    $state,
                    "isDisabled",
                    "isDisabled"
                  ),
                  [sty.svgisIndeterminate__h3MlOeYhXl]: hasVariant(
                    $state,
                    "isIndeterminate",
                    "isIndeterminate"
                  ),
                  [sty.svgnoLabel__h3MlObEu7F]: hasVariant(
                    $state,
                    "noLabel",
                    "noLabel"
                  )
                })}
                role={"img"}
              />

              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant($state, "isIndeterminate", "isIndeterminate")
                    ? SquareMinusSvgIcon
                    : hasVariant($state, "isChecked", "isChecked")
                    ? SquareCheckFilledSvgIcon
                    : Checkbox3SvgIcon
                }
                className={classNames(projectcss.all, sty.svg__lbOx, {
                  [sty.svg___focusVisibleWithin__lbOxDMbkp]:
                    triggers.focusVisibleWithin_root,
                  [sty.svgisChecked__lbOxQPnWo]: hasVariant(
                    $state,
                    "isChecked",
                    "isChecked"
                  ),
                  [sty.svgisDisabled__lbOxU7D1G]: hasVariant(
                    $state,
                    "isDisabled",
                    "isDisabled"
                  ),
                  [sty.svgisIndeterminate__lbOxEYhXl]: hasVariant(
                    $state,
                    "isIndeterminate",
                    "isIndeterminate"
                  ),
                  [sty.svgnoLabel__lbOxbEu7F]: hasVariant(
                    $state,
                    "noLabel",
                    "noLabel"
                  )
                })}
                role={"img"}
              />
            </div>
            {(hasVariant($state, "noLabel", "noLabel") ? false : true) ? (
              <div
                data-plasmic-name={"labelContainer"}
                data-plasmic-override={overrides.labelContainer}
                className={classNames(projectcss.all, sty.labelContainer, {
                  [sty.labelContainer___focusVisibleWithin]:
                    triggers.focusVisibleWithin_root,
                  [sty.labelContainerisChecked]: hasVariant(
                    $state,
                    "isChecked",
                    "isChecked"
                  ),
                  [sty.labelContainerisDisabled]: hasVariant(
                    $state,
                    "isDisabled",
                    "isDisabled"
                  ),
                  [sty.labelContainernoLabel]: hasVariant(
                    $state,
                    "noLabel",
                    "noLabel"
                  )
                })}
              >
                {renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lugG3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dGf8H
                        )}
                      >
                        {"Enter some text\n"}
                      </div>
                    </div>
                  ),
                  value: args.children,
                  className: classNames(sty.slotTargetChildren, {
                    [sty.slotTargetChildren___focusVisibleWithin]:
                      triggers.focusVisibleWithin_root,
                    [sty.slotTargetChildrenisChecked]: hasVariant(
                      $state,
                      "isChecked",
                      "isChecked"
                    ),
                    [sty.slotTargetChildrenisDisabled]: hasVariant(
                      $state,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.slotTargetChildrenisIndeterminate]: hasVariant(
                      $state,
                      "isIndeterminate",
                      "isIndeterminate"
                    ),
                    [sty.slotTargetChildrennoLabel]: hasVariant(
                      $state,
                      "noLabel",
                      "noLabel"
                    )
                  })
                })}
              </div>
            ) : null}
          </div>
        </div>
        {(() => {
          try {
            return $props.imageDisplay;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgisChecked]: hasVariant($state, "isChecked", "isChecked")
            })}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={(() => {
              try {
                return $props.imageValue;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            width={"320"}
          />
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.CheckboxProps>(
  props: P,
  ref: pp.CheckboxRef
) {
  if (!("children" in props)) {
    props = {
      ...props,
      children: (
        <div className={classNames(projectcss.all, sty.freeBox__lugG3)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dGf8H
            )}
          >
            {"Enter some text\n"}
          </div>
        </div>
      )
    };
  }

  return pp.useCheckbox<P, typeof PlasmicCheckbox>(
    PlasmicCheckbox,
    props,
    {
      isCheckedVariant: { group: "isChecked", variant: "isChecked" },
      isIndeterminateVariant: {
        group: "isIndeterminate",
        variant: "isIndeterminate"
      },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      noLabelVariant: { group: "noLabel", variant: "noLabel" },
      labelSlot: "children",
      root: "root"
    },
    ref
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "content",
    "mainCheck",
    "left",
    "icon",
    "labelContainer",
    "img"
  ],
  content: ["content", "mainCheck", "left", "icon", "labelContainer", "img"],
  mainCheck: ["mainCheck", "left", "icon", "labelContainer"],
  left: ["left", "icon", "labelContainer"],
  icon: ["icon"],
  labelContainer: ["labelContainer"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  content: "div";
  mainCheck: "div";
  left: "div";
  icon: "div";
  labelContainer: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckbox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckbox__VariantsArgs;
    args?: PlasmicCheckbox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCheckbox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCheckbox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCheckbox__ArgProps,
          internalVariantPropNames: PlasmicCheckbox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCheckbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckbox";
  } else {
    func.displayName = `PlasmicCheckbox.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckbox = Object.assign(
  // Top-level PlasmicCheckbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent("content"),
    mainCheck: makeNodeComponent("mainCheck"),
    left: makeNodeComponent("left"),
    icon: makeNodeComponent("icon"),
    labelContainer: makeNodeComponent("labelContainer"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicCheckbox
    internalVariantProps: PlasmicCheckbox__VariantProps,
    internalArgProps: PlasmicCheckbox__ArgProps,

    useBehavior
  }
);

export default PlasmicCheckbox;
/* prettier-ignore-end */
