/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: i2rVY7FDpNEigoftN9kimn
// Component: Td5dyVxmRcHy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Checkbox from "../../Checkbox"; // plasmic-import: ET2g_kpCvPkB/component
import Button from "../../Button"; // plasmic-import: JuHiQf6IaVRD/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: i2rVY7FDpNEigoftN9kimn/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: i2rVY7FDpNEigoftN9kimn/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: i2rVY7FDpNEigoftN9kimn/projectcss
import sty from "./PlasmicNewEndoComp.module.css"; // plasmic-import: Td5dyVxmRcHy/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: f8jJ2YtFCAo8/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: nn-aEUR12ATW/icon

createPlasmicElementProxy;

export type PlasmicNewEndoComp__VariantMembers = {};
export type PlasmicNewEndoComp__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewEndoComp__VariantsArgs;
export const PlasmicNewEndoComp__VariantProps = new Array<VariantPropType>();

export type PlasmicNewEndoComp__ArgsType = {
  getOptions?: any;
  currentItem?: any;
};
type ArgPropType = keyof PlasmicNewEndoComp__ArgsType;
export const PlasmicNewEndoComp__ArgProps = new Array<ArgPropType>(
  "getOptions",
  "currentItem"
);

export type PlasmicNewEndoComp__OverridesType = {
  newEndoComp?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  freeBox?: Flex__<"div">;
  addEnd?: Flex__<typeof Button>;
};

export interface DefaultNewEndoCompProps {
  getOptions?: any;
  currentItem?: any;
  className?: string;
}

const $$ = {};

const lesionsFolderImages = "lesions/";

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewEndoComp__RenderFunc(props: {
  variants: PlasmicNewEndoComp__VariantsArgs;
  args: PlasmicNewEndoComp__ArgsType;
  overrides: PlasmicNewEndoComp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.submission.some(
                item => item.id === $props.currentItem.id
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "addEnd.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "round"
      },
      {
        path: "submission",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "subSubmission",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "submissionEndometriome",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"newEndoComp"}
      data-plasmic-override={overrides.newEndoComp}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.newEndoComp
      )}
    >
      <Checkbox
        data-plasmic-name={"checkbox"}
        data-plasmic-override={overrides.checkbox}
        imageDisplay={
          hasVariant(globalVariants, "locale", "en")
            ? (() => {
                try {
                  return $props.currentItem.image_en !== null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $props.currentItem.image_fr !== null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
        }
        imageValue={
          hasVariant(globalVariants, "locale", "en")
            ? (() => {
                try {
                  return (
                    lesionsFolderImages +
                    $props.currentItem.image_en
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (
                    lesionsFolderImages +
                    $props.currentItem.image_fr
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
        }
        isChecked={
          generateStateValueProp($state, ["checkbox", "isChecked"]) ?? false
        }
        isDisabled={(() => {
          try {
            return $props.currentItem.has_options == true;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        isIndeterminate={(() => {
          try {
            return $props.currentItem.has_options == true;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "isIndeterminate";
            }
            throw e;
          }
        })()}
        onChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
              eventArgs[0]
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async isChecked => {
            const $steps = {};

            $steps["subOther"] = false
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return ($state.subSubmission =
                        $state.subSubmission.filter(
                          item => item.lesion_id !== $props.currentItem.id
                        ));
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["subOther"] != null &&
              typeof $steps["subOther"] === "object" &&
              typeof $steps["subOther"].then === "function"
            ) {
              $steps["subOther"] = await $steps["subOther"];
            }

            $steps["subEndo"] =
              $props.currentItem.id === "10" || $props.currentItem.id === "16"
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const existingIndex =
                            $state.submissionEndometriome.filter(
                              item => item.lesion_id === $props.currentItem.id
                            ).length;
                          if (existingIndex > 0) {
                            $state.submissionEndometriome =
                              $state.submissionEndometriome.filter(
                                item => item.lesion_id !== $props.currentItem.id
                              );
                          } else {
                            $state.submissionEndometriome.push({
                              lesion_id: $props.currentItem.id,
                              id: $queries.getOptions.data.find(
                                x => x.lesion_id === $props.currentItem.id
                              ).id
                            });
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["subEndo"] != null &&
              typeof $steps["subEndo"] === "object" &&
              typeof $steps["subEndo"].then === "function"
            ) {
              $steps["subEndo"] = await $steps["subEndo"];
            }

            $steps["lesion"] =
              $props.currentItem.has_options == false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const index = $state.submission.findIndex(
                            item => item.id === $props.currentItem.id
                          );
                          if (index === -1) {
                            $state.submission.push($props.currentItem);
                          } else {
                            $state.submission.splice(index, 1);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["lesion"] != null &&
              typeof $steps["lesion"] === "object" &&
              typeof $steps["lesion"].then === "function"
            ) {
              $steps["lesion"] = await $steps["lesion"];
            }
          }).apply(null, eventArgs);
        }}
        subContentDisplay={(() => {
          try {
            return (
              $state.submission.some(
                item => item.currentItem.id === $props.currentItem.id
              ) && $props.currentItem.name_fr === "Endométriome (>1cm)"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
        videoContent={
          hasVariant(globalVariants, "locale", "en")
            ? (() => {
                try {
                  return (
                    lesionsFolderImages +
                    $props.currentItem.video_en
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (
                    lesionsFolderImages +
                    $props.currentItem.video_fr
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
        }
        videoDisplay={
          hasVariant(globalVariants, "locale", "en")
            ? (() => {
                try {
                  return $props.currentItem.video_en !== null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $props.currentItem.video_fr !== null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
        }
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tdoSh,
              {
                [sty.textglobal_locale_en__tdoShGVtr]: hasVariant(
                  globalVariants,
                  "locale",
                  "en"
                )
              }
            )}
          >
            {hasVariant(globalVariants, "locale", "en") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.currentItem.name_en;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Absence d'endom\u00e9triose superficielle visible";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.currentItem.name_fr;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Absence d'endom\u00e9triose superficielle visible";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
          {(() => {
            try {
              return (
                ($props.currentItem.id === "10" &&
                  $state.submissionEndometriome.filter(
                    x => x.lesion_id === $props.currentItem.id
                  ).length == 0) ||
                ($props.currentItem.id === "16" &&
                  $state.submissionEndometriome.filter(
                    x => x.lesion_id === $props.currentItem.id
                  ).length == 0)
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Button
              data-plasmic-name={"addEnd"}
              data-plasmic-override={overrides.addEnd}
              className={classNames("__wab_instance", sty.addEnd)}
              onClick={async event => {
                const $steps = {};

                $steps["updateStateVariable2"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: {
                          lesion_id: $props.currentItem.id,
                          id: $props.getOptions.data.find(
                            x => x.lesion_id === $props.currentItem.id
                          ).id,
                          state_id: $props.currentItem.id + 0
                        },
                        variable: {
                          objRoot: $state,
                          variablePath: ["submissionEndometriome"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateVariable2"] != null &&
                  typeof $steps["updateStateVariable2"] === "object" &&
                  typeof $steps["updateStateVariable2"].then === "function"
                ) {
                  $steps["updateStateVariable2"] = await $steps[
                    "updateStateVariable2"
                  ];
                }

                $steps["updateSubmission"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        value: $props.currentItem,
                        variable: {
                          objRoot: $state,
                          variablePath: ["submission"]
                        }
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSubmission"] != null &&
                  typeof $steps["updateSubmission"] === "object" &&
                  typeof $steps["updateSubmission"].then === "function"
                ) {
                  $steps["updateSubmission"] = await $steps["updateSubmission"];
                }
              }}
              onShapeChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["addEnd", "shape"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              shape={generateStateValueProp($state, ["addEnd", "shape"])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y3H4N
                )}
              >
                {"Button"}
              </div>
            </Button>
          ) : null}
        </div>
      </Checkbox>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  newEndoComp: ["newEndoComp", "checkbox", "freeBox", "addEnd"],
  checkbox: ["checkbox", "freeBox", "addEnd"],
  freeBox: ["freeBox", "addEnd"],
  addEnd: ["addEnd"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  newEndoComp: "div";
  checkbox: typeof Checkbox;
  freeBox: "div";
  addEnd: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewEndoComp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewEndoComp__VariantsArgs;
    args?: PlasmicNewEndoComp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewEndoComp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewEndoComp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewEndoComp__ArgProps,
          internalVariantPropNames: PlasmicNewEndoComp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewEndoComp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "newEndoComp") {
    func.displayName = "PlasmicNewEndoComp";
  } else {
    func.displayName = `PlasmicNewEndoComp.${nodeName}`;
  }
  return func;
}

export const PlasmicNewEndoComp = Object.assign(
  // Top-level PlasmicNewEndoComp renders the root element
  makeNodeComponent("newEndoComp"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    freeBox: makeNodeComponent("freeBox"),
    addEnd: makeNodeComponent("addEnd"),

    // Metadata about props expected for PlasmicNewEndoComp
    internalVariantProps: PlasmicNewEndoComp__VariantProps,
    internalArgProps: PlasmicNewEndoComp__ArgProps
  }
);

export default PlasmicNewEndoComp;
/* prettier-ignore-end */
