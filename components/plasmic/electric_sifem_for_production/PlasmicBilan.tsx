/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jdGpMnKMqZhB3E56S7s31E
// Component: Bo8FFqKa5GNo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Modal from "../../Modal"; // plasmic-import: KnD_ioEvAONZ/component
import Button2 from "../../Button2"; // plasmic-import: QTQ3W516bpwq/component
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import { FileList } from "@plasmic-library/jean/FileList/FileList"; // plasmic-import: 4IJsrSUfDN_L/codeComponent
import { ExportToPDF } from "@plasmic-library/jean/ExportToPDF/ExportToPDF"; // plasmic-import: dtuZ9UjE4cWg/codeComponent
import Navbar from "../../Navbar"; // plasmic-import: BwloLoutGE6h/component
import Button from "../../Button"; // plasmic-import: EQB74Mlk8maB/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import SifemTitleWrapper from "../../SifemTitleWrapper"; // plasmic-import: TX6NTKsKzQ-j/component
import Checkbox from "../../Checkbox"; // plasmic-import: Jm6Gnqw3Xb6Y/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import BtmNavbarTile from "../../BtmNavbarTile"; // plasmic-import: 3eu65Jx8on-O/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { LocaleValue, useLocale } from "./PlasmicGlobalVariant__Locale"; // plasmic-import: e5em0iO6JQ-Q/globalVariant
import { useScreenVariants as useScreenVariants_11F6HgzasBpu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 11F6hgzasBpu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jdGpMnKMqZhB3E56S7s31E/projectcss
import sty from "./PlasmicBilan.module.css"; // plasmic-import: Bo8FFqKa5GNo/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 36FConMGWAOi/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: PCJ8zxKwfSeA/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: kIzBP5ddCB9d/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vEwGzpqOOiJG/icon
import PlayIcon from "./icons/PlasmicIcon__Play"; // plasmic-import: dayeVm6A3kHQ/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: pcPCQDPSgwMK/icon
import Ellipse15Icon from "./icons/PlasmicIcon__Ellipse15"; // plasmic-import: txwg6eHs0Ma5/icon
import Vector7SvgIcon from "./icons/PlasmicIcon__Vector7Svg"; // plasmic-import: 9CHWX4y0zC23/icon
import FilePngIcon from "./icons/PlasmicIcon__FilePng"; // plasmic-import: y1XPg0dY5XVh/icon
import Vector5SvgIcon from "./icons/PlasmicIcon__Vector5Svg"; // plasmic-import: 4i75PzLcifd2/icon
import Vector6SvgIcon from "./icons/PlasmicIcon__Vector6Svg"; // plasmic-import: Wdey4Oj0xtyF/icon

createPlasmicElementProxy;

export type PlasmicBilan__VariantMembers = {};
export type PlasmicBilan__VariantsArgs = {};
type VariantPropType = keyof PlasmicBilan__VariantsArgs;
export const PlasmicBilan__VariantProps = new Array<VariantPropType>();

export type PlasmicBilan__ArgsType = {
  isChecked2?: boolean;
  text2?: React.ReactNode;
  text5?: React.ReactNode;
};
type ArgPropType = keyof PlasmicBilan__ArgsType;
export const PlasmicBilan__ArgProps = new Array<ArgPropType>(
  "isChecked2",
  "text2",
  "text5"
);

export type PlasmicBilan__OverridesType = {
  root?: Flex__<"div">;
  videoModal?: Flex__<typeof Modal>;
  htmlVideo?: Flex__<typeof Video>;
  imagePovAbdomen?: Flex__<typeof FileList>;
  expPdf?: Flex__<typeof ExportToPDF>;
  imagePovFaceDroite?: Flex__<typeof FileList>;
  imagePovFaceGauche?: Flex__<typeof FileList>;
  imagePovProfil?: Flex__<typeof FileList>;
  main?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  button?: Flex__<typeof Button>;
  container?: Flex__<"div">;
  tabs?: Flex__<"div">;
  button2?: Flex__<typeof Button>;
  button4?: Flex__<typeof Button>;
  button6?: Flex__<typeof Button>;
  button7?: Flex__<typeof Button>;
  button8?: Flex__<typeof Button>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  sifemTitleWrapper?: Flex__<typeof SifemTitleWrapper>;
  questions?: Flex__<"div">;
  back?: Flex__<"div">;
  schema?: Flex__<"div">;
  ac?: Flex__<"a"> & Partial<LinkProps>;
  alG?: Flex__<"a"> & Partial<LinkProps>;
  alD?: Flex__<"a"> & Partial<LinkProps>;
  mlD?: Flex__<"a"> & Partial<LinkProps>;
  mlG?: Flex__<"a"> & Partial<LinkProps>;
  mc?: Flex__<"a"> & Partial<LinkProps>;
  plG?: Flex__<"a"> & Partial<LinkProps>;
  pc2?: Flex__<"a"> & Partial<LinkProps>;
  plD?: Flex__<"a"> & Partial<LinkProps>;
  ep?: Flex__<"a"> & Partial<LinkProps>;
  adI?: Flex__<"a"> & Partial<LinkProps>;
  pathologieAssociee?: Flex__<typeof Checkbox>;
  check?: Flex__<"div">;
  video?: Flex__<"div">;
  text4?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  addEnd?: Flex__<typeof Button>;
  subCheckbox?: Flex__<typeof Checkbox>;
  detailsEndometriome?: Flex__<"div">;
  endometriomeWrapper?: Flex__<"div">;
  fr?: Flex__<"div">;
  en?: Flex__<"div">;
  select2?: Flex__<typeof AntdSelect>;
  button11?: Flex__<typeof Button>;
  nextBack?: Flex__<"div">;
  next?: Flex__<"svg">;
  back2?: Flex__<"svg">;
  map?: Flex__<"div">;
  profil?: Flex__<"div">;
  traumaLesion?: Flex__<typeof PlasmicImg__>;
  traumaOptions?: Flex__<typeof PlasmicImg__>;
  face?: Flex__<"div">;
  traumaLesionDroit?: Flex__<typeof PlasmicImg__>;
  traumaLesionCentre?: Flex__<typeof PlasmicImg__>;
  traumaLesionGauche?: Flex__<typeof PlasmicImg__>;
  traumaOptionsDroite?: Flex__<typeof PlasmicImg__>;
  traumaOptionsGauche?: Flex__<typeof PlasmicImg__>;
  abdo2?: Flex__<"div">;
  traumaLesion2?: Flex__<typeof PlasmicImg__>;
  traumaOptions2?: Flex__<typeof PlasmicImg__>;
  abdo?: Flex__<"div">;
  traumaLesion3?: Flex__<typeof PlasmicImg__>;
  traumaOptions3?: Flex__<typeof PlasmicImg__>;
  score?: Flex__<"div">;
  title3?: Flex__<"div">;
  intro?: Flex__<"div">;
  category2?: Flex__<"div">;
  superficielle?: Flex__<"div">;
  superficielle3?: Flex__<"div">;
  annexDroite?: Flex__<"div">;
  endometriome2?: Flex__<"div">;
  badge2?: Flex__<"div">;
  text7?: Flex__<"div">;
  longueur2?: Flex__<"div">;
  annexDroite2?: Flex__<"div">;
  endometriome3?: Flex__<"div">;
  badge3?: Flex__<"div">;
  text8?: Flex__<"div">;
  longueur3?: Flex__<"div">;
  res?: Flex__<"div">;
  resultat?: Flex__<"div">;
  titleResult?: Flex__<"div">;
  result?: Flex__<"div">;
  content?: Flex__<"div">;
  password17?: Flex__<"div">;
  scoreContent?: Flex__<"div">;
  progressBar?: Flex__<"div">;
  bar?: Flex__<"div">;
  frame1437254354?: Flex__<"div">;
  frame1437254355?: Flex__<"div">;
  frame1437254356?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  depi?: Flex__<"div">;
  password18?: Flex__<"div">;
  categoryV2?: Flex__<"div">;
  left2?: Flex__<"div">;
  left?: Flex__<"div">;
  buttons?: Flex__<"div">;
  frame1437254358?: Flex__<"div">;
  button3?: Flex__<typeof Button>;
  button5?: Flex__<typeof Button>;
  ress2?: Flex__<"div">;
  password19?: Flex__<"div">;
  ress?: Flex__<"div">;
  table2?: Flex__<typeof RichTable>;
  category?: Flex__<"div">;
  title2?: Flex__<"div">;
  title?: Flex__<"div">;
  fleches?: Flex__<"div">;
  content2?: Flex__<"div">;
  checkbox2?: Flex__<typeof Checkbox>;
  endometriome?: Flex__<"div">;
  badge?: Flex__<"div">;
  text?: Flex__<"div">;
  longueur?: Flex__<"div">;
  subCheckbox2?: Flex__<typeof Checkbox>;
  categoryMobile?: Flex__<"div">;
  superficielle2?: Flex__<"div">;
  annexDroite3?: Flex__<"div">;
  endometriome4?: Flex__<"div">;
  badge4?: Flex__<"div">;
  text9?: Flex__<"div">;
  longueur4?: Flex__<"div">;
  annexDroite4?: Flex__<"div">;
  endometriome5?: Flex__<"div">;
  badge5?: Flex__<"div">;
  text10?: Flex__<"div">;
  longueur5?: Flex__<"div">;
  superficielle4?: Flex__<"div">;
  navBar?: Flex__<"div">;
  btmNavbarTile?: Flex__<typeof BtmNavbarTile>;
  phGridFourFill19?: Flex__<"div">;
  rectangle74?: Flex__<"div">;
  rectangle75?: Flex__<"div">;
  rectangle76?: Flex__<"div">;
  phGridFourFill20?: Flex__<"div">;
  rectangle77?: Flex__<"div">;
  rectangle78?: Flex__<"div">;
  rectangle79?: Flex__<"div">;
  phGridFourFill21?: Flex__<"div">;
  rectangle80?: Flex__<"div">;
  rectangle81?: Flex__<"div">;
  rectangle82?: Flex__<"div">;
  btmNavbarTile7?: Flex__<typeof BtmNavbarTile>;
  phGridFourFill37?: Flex__<"div">;
  rectangle128?: Flex__<"div">;
  rectangle129?: Flex__<"div">;
  rectangle130?: Flex__<"div">;
  phGridFourFill38?: Flex__<"div">;
  rectangle131?: Flex__<"div">;
  rectangle132?: Flex__<"div">;
  rectangle133?: Flex__<"div">;
  phGridFourFill39?: Flex__<"div">;
  rectangle134?: Flex__<"div">;
  rectangle135?: Flex__<"div">;
  rectangle136?: Flex__<"div">;
  btmNavbarTile6?: Flex__<typeof BtmNavbarTile>;
  phGridFourFill34?: Flex__<"div">;
  rectangle119?: Flex__<"div">;
  rectangle120?: Flex__<"div">;
  rectangle121?: Flex__<"div">;
  phGridFourFill35?: Flex__<"div">;
  rectangle122?: Flex__<"div">;
  rectangle123?: Flex__<"div">;
  rectangle124?: Flex__<"div">;
  phGridFourFill36?: Flex__<"div">;
  rectangle125?: Flex__<"div">;
  rectangle126?: Flex__<"div">;
  rectangle127?: Flex__<"div">;
  btmNavbarTile5?: Flex__<typeof BtmNavbarTile>;
  phGridFourFill31?: Flex__<"div">;
  rectangle110?: Flex__<"div">;
  rectangle111?: Flex__<"div">;
  rectangle112?: Flex__<"div">;
  phGridFourFill32?: Flex__<"div">;
  rectangle113?: Flex__<"div">;
  rectangle114?: Flex__<"div">;
  rectangle115?: Flex__<"div">;
  phGridFourFill33?: Flex__<"div">;
  rectangle116?: Flex__<"div">;
  rectangle117?: Flex__<"div">;
  rectangle118?: Flex__<"div">;
  btmNavbarTile4?: Flex__<typeof BtmNavbarTile>;
  phGridFourFill28?: Flex__<"div">;
  rectangle101?: Flex__<"div">;
  rectangle102?: Flex__<"div">;
  rectangle103?: Flex__<"div">;
  phGridFourFill29?: Flex__<"div">;
  rectangle104?: Flex__<"div">;
  rectangle105?: Flex__<"div">;
  rectangle106?: Flex__<"div">;
  phGridFourFill30?: Flex__<"div">;
  rectangle107?: Flex__<"div">;
  rectangle108?: Flex__<"div">;
  rectangle109?: Flex__<"div">;
  btmNavbarTile3?: Flex__<typeof BtmNavbarTile>;
  phGridFourFill25?: Flex__<"div">;
  rectangle92?: Flex__<"div">;
  rectangle93?: Flex__<"div">;
  rectangle94?: Flex__<"div">;
  phGridFourFill26?: Flex__<"div">;
  rectangle95?: Flex__<"div">;
  rectangle96?: Flex__<"div">;
  rectangle97?: Flex__<"div">;
  phGridFourFill27?: Flex__<"div">;
  rectangle98?: Flex__<"div">;
  rectangle99?: Flex__<"div">;
  rectangle100?: Flex__<"div">;
  btmNavbarTile2?: Flex__<typeof BtmNavbarTile>;
};

export interface DefaultBilanProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBilan__RenderFunc(props: {
  variants: PlasmicBilan__VariantsArgs;
  args: PlasmicBilan__ArgsType;
  overrides: PlasmicBilan__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "round"
      },
      {
        path: "navbar.show",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "step",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Superficielle"
      },
      {
        path: "submission",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "subCheckbox[][].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subSubmission",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button11[][].shape",
        type: "private",
        variableType: "text"
      },
      {
        path: "submissionEndometriome",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "select2[][].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "button3.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox2[][].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "cat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const removeDup = [
                  ...new Map(
                    $state.submission.map(item => [item["category_fr"], item])
                  ).values()
                ];
                removeDup.forEach(item => (item.visible = true));
                return removeDup.map(item => ({
                  category_fr: item.category_fr,
                  category_en: item.category_en,
                  visible: item.visible
                }));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "subCheckbox2[][][].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "videoModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.videoOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "videoOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "videoContent",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "score2",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                // 1 point par compartiment contenant une lésion sélectionnée (10 points max)
                $state.cat.filter(
                  x =>
                    x.category_fr !== "Pathologies associées" &&
                    x.category_fr !== "Superficielle" &&
                    x.category_fr !== "Annexielle > côté gauche" &&
                    x.category_fr !== "Annexielle > côté droit"
                ).length +
                // 1 point si la lésion vagin est sélectionnée
                ($state.submission.some(item => item.id === "60") ? 1 : 0) +
                // 1pt pour l’uretère (dans le compartiment Médiolatéral droit)
                ($state.submission.some(item => item.id === "28")
                  ? 1
                  : $state.subSubmission.some(item => item.id === "17")
                  ? 1
                  : 0) +
                // 1pt pour l’uretère (dans le compartiment Médiolatéral gauche)
                ($state.submission.some(item => item.id === "31")
                  ? 1
                  : $state.subSubmission.some(item => item.id === "18")
                  ? 1
                  : 0) +
                // 1pt pour PAROI PELVIENNE ML (+/- OBTURATEUR) du compartiment Médiolatéral droit
                ($state.submission.some(item => item.id === "29") ? 1 : 0) +
                // 1pt pour PAROI PELVIENNE ML (+/- OBTURATEUR) du compartiment Médiolatéral gauche
                ($state.submission.some(item => item.id === "32") ? 1 : 0) +
                // 1pt pour PAROI PELVIENNE PL (S3, S4) et/ou PAROI PELVIENNE PL (+/- NERF SCIATIQUE) du compartiment Postérolatéral droit
                ($state.submission.some(
                  item => item.id === "35" || item.id === "36"
                )
                  ? 1
                  : 0) +
                // 1pt pour PAROI PELVIENNE PL (S3, S4) et/ou PAROI PELVIENNE PL (+/- NERF SCIATIQUE) du compartiment Postérolatéral gauche
                ($state.submission.some(
                  item => item.id === "39" || item.id === "40"
                )
                  ? 1
                  : 0) +
                // Option Base
                ($state.subSubmission.some(item => item.id === "14") ? 1 : 0)
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "stepLabelsEn",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { name: "Superficielle", name_en: "Superficial" },
          { name: "Annexielle", name_en: "Annexial" },
          { name: "Profonde", name_en: "Deep" },
          { name: "Profonde", name_en: "Deep" },
          { name: "Map", name_en: "Map" },
          { name: "Score", name_en: "Score" }
        ]
      },
      {
        path: "print",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "printType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "pdf"
      },
      {
        path: "button5.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button7.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.shape",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "subCheckbox3",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            lesion: "MYOM\u00c8TRE EXTERNE",
            options: [
              { item_fr: "Ant\u00e9rieur", item_en: "Anterior" },
              { item_fr: "Post\u00e9rieur", item_en: "Posterior" }
            ]
          },
          {
            lesion: "TORUS/LUS PROXIMAUX",
            options: [
              { item_fr: "Droit", item_en: "Right" },
              { item_fr: "Torus", item_en: "Torus" },
              { item_fr: "Gauche", item_en: "Left" }
            ]
          },
          {
            lesion: "RECTUM/CHARNI\u00c8RE RECTOSIGMO\u00cfDIENNE",
            options: [
              { item_fr: "Bas rectum", item_en: "Lower rectum" },
              { item_fr: "Moyen rectum", item_en: "Mid rectum" },
              { item_fr: "Haut rectum", item_en: "Upper rectum" },
              {
                item_fr: "Charni\u00e8re rectosigmo\u00efdienne",
                item_en: "Rectosigmoid junction"
              }
            ]
          },
          {
            lesion: "LIGAMENT ROND PROXIMAL",
            options: [
              { item_fr: "Droit", item_en: "Right" },
              { item_fr: "Gauche", item_en: "Left" }
            ]
          },
          {
            lesion: "VESSIE",
            options: [
              { item_fr: "D\u00f4me", item_en: "Dome" },
              {
                item_fr: "Cul de sac vesico ut\u00e9rin",
                item_en: "Vesico-uterine pouch"
              },
              { item_fr: "Base", item_en: "Basis" }
            ]
          },
          {
            lesion: "PAROI ABDOMINALE / R\u00c9GION INGUINALE",
            options: [
              { item_fr: "Droit", item_en: "Right" },
              { item_fr: "Gauche", item_en: "Left" }
            ]
          },
          {
            lesion: "UR\u00c8T\u00c8RE LOMBAIRE",
            options: [
              { item_fr: "Droit", item_en: "Right" },
              { item_fr: "Gauche", item_en: "Left" }
            ]
          },
          {
            lesion: "NERF PUDENDAL",
            options: [
              { item_fr: "Droit", item_en: "Right" },
              { item_fr: "Gauche", item_en: "Left" }
            ]
          },
          {
            lesion:
              "C\u00c6CUM \u2013 IL\u00c9ON \u2013 APPENDICE \u2013SIGMO\u00cfDE",
            options: [
              { item_fr: "C\u00e6cum", item_en: "Caecum" },
              { item_fr: "Il\u00e9on", item_en: "Ileum" },
              { item_fr: "Appendice", item_en: "Appendix" },
              { item_fr: "Sigmo\u00efde", item_en: "Sigmoid colon" }
            ]
          },
          {
            lesion: "DIAPHRAGME",
            options: [
              { item_fr: "Droit", item_en: "Right" },
              { item_fr: "Gauche", item_en: "Left" }
            ]
          }
        ]
      },
      {
        path: "pathologieAssociee[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "filesAbdo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "filesFaceDroite",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "filesProfil",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "filesFaceGauche",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "addEnd[].shape",
        type: "private",
        variableType: "text"
      },
      {
        path: "ressources",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "Afena",
            website: "https://www.afena.fr/",
            region: "NOUVELLE AQUITAINE"
          },
          {
            name: "Endora",
            website: "https://www.endaura.fr/",
            region: "AUVERGNE RHONE ALPES"
          },
          {
            name: "Endo BFC",
            website: "https://endo-bfc.fr/",
            region: "BOURGOGNE FRANCHE COMTE"
          },
          {
            name: "ENDO centre ouest IDF",
            website: "https://www.endo-idf.fr/",
            region: "ILE DE FRANCE"
          },
          {
            name: "ENDObreizh",
            website: "https://www.endobreizh.com/",
            region: "BRETAGNE"
          },
          {
            name: "EndOccitanie",
            website: "https://www.endoccitanie.fr/",
            region: "OCCITANIE"
          },
          {
            name: "EndoCentre",
            website: "https://www.endocentrevdl.fr/",
            region: "CENTRE VAL DE LOIRE"
          },
          {
            name: "EndoSud",
            website: "https://endosudpaca.fr/",
            region: "PACA"
          },
          {
            name: "EndoSud IDF",
            website: "https://www.endo-idf.fr/",
            region: "ILE DE FRANCE"
          },
          {
            name: "FEnM Martinique",
            website: "https://fenm.org/nos-missions",
            region: "OUTRE MER"
          },
          {
            name: "Fili\u00e8re endom\u00e9triose nord est",
            website: "https://www.endo-idf.fr/",
            region: "ILE DE FRANCE"
          },
          {
            name: "Voyelle",
            website: "https://www.endo-idf.fr/",
            region: "ILE DE FRANCE"
          },
          {
            name: "Norm\u2019Endo",
            website: "https://endometriose-normandie.fr/ ",
            region: "NORMANDIE"
          }
        ]
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getLesions: usePlasmicDataOp(() => {
      return {
        sourceId: "nFzKFTcjnGoE1XGAaWz5EP",
        opId: "5fae0ea3-f838-4045-9fde-97d5098d3a43",
        userArgs: {},
        cacheKey: `plasmic.$.5fae0ea3-f838-4045-9fde-97d5098d3a43.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getOptions: usePlasmicDataOp(() => {
      return {
        sourceId: "nFzKFTcjnGoE1XGAaWz5EP",
        opId: "112e3570-86ee-47b6-810b-1a4f1bf49a9a",
        userArgs: {},
        cacheKey: `plasmic.$.112e3570-86ee-47b6-810b-1a4f1bf49a9a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    locale: useLocale(),
    screen: useScreenVariants_11F6HgzasBpu()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBilan.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBilan.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBilan.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_locale_en]: hasVariant(
                globalVariants,
                "locale",
                "en"
              )
            }
          )}
        >
          <Modal
            data-plasmic-name={"videoModal"}
            data-plasmic-override={overrides.videoModal}
            className={classNames("__wab_instance", sty.videoModal, {
              [sty.videoModalglobal_locale_en]: hasVariant(
                globalVariants,
                "locale",
                "en"
              )
            })}
            content={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sGcVy)}
              >
                <Video
                  data-plasmic-name={"htmlVideo"}
                  data-plasmic-override={overrides.htmlVideo}
                  autoPlay={true}
                  className={classNames("__wab_instance", sty.htmlVideo)}
                  controls={true}
                  src={(() => {
                    try {
                      return $state.videoContent;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </Stack__>
            }
            footer={null}
            heading={null}
            isOpen={generateStateValueProp($state, ["videoModal", "isOpen"])}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["videoModal", "isOpen"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["updateVideoOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["videoOpen"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateVideoOpen"] != null &&
                  typeof $steps["updateVideoOpen"] === "object" &&
                  typeof $steps["updateVideoOpen"].then === "function"
                ) {
                  $steps["updateVideoOpen"] = await $steps["updateVideoOpen"];
                }
              }).apply(null, eventArgs);
            }}
            showFooter={false}
            showHeader={false}
            trigger={<Button2 label={"Open Modal"} />}
          />

          <FileList
            data-plasmic-name={"imagePovAbdomen"}
            data-plasmic-override={overrides.imagePovAbdomen}
            bucketPath={"image_map/image_POV_abdomen/"}
            className={classNames("__wab_instance", sty.imagePovAbdomen)}
            onList={async files => {
              const $steps = {};

              $steps["updateFiles"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["filesAbdo"]
                      },
                      operation: 0,
                      value: files
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFiles"] != null &&
                typeof $steps["updateFiles"] === "object" &&
                typeof $steps["updateFiles"].then === "function"
              ) {
                $steps["updateFiles"] = await $steps["updateFiles"];
              }
            }}
            ref={ref => {
              $refs["imagePovAbdomen"] = ref;
            }}
          />

          <ExportToPDF
            data-plasmic-name={"expPdf"}
            data-plasmic-override={overrides.expPdf}
            autoResize={false}
            className={classNames("__wab_instance", sty.expPdf, {
              [sty.expPdfglobal_locale_en]: hasVariant(
                globalVariants,
                "locale",
                "en"
              )
            })}
            elementIds={
              hasVariant(globalVariants, "locale", "en") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return ["title", "map", "cat2", "res", "ress"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "locale", "en")
                ? (() => {
                    try {
                      return ["title", "map", "cat2", "res", "ress"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return ["title", "map", "cat2", "res", "ress"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return ["title", "map", "cat2", "res", "ress"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
            }
            fileName={`dpei_${new Date()
              .toLocaleString("fr-FR", { timeZone: "Europe/Paris" })
              .replace(/[/]/g, "_")}`}
            format={(() => {
              try {
                return $state.printType;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "pdf";
                }
                throw e;
              }
            })()}
            orientation={"portrait"}
            ref={ref => {
              $refs["expPdf"] = ref;
            }}
          />

          <FileList
            data-plasmic-name={"imagePovFaceDroite"}
            data-plasmic-override={overrides.imagePovFaceDroite}
            bucketPath={"image_map/image_POV_face-droite/"}
            className={classNames("__wab_instance", sty.imagePovFaceDroite)}
            onList={async files => {
              const $steps = {};

              $steps["updateFiles"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["filesFaceDroite"]
                      },
                      operation: 0,
                      value: files
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFiles"] != null &&
                typeof $steps["updateFiles"] === "object" &&
                typeof $steps["updateFiles"].then === "function"
              ) {
                $steps["updateFiles"] = await $steps["updateFiles"];
              }
            }}
            ref={ref => {
              $refs["imagePovFaceDroite"] = ref;
            }}
          />

          <FileList
            data-plasmic-name={"imagePovFaceGauche"}
            data-plasmic-override={overrides.imagePovFaceGauche}
            bucketPath={"image_map/image_POV_face_gauche/"}
            className={classNames("__wab_instance", sty.imagePovFaceGauche)}
            onList={async files => {
              const $steps = {};

              $steps["updateFiles"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["filesFaceGauche"]
                      },
                      operation: 0,
                      value: files
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFiles"] != null &&
                typeof $steps["updateFiles"] === "object" &&
                typeof $steps["updateFiles"].then === "function"
              ) {
                $steps["updateFiles"] = await $steps["updateFiles"];
              }
            }}
            ref={ref => {
              $refs["imagePovFaceGauche"] = ref;
            }}
          />

          <FileList
            data-plasmic-name={"imagePovProfil"}
            data-plasmic-override={overrides.imagePovProfil}
            bucketPath={"image_map/image_POV_profil/"}
            className={classNames("__wab_instance", sty.imagePovProfil)}
            onList={async files => {
              const $steps = {};

              $steps["updateFiles"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["filesProfil"]
                      },
                      operation: 0,
                      value: files
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFiles"] != null &&
                typeof $steps["updateFiles"] === "object" &&
                typeof $steps["updateFiles"].then === "function"
              ) {
                $steps["updateFiles"] = await $steps["updateFiles"];
              }
            }}
            ref={ref => {
              $refs["imagePovProfil"] = ref;
            }}
          />

          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main)}
            id={"main"}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              button2={
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToBilan"] =
                      !$ctx.pagePath === "/bilan"
                        ? (() => {
                            const actionArgs = { destination: `/bilan` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToBilan"] != null &&
                      typeof $steps["goToBilan"] === "object" &&
                      typeof $steps["goToBilan"].then === "function"
                    ) {
                      $steps["goToBilan"] = await $steps["goToBilan"];
                    }

                    $steps["updateStep"] =
                      $ctx.pagePath === "/bilan"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["step"]
                              },
                              operation: 0,
                              value: "Superficielle"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateStep"] != null &&
                      typeof $steps["updateStep"] === "object" &&
                      typeof $steps["updateStep"].then === "function"
                    ) {
                      $steps["updateStep"] = await $steps["updateStep"];
                    }

                    $steps["updateSubmission"] =
                      $ctx.pagePath === "/bilan"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["submission"]
                              },
                              operation: 0,
                              value: []
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateSubmission"] != null &&
                      typeof $steps["updateSubmission"] === "object" &&
                      typeof $steps["updateSubmission"].then === "function"
                    ) {
                      $steps["updateSubmission"] = await $steps[
                        "updateSubmission"
                      ];
                    }

                    $steps["updateSubSubmission"] =
                      $ctx.pagePath === "/bilan"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["subSubmission"]
                              },
                              operation: 0,
                              value: []
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateSubSubmission"] != null &&
                      typeof $steps["updateSubSubmission"] === "object" &&
                      typeof $steps["updateSubSubmission"].then === "function"
                    ) {
                      $steps["updateSubSubmission"] = await $steps[
                        "updateSubSubmission"
                      ];
                    }

                    $steps["updateSubmissionEndometriome"] =
                      $ctx.pagePath === "/bilan"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["submissionEndometriome"]
                              },
                              operation: 0,
                              value: []
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateSubmissionEndometriome"] != null &&
                      typeof $steps["updateSubmissionEndometriome"] ===
                        "object" &&
                      typeof $steps["updateSubmissionEndometriome"].then ===
                        "function"
                    ) {
                      $steps["updateSubmissionEndometriome"] = await $steps[
                        "updateSubmissionEndometriome"
                      ];
                    }

                    $steps["updateSubCheckbox3"] =
                      $ctx.pagePath === "/bilan"
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["subCheckbox3"]
                              },
                              operation: 0,
                              value: []
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateSubCheckbox3"] != null &&
                      typeof $steps["updateSubCheckbox3"] === "object" &&
                      typeof $steps["updateSubCheckbox3"].then === "function"
                    ) {
                      $steps["updateSubCheckbox3"] = await $steps[
                        "updateSubCheckbox3"
                      ];
                    }
                  }}
                  onShapeChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "shape"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={generateStateValueProp($state, ["button", "shape"])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cBr3O
                    )}
                  >
                    {"Button"}
                  </div>
                </Button>
              }
              className={classNames("__wab_instance", sty.navbar, {
                [sty.navbarglobal_locale_en]: hasVariant(
                  globalVariants,
                  "locale",
                  "en"
                )
              })}
              onShowChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["navbar", "show"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              show={generateStateValueProp($state, ["navbar", "show"])}
            />

            <div
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              className={classNames(projectcss.all, sty.container)}
            >
              <div
                data-plasmic-name={"tabs"}
                data-plasmic-override={overrides.tabs}
                className={classNames(
                  projectcss.all,
                  sty.tabs,
                  "no-scroll-bar"
                )}
              >
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2, {
                    [sty.button2global_locale_en]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  })}
                  color={(() => {
                    try {
                      return $state.step.includes("Superficielle")
                        ? "tabCurrent"
                        : "tab";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "tab";
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStep"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["step"]
                            },
                            operation: 0,
                            value: "Superficielle"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStep"] != null &&
                      typeof $steps["updateStep"] === "object" &&
                      typeof $steps["updateStep"].then === "function"
                    ) {
                      $steps["updateStep"] = await $steps["updateStep"];
                    }
                  }}
                  onShapeChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "shape"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={generateStateValueProp($state, ["button2", "shape"])}
                >
                  {hasVariant(globalVariants, "locale", "en")
                    ? "Superficial"
                    : "Superficielle"}
                </Button>
                <Button
                  data-plasmic-name={"button4"}
                  data-plasmic-override={overrides.button4}
                  className={classNames("__wab_instance", sty.button4, {
                    [sty.button4global_locale_en]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  })}
                  color={(() => {
                    try {
                      return $state.step.includes("Annexielle")
                        ? "tabCurrent"
                        : "tab";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "tab";
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStep"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["step"]
                            },
                            operation: 0,
                            value: "Annexielle > côté droit"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStep"] != null &&
                      typeof $steps["updateStep"] === "object" &&
                      typeof $steps["updateStep"].then === "function"
                    ) {
                      $steps["updateStep"] = await $steps["updateStep"];
                    }
                  }}
                  onShapeChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button4", "shape"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={generateStateValueProp($state, ["button4", "shape"])}
                >
                  {hasVariant(globalVariants, "locale", "en")
                    ? "Adnexal"
                    : "Annexielle"}
                </Button>
                <Button
                  data-plasmic-name={"button6"}
                  data-plasmic-override={overrides.button6}
                  className={classNames("__wab_instance", sty.button6, {
                    [sty.button6global_locale_en]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  })}
                  color={(() => {
                    try {
                      return $state.step.includes("Profonde") ||
                        $queries.getLesions.data.filter(
                          l => l.category_fr === $state.step
                        )[0].macro_category_fr === "Profonde"
                        ? "tabCurrent"
                        : "tab";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "tab";
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStep"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["step"]
                            },
                            operation: 0,
                            value: "Profonde"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStep"] != null &&
                      typeof $steps["updateStep"] === "object" &&
                      typeof $steps["updateStep"].then === "function"
                    ) {
                      $steps["updateStep"] = await $steps["updateStep"];
                    }
                  }}
                  onShapeChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button6", "shape"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={generateStateValueProp($state, ["button6", "shape"])}
                >
                  {hasVariant(globalVariants, "locale", "en")
                    ? "Deep"
                    : "Profonde"}
                </Button>
                <Button
                  data-plasmic-name={"button7"}
                  data-plasmic-override={overrides.button7}
                  className={classNames("__wab_instance", sty.button7)}
                  color={(() => {
                    try {
                      return $state.step.includes("Map") ? "tabCurrent" : "tab";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "tab";
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStep"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["step"]
                            },
                            operation: 0,
                            value: "Map"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStep"] != null &&
                      typeof $steps["updateStep"] === "object" &&
                      typeof $steps["updateStep"].then === "function"
                    ) {
                      $steps["updateStep"] = await $steps["updateStep"];
                    }

                    $steps["abdo"] =
                      $state.filesAbdo.length == 0
                        ? (() => {
                            const actionArgs = {
                              tplRef: "imagePovAbdomen",
                              action: "listFiles"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["abdo"] != null &&
                      typeof $steps["abdo"] === "object" &&
                      typeof $steps["abdo"].then === "function"
                    ) {
                      $steps["abdo"] = await $steps["abdo"];
                    }

                    $steps["faceDroite"] =
                      $state.filesFaceDroite.length == 0
                        ? (() => {
                            const actionArgs = {
                              tplRef: "imagePovFaceDroite",
                              action: "listFiles"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["faceDroite"] != null &&
                      typeof $steps["faceDroite"] === "object" &&
                      typeof $steps["faceDroite"].then === "function"
                    ) {
                      $steps["faceDroite"] = await $steps["faceDroite"];
                    }

                    $steps["faceGauche"] =
                      $state.filesFaceGauche.length == 0
                        ? (() => {
                            const actionArgs = {
                              tplRef: "imagePovFaceGauche",
                              action: "listFiles"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["faceGauche"] != null &&
                      typeof $steps["faceGauche"] === "object" &&
                      typeof $steps["faceGauche"].then === "function"
                    ) {
                      $steps["faceGauche"] = await $steps["faceGauche"];
                    }

                    $steps["profil"] =
                      $state.filesProfil.length == 0
                        ? (() => {
                            const actionArgs = {
                              tplRef: "imagePovProfil",
                              action: "listFiles"
                            };
                            return (({ tplRef, action, args }) => {
                              return $refs?.[tplRef]?.[action]?.(
                                ...(args ?? [])
                              );
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["profil"] != null &&
                      typeof $steps["profil"] === "object" &&
                      typeof $steps["profil"].then === "function"
                    ) {
                      $steps["profil"] = await $steps["profil"];
                    }
                  }}
                  onShapeChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button7", "shape"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={generateStateValueProp($state, ["button7", "shape"])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8PMSq
                    )}
                  >
                    {"Map"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button8"}
                  data-plasmic-override={overrides.button8}
                  className={classNames("__wab_instance", sty.button8, {
                    [sty.button8global_locale_en]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  })}
                  color={(() => {
                    try {
                      return $state.step.includes("Score")
                        ? "tabCurrent"
                        : "tab";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "tab";
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStep"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["step"]
                            },
                            operation: 0,
                            value: "Score dPEI"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStep"] != null &&
                      typeof $steps["updateStep"] === "object" &&
                      typeof $steps["updateStep"].then === "function"
                    ) {
                      $steps["updateStep"] = await $steps["updateStep"];
                    }

                    $steps["abdo"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "imagePovAbdomen",
                            action: "listFiles"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["abdo"] != null &&
                      typeof $steps["abdo"] === "object" &&
                      typeof $steps["abdo"].then === "function"
                    ) {
                      $steps["abdo"] = await $steps["abdo"];
                    }

                    $steps["droit"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "imagePovFaceDroite",
                            action: "listFiles"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["droit"] != null &&
                      typeof $steps["droit"] === "object" &&
                      typeof $steps["droit"].then === "function"
                    ) {
                      $steps["droit"] = await $steps["droit"];
                    }

                    $steps["gauche"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "imagePovFaceGauche",
                            action: "listFiles"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["gauche"] != null &&
                      typeof $steps["gauche"] === "object" &&
                      typeof $steps["gauche"].then === "function"
                    ) {
                      $steps["gauche"] = await $steps["gauche"];
                    }

                    $steps["profil"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "imagePovProfil",
                            action: "listFiles"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["profil"] != null &&
                      typeof $steps["profil"] === "object" &&
                      typeof $steps["profil"].then === "function"
                    ) {
                      $steps["profil"] = await $steps["profil"];
                    }
                  }}
                  onShapeChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button8", "shape"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={generateStateValueProp($state, ["button8", "shape"])}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aNh3F
                    )}
                  >
                    {"Score"}
                  </div>
                </Button>
                <TabUnderline
                  data-plasmic-name={"tabUnderline"}
                  data-plasmic-override={overrides.tabUnderline}
                  className={classNames("__wab_instance", sty.tabUnderline)}
                />
              </div>
              {(() => {
                try {
                  return !$state.print;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <SifemTitleWrapper
                  data-plasmic-name={"sifemTitleWrapper"}
                  data-plasmic-override={overrides.sifemTitleWrapper}
                  className={classNames(
                    "__wab_instance",
                    sty.sifemTitleWrapper,
                    {
                      [sty.sifemTitleWrapperglobal_locale_en]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    }
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qkHpf,
                      {
                        [sty.textglobal_locale_en__qkHpfK2ON]: hasVariant(
                          globalVariants,
                          "locale",
                          "en"
                        )
                      }
                    )}
                  >
                    {hasVariant(globalVariants, "locale", "en") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.step === "Score dPEI"
                              ? "Score dPEI"
                              : $queries.getLesions.data.find(
                                  l => l.category_fr === $state.step
                                ).category_en +
                                  ($state.step.includes("Antérolatéral")
                                    ? " (AL)"
                                    : $state.step.includes("Médiolatéral")
                                    ? " (ML)"
                                    : $state.step.includes("Postérolatéral")
                                    ? " (PL)"
                                    : $state.step.includes("Médiocentral")
                                    ? " (MC)"
                                    : $state.step.includes("Antérocentral")
                                    ? " (AC)"
                                    : $state.step.includes("Postérocentral")
                                    ? " (PC)"
                                    : $state.step.includes("Extrapelvien")
                                    ? " (EP)"
                                    : "");
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Map";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.step +
                              ($state.step.includes("Antérolatéral")
                                ? " (AL)"
                                : $state.step.includes("Médiolatéral")
                                ? " (ML)"
                                : $state.step.includes("Postérolatéral")
                                ? " (PL)"
                                : $state.step.includes("Médiocentral")
                                ? " (MC)"
                                : $state.step.includes("Antérocentral")
                                ? " (AC)"
                                : $state.step.includes("Postérocentral")
                                ? " (PC)"
                                : $state.step.includes("Extrapelvien")
                                ? " (EP)"
                                : "")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "SUPERFICIELLE";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                </SifemTitleWrapper>
              ) : null}
              {(
                hasVariant(globalVariants, "locale", "en")
                  ? (() => {
                      try {
                        return (
                          $queries.getLesions.data.filter(
                            x =>
                              x.category_fr === $state.step ||
                              x.category_en === $state.step
                          ).length > 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return (
                          $queries.getLesions.data.filter(
                            x => x.category_fr === $state.step
                          ).length > 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          $queries.getLesions.data.filter(
                            x => x.category_fr === $state.step
                          ).length > 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div
                  data-plasmic-name={"questions"}
                  data-plasmic-override={overrides.questions}
                  className={classNames(projectcss.all, sty.questions, {
                    [sty.questionsglobal_locale_en]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  })}
                >
                  {(() => {
                    try {
                      return (
                        $queries.getLesions.data.filter(
                          x => x.category_fr === $state.step
                        )[0].macro_category_fr === "Profonde"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"back"}
                      data-plasmic-override={overrides.back}
                      className={classNames(projectcss.all, sty.back)}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__sFmp6)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Profonde"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.step === "Profonde";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"schema"}
                      data-plasmic-override={overrides.schema}
                      className={classNames(projectcss.all, sty.schema)}
                    >
                      <PlasmicLink__
                        data-plasmic-name={"ac"}
                        data-plasmic-override={overrides.ac}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.ac
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Antérocentral"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicLink__
                        data-plasmic-name={"alG"}
                        data-plasmic-override={overrides.alG}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.alG
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Antérolatéral droit"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicLink__
                        data-plasmic-name={"alD"}
                        data-plasmic-override={overrides.alD}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.alD
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Antérolatéral gauche"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicLink__
                        data-plasmic-name={"mlD"}
                        data-plasmic-override={overrides.mlD}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.mlD
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Médiolatéral gauche"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicLink__
                        data-plasmic-name={"mlG"}
                        data-plasmic-override={overrides.mlG}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.mlG
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Médiolatéral droit"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicLink__
                        data-plasmic-name={"mc"}
                        data-plasmic-override={overrides.mc}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.mc
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Médiocentral"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicLink__
                        data-plasmic-name={"plG"}
                        data-plasmic-override={overrides.plG}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.plG
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Postérolatéral droit"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicLink__
                        data-plasmic-name={"pc2"}
                        data-plasmic-override={overrides.pc2}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.pc2
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Postérocentral"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicLink__
                        data-plasmic-name={"plD"}
                        data-plasmic-override={overrides.plD}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.plD
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Postérolatéral gauche"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicLink__
                        data-plasmic-name={"ep"}
                        data-plasmic-override={overrides.ep}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.ep
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateProfondeStep"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["step"]
                                  },
                                  operation: 0,
                                  value: "Extrapelvien"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfondeStep"] != null &&
                            typeof $steps["updateProfondeStep"] === "object" &&
                            typeof $steps["updateProfondeStep"].then ===
                              "function"
                          ) {
                            $steps["updateProfondeStep"] = await $steps[
                              "updateProfondeStep"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__waUg, {
                          [sty.imgglobal_locale_en__waUgk2ON]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        })}
                        displayHeight={"350px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"350px"}
                        loading={"lazy"}
                        src={
                          hasVariant(globalVariants, "locale", "en")
                            ? {
                                src: "/plasmic/electric_sifem_for_production/images/compartimentsEnJpg.jpg",
                                fullWidth: 766,
                                fullHeight: 726,
                                aspectRatio: undefined
                              }
                            : {
                                src: "/plasmic/electric_sifem_for_production/images/compartimentsFrJpg.jpg",
                                fullWidth: 766,
                                fullHeight: 726,
                                aspectRatio: undefined
                              }
                        }
                      />
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.step === "Profonde";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicLink__
                      data-plasmic-name={"adI"}
                      data-plasmic-override={overrides.adI}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.adI,
                        {
                          [sty.adIglobal_locale_en]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        }
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateProfondeStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step"]
                                },
                                operation: 0,
                                value: "Pathologies associées"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateProfondeStep"] != null &&
                          typeof $steps["updateProfondeStep"] === "object" &&
                          typeof $steps["updateProfondeStep"].then ===
                            "function"
                        ) {
                          $steps["updateProfondeStep"] = await $steps[
                            "updateProfondeStep"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qXoS4,
                          {
                            [sty.textglobal_locale_en__qXoS4K2ON]: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "locale", "en")
                          ? "Associated pathologies"
                          : "Pathologies associ\u00e9es"}
                      </div>
                    </PlasmicLink__>
                  ) : null}
                  {(() => {
                    try {
                      return $state.step === "Profonde";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.getLesions.data.filter(
                              x => x.name_fr === "Pathologie associée"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.pathologieAssociee,
                              {
                                [sty.pathologieAssocieeglobal_locale_en]:
                                  hasVariant(globalVariants, "locale", "en")
                              }
                            ),
                            imageDisplay: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                              ? (() => {
                                  try {
                                    return currentItem.image_en !== null;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return currentItem.image_fr !== null;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })(),
                            imageValue: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                              ? (() => {
                                  try {
                                    return (
                                      "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/" +
                                      currentItem.image_en
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (
                                      "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/" +
                                      currentItem.image_fr
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                            isChecked:
                              generateStateValueProp($state, [
                                "pathologieAssociee",
                                __plasmic_idx_0,
                                "isChecked"
                              ]) ?? false,
                            key: currentIndex,
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "pathologieAssociee",
                                  __plasmic_idx_0,
                                  "isChecked"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }

                              (async isChecked => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const index =
                                              $state.submission.findIndex(
                                                item =>
                                                  item.currentItem.id ===
                                                  currentItem.id
                                              );
                                            if (index === -1) {
                                              $state.submission.push({
                                                currentItem
                                              });
                                            } else {
                                              $state.submission.splice(
                                                index,
                                                1
                                              );
                                            }
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            },
                            subContentDisplay: (() => {
                              try {
                                return (
                                  $state.submission.some(
                                    item =>
                                      item.currentItem.id === currentItem.id
                                  ) &&
                                  currentItem.name_fr === "Endométriome (>1cm)"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })(),
                            videoContent: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                              ? (() => {
                                  try {
                                    return (
                                      "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/" +
                                      currentItem.video_en
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return (
                                      "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/" +
                                      currentItem.video_fr
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                            videoDisplay: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                              ? (() => {
                                  try {
                                    return currentItem.video_en !== null;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return currentItem.video_fr !== null;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "pathologieAssociee[].isChecked",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $state.submission.some(
                                        item =>
                                          item.currentItem.id === currentItem.id
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Checkbox
                              data-plasmic-name={"pathologieAssociee"}
                              data-plasmic-override={
                                overrides.pathologieAssociee
                              }
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xTr3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___4Qf0A,
                                    {
                                      [sty.textglobal_locale_en___4Qf0Ak2ON]:
                                        hasVariant(
                                          globalVariants,
                                          "locale",
                                          "en"
                                        )
                                    }
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "locale",
                                    "en"
                                  ) ? (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.name_en;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Absence d'endom\u00e9triose superficielle visible";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.name_fr;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Absence d'endom\u00e9triose superficielle visible";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  )}
                                </div>
                              </div>
                            </Checkbox>
                          );
                        })();
                      })
                    : null}
                  {(() => {
                    try {
                      return $state.step !== "Profonde";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.getLesions.data.filter(
                              x =>
                                x.category_fr === $state.step ||
                                x.category_en === $state.step
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            data-plasmic-name={"check"}
                            data-plasmic-override={overrides.check}
                            className={classNames(projectcss.all, sty.check, {
                              [sty.checkglobal_locale_en]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            })}
                            key={currentIndex}
                          >
                            {(() => {
                              try {
                                return currentItem.video_fr !== null;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"video"}
                                data-plasmic-override={overrides.video}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.video
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateVideoOpen"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["videoOpen"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateVideoOpen"] != null &&
                                    typeof $steps["updateVideoOpen"] ===
                                      "object" &&
                                    typeof $steps["updateVideoOpen"].then ===
                                      "function"
                                  ) {
                                    $steps["updateVideoOpen"] = await $steps[
                                      "updateVideoOpen"
                                    ];
                                  }

                                  $steps["updateVariable"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["videoContent"]
                                          },
                                          operation: 0,
                                          value:
                                            "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/" +
                                            currentItem.video_fr
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateVariable"] != null &&
                                    typeof $steps["updateVariable"] ===
                                      "object" &&
                                    typeof $steps["updateVariable"].then ===
                                      "function"
                                  ) {
                                    $steps["updateVariable"] = await $steps[
                                      "updateVariable"
                                    ];
                                  }
                                }}
                              >
                                <PlayIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fm5B0
                                  )}
                                  role={"img"}
                                />

                                <div
                                  data-plasmic-name={"text4"}
                                  data-plasmic-override={overrides.text4}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text4,
                                    {
                                      [sty.text4global_locale_en]: hasVariant(
                                        globalVariants,
                                        "locale",
                                        "en"
                                      )
                                    }
                                  )}
                                >
                                  {hasVariant(globalVariants, "locale", "en")
                                    ? "Video"
                                    : "Vid\u00e9o"}
                                </div>
                              </Stack__>
                            ) : null}
                            {(() => {
                              const child$Props = {
                                imageDisplay: hasVariant(
                                  globalVariants,
                                  "locale",
                                  "en"
                                )
                                  ? (() => {
                                      try {
                                        return currentItem.image_en !== null;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return currentItem.image_fr !== null;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })(),
                                imageValue: hasVariant(
                                  globalVariants,
                                  "locale",
                                  "en"
                                )
                                  ? (() => {
                                      try {
                                        return (
                                          "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/" +
                                          currentItem.image_en
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return (
                                          "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/" +
                                          currentItem.image_fr
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                isChecked:
                                  generateStateValueProp($state, [
                                    "checkbox",
                                    __plasmic_idx_0,
                                    "isChecked"
                                  ]) ?? false,
                                isDisabled: (() => {
                                  try {
                                    return (
                                      currentItem.has_options == true
                                      // && $state.subSubmission.filter(x => x.lesion_id === currentItem.id).length == 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })(),
                                isIndeterminate: (() => {
                                  try {
                                    return (
                                      currentItem.has_options == true
                                      // && $state.subSubmission.filter(x => x.lesion_id === currentItem.id).length == 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "isIndeterminate";
                                    }
                                    throw e;
                                  }
                                })(),
                                onChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "checkbox",
                                      __plasmic_idx_0,
                                      "isChecked"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }

                                  (async isChecked => {
                                    const $steps = {};

                                    $steps["subOther"] = false
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return ($state.subSubmission =
                                                $state.subSubmission.filter(
                                                  item =>
                                                    item.lesion_id !==
                                                    currentItem.id
                                                ));
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["subOther"] != null &&
                                      typeof $steps["subOther"] === "object" &&
                                      typeof $steps["subOther"].then ===
                                        "function"
                                    ) {
                                      $steps["subOther"] = await $steps[
                                        "subOther"
                                      ];
                                    }

                                    $steps["subEndo"] =
                                      currentItem.id === "10" ||
                                      currentItem.id === "16"
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return (() => {
                                                  const existingIndex =
                                                    $state.submissionEndometriome.filter(
                                                      item =>
                                                        item.lesion_id ===
                                                        currentItem.id
                                                    ).length;
                                                  if (existingIndex > 0) {
                                                    $state.submissionEndometriome =
                                                      $state.submissionEndometriome.filter(
                                                        item =>
                                                          item.lesion_id !==
                                                          currentItem.id
                                                      );
                                                  } else {
                                                    $state.submissionEndometriome.push(
                                                      {
                                                        lesion_id:
                                                          currentItem.id,
                                                        id: $queries.getOptions.data.find(
                                                          x =>
                                                            x.lesion_id ===
                                                            currentItem.id
                                                        ).id
                                                      }
                                                    );
                                                  }
                                                })();
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["subEndo"] != null &&
                                      typeof $steps["subEndo"] === "object" &&
                                      typeof $steps["subEndo"].then ===
                                        "function"
                                    ) {
                                      $steps["subEndo"] = await $steps[
                                        "subEndo"
                                      ];
                                    }

                                    $steps["lesion"] =
                                      currentItem.has_options == false
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return (() => {
                                                  const index =
                                                    $state.submission.findIndex(
                                                      item =>
                                                        item.id ===
                                                        currentItem.id
                                                    );
                                                  if (index === -1) {
                                                    $state.submission.push(
                                                      currentItem
                                                    );
                                                  } else {
                                                    $state.submission.splice(
                                                      index,
                                                      1
                                                    );
                                                  }
                                                })();
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["lesion"] != null &&
                                      typeof $steps["lesion"] === "object" &&
                                      typeof $steps["lesion"].then ===
                                        "function"
                                    ) {
                                      $steps["lesion"] = await $steps["lesion"];
                                    }
                                  }).apply(null, eventArgs);
                                },
                                subContentDisplay: (() => {
                                  try {
                                    return (
                                      $state.submission.some(
                                        item =>
                                          item.currentItem.id === currentItem.id
                                      ) &&
                                      currentItem.name_fr ===
                                        "Endométriome (>1cm)"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })(),
                                videoContent: hasVariant(
                                  globalVariants,
                                  "locale",
                                  "en"
                                )
                                  ? (() => {
                                      try {
                                        return (
                                          "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/" +
                                          currentItem.video_en
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return (
                                          "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/" +
                                          currentItem.video_fr
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                videoDisplay: hasVariant(
                                  globalVariants,
                                  "locale",
                                  "en"
                                )
                                  ? (() => {
                                      try {
                                        return currentItem.video_en !== null;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return currentItem.video_fr !== null;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "checkbox[].isChecked",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $state.submission.some(
                                            item => item.id === currentItem.id
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                [__plasmic_idx_0]
                              );
                              return (
                                <Checkbox
                                  data-plasmic-name={"checkbox"}
                                  data-plasmic-override={overrides.checkbox}
                                  {...child$Props}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__bfoWf
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__bk6Zh,
                                        {
                                          [sty.textglobal_locale_en__bk6Zhk2ON]:
                                            hasVariant(
                                              globalVariants,
                                              "locale",
                                              "en"
                                            )
                                        }
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "locale",
                                        "en"
                                      ) ? (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.name_en;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Absence d'endom\u00e9triose superficielle visible";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      ) : (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.name_fr;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Absence d'endom\u00e9triose superficielle visible";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      )}
                                    </div>
                                    {(() => {
                                      try {
                                        return (
                                          (currentItem.id === "10" &&
                                            $state.submissionEndometriome.filter(
                                              x =>
                                                x.lesion_id === currentItem.id
                                            ).length == 0) ||
                                          (currentItem.id === "16" &&
                                            $state.submissionEndometriome.filter(
                                              x =>
                                                x.lesion_id === currentItem.id
                                            ).length == 0)
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                                      ? (() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.addEnd
                                            ),
                                            onClick: async event => {
                                              const $steps = {};

                                              $steps[
                                                "updateSubmissionEndometriome"
                                              ] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "submissionEndometriome"
                                                        ]
                                                      },
                                                      operation: 5,
                                                      value: {
                                                        lesion_id:
                                                          currentItem.id,
                                                        id: $queries.getOptions.data.find(
                                                          x =>
                                                            x.lesion_id ===
                                                            currentItem.id
                                                        ).id,
                                                        state_id:
                                                          currentItem.id + 0
                                                      }
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      const arr = $stateGet(
                                                        objRoot,
                                                        variablePath
                                                      );
                                                      arr.push(value);
                                                      return arr;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps[
                                                  "updateSubmissionEndometriome"
                                                ] != null &&
                                                typeof $steps[
                                                  "updateSubmissionEndometriome"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateSubmissionEndometriome"
                                                ].then === "function"
                                              ) {
                                                $steps[
                                                  "updateSubmissionEndometriome"
                                                ] = await $steps[
                                                  "updateSubmissionEndometriome"
                                                ];
                                              }

                                              $steps["updateSubmission"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "submission"
                                                        ]
                                                      },
                                                      operation: 5,
                                                      value: currentItem
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      const arr = $stateGet(
                                                        objRoot,
                                                        variablePath
                                                      );
                                                      arr.push(value);
                                                      return arr;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateSubmission"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateSubmission"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateSubmission"
                                                ].then === "function"
                                              ) {
                                                $steps["updateSubmission"] =
                                                  await $steps[
                                                    "updateSubmission"
                                                  ];
                                              }
                                            },
                                            onShapeChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              ((...eventArgs) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  [
                                                    "addEnd",
                                                    __plasmic_idx_0,
                                                    "shape"
                                                  ]
                                                )(eventArgs[0]);
                                              }).apply(null, eventArgs);

                                              if (
                                                eventArgs.length > 1 &&
                                                eventArgs[1] &&
                                                eventArgs[1]
                                                  ._plasmic_state_init_
                                              ) {
                                                return;
                                              }
                                            },
                                            shape: generateStateValueProp(
                                              $state,
                                              [
                                                "addEnd",
                                                __plasmic_idx_0,
                                                "shape"
                                              ]
                                            )
                                          };

                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "addEnd[].shape",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => "round"
                                              }
                                            ],
                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <Button
                                              data-plasmic-name={"addEnd"}
                                              data-plasmic-override={
                                                overrides.addEnd
                                              }
                                              {...child$Props}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__zzGa
                                                )}
                                              >
                                                {"Button"}
                                              </div>
                                            </Button>
                                          );
                                        })()
                                      : null}
                                  </Stack__>
                                </Checkbox>
                              );
                            })()}
                            {(() => {
                              try {
                                return (
                                  // has options
                                  currentItem.has_options == true &&
                                  // and is not left endométriome
                                  currentItem.id !== "10" &&
                                  // and is not right endométriome
                                  currentItem.id !== "16"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.getOptions.data.filter(
                                        x => x.lesion_id == currentItem.id
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem2 = __plasmic_item_1;
                                  const currentIndex2 = __plasmic_idx_1;
                                  return (() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.subCheckbox,
                                        {
                                          [sty.subCheckboxglobal_locale_en]:
                                            hasVariant(
                                              globalVariants,
                                              "locale",
                                              "en"
                                            )
                                        }
                                      ),
                                      isChecked:
                                        generateStateValueProp($state, [
                                          "subCheckbox",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          "isChecked"
                                        ]) ?? false,
                                      key: currentIndex2,
                                      onChange: async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "subCheckbox",
                                            __plasmic_idx_0,
                                            __plasmic_idx_1,
                                            "isChecked"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }

                                        (async isChecked => {
                                          const $steps = {};

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      const index =
                                                        $state.subSubmission.findIndex(
                                                          item =>
                                                            item.id ===
                                                            currentItem2.id
                                                        );
                                                      if (index === -1) {
                                                        $state.subSubmission.push(
                                                          currentItem2
                                                        );
                                                      } else {
                                                        $state.subSubmission.splice(
                                                          index,
                                                          1
                                                        );
                                                      }
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }

                                          $steps["runCode2"] =
                                            currentItem.has_options == true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return (() => {
                                                          const exists =
                                                            $state.subSubmission.some(
                                                              x =>
                                                                x.lesion_id ===
                                                                currentItem.id
                                                            );
                                                          if (exists) {
                                                            if (
                                                              !$state.submission.some(
                                                                x =>
                                                                  x.id ===
                                                                  currentItem.id
                                                              )
                                                            ) {
                                                              $state.submission.push(
                                                                currentItem
                                                              );
                                                            }
                                                          } else {
                                                            $state.submission =
                                                              $state.submission.filter(
                                                                x =>
                                                                  x.id !==
                                                                  currentItem.id
                                                              );
                                                          }
                                                        })();
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["runCode2"] != null &&
                                            typeof $steps["runCode2"] ===
                                              "object" &&
                                            typeof $steps["runCode2"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode2"] = await $steps[
                                              "runCode2"
                                            ];
                                          }
                                        }).apply(null, eventArgs);
                                      }
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "subCheckbox[][].isChecked",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return $state.subSubmission.some(
                                                  item =>
                                                    item.id === currentItem2.id
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],
                                      [__plasmic_idx_0, __plasmic_idx_1]
                                    );
                                    return (
                                      <Checkbox
                                        data-plasmic-name={"subCheckbox"}
                                        data-plasmic-override={
                                          overrides.subCheckbox
                                        }
                                        {...child$Props}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "locale",
                                          "en"
                                        ) ? (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  (currentItem.name_fr ===
                                                  "Vessie"
                                                    ? currentIndex2 + 1 + " - "
                                                    : "") + currentItem2.name_en
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Absence d'endom\u00e9triose superficielle visible";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        ) : (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  (currentItem.name_fr ===
                                                  "Vessie"
                                                    ? currentIndex2 + 1 + " - "
                                                    : "") + currentItem2.name_fr
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Absence d'endom\u00e9triose superficielle visible";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        )}
                                      </Checkbox>
                                    );
                                  })();
                                })
                              : null}
                            {(() => {
                              try {
                                return (
                                  // has options
                                  currentItem.has_options == true &&
                                  // and endométriome
                                  (currentItem.id === "10" ||
                                    currentItem.id === "16")
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.submissionEndometriome.filter(
                                        x => x.lesion_id === currentItem.id
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem3 = __plasmic_item_1;
                                  const currentIndex3 = __plasmic_idx_1;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"detailsEndometriome"}
                                      data-plasmic-override={
                                        overrides.detailsEndometriome
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.detailsEndometriome,
                                        {
                                          [sty.detailsEndometriomeglobal_locale_en]:
                                            hasVariant(
                                              globalVariants,
                                              "locale",
                                              "en"
                                            )
                                        }
                                      )}
                                      key={currentIndex3}
                                    >
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={
                                          "endometriomeWrapper"
                                        }
                                        data-plasmic-override={
                                          overrides.endometriomeWrapper
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.endometriomeWrapper,
                                          {
                                            [sty.endometriomeWrapperglobal_locale_en]:
                                              hasVariant(
                                                globalVariants,
                                                "locale",
                                                "en"
                                              )
                                          }
                                        )}
                                      >
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"fr"}
                                          data-plasmic-override={overrides.fr}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.fr,
                                            {
                                              [sty.frglobal_locale_en]:
                                                hasVariant(
                                                  globalVariants,
                                                  "locale",
                                                  "en"
                                                )
                                            }
                                          )}
                                        >
                                          {renderPlasmicSlot({
                                            defaultContents: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ieyke
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return (
                                                        "Endométriome " +
                                                        (currentIndex3 + 1)
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "Endom\u00e9triome 1";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            ),
                                            value: args.text2,
                                            className: classNames(
                                              sty.slotTargetText2,
                                              {
                                                [sty.slotTargetText2global_locale_en]:
                                                  hasVariant(
                                                    globalVariants,
                                                    "locale",
                                                    "en"
                                                  ),
                                                [sty.slotTargetText2global_locale_fr]:
                                                  hasVariant(
                                                    globalVariants,
                                                    "locale",
                                                    "fr"
                                                  )
                                              }
                                            )
                                          })}
                                          <XIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg___4D9S,
                                              {
                                                [sty.svgglobal_locale_en___4D9SK2ON]:
                                                  hasVariant(
                                                    globalVariants,
                                                    "locale",
                                                    "en"
                                                  )
                                              }
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps[
                                                "updateSubmissionEndometriome"
                                              ] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "submissionEndometriome"
                                                        ]
                                                      },
                                                      operation: 6,
                                                      startIndex: (() => {
                                                        try {
                                                          return $state.submissionEndometriome.findIndex(
                                                            item =>
                                                              item.state_id ===
                                                              currentItem.id +
                                                                currentIndex3
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })(),
                                                      deleteCount: 1
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      const arr = $stateGet(
                                                        objRoot,
                                                        variablePath
                                                      );
                                                      arr.splice(
                                                        startIndex,
                                                        deleteCount
                                                      );
                                                      return arr;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps[
                                                  "updateSubmissionEndometriome"
                                                ] != null &&
                                                typeof $steps[
                                                  "updateSubmissionEndometriome"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateSubmissionEndometriome"
                                                ].then === "function"
                                              ) {
                                                $steps[
                                                  "updateSubmissionEndometriome"
                                                ] = await $steps[
                                                  "updateSubmissionEndometriome"
                                                ];
                                              }

                                              $steps["runCode2"] =
                                                currentIndex3 == 0
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return ($state.submission =
                                                              $state.submission.filter(
                                                                x =>
                                                                  x.id !==
                                                                  currentItem.id
                                                              ));
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["runCode2"] != null &&
                                                typeof $steps["runCode2"] ===
                                                  "object" &&
                                                typeof $steps["runCode2"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode2"] =
                                                  await $steps["runCode2"];
                                              }
                                            }}
                                            role={"img"}
                                          />
                                        </Stack__>
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"en"}
                                          data-plasmic-override={overrides.en}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.en,
                                            {
                                              [sty.englobal_locale_en]:
                                                hasVariant(
                                                  globalVariants,
                                                  "locale",
                                                  "en"
                                                )
                                            }
                                          )}
                                        >
                                          {renderPlasmicSlot({
                                            defaultContents: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___2Hznm
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return (
                                                        "Endometrioma " +
                                                        (currentIndex3 + 1)
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "Endom\u00e9triome 1";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            ),
                                            value: args.text5,
                                            className: classNames(
                                              sty.slotTargetText5,
                                              {
                                                [sty.slotTargetText5global_locale_en]:
                                                  hasVariant(
                                                    globalVariants,
                                                    "locale",
                                                    "en"
                                                  ),
                                                [sty.slotTargetText5global_locale_fr]:
                                                  hasVariant(
                                                    globalVariants,
                                                    "locale",
                                                    "fr"
                                                  )
                                              }
                                            )
                                          })}
                                          <XIcon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__hIt7S,
                                              {
                                                [sty.svgglobal_locale_en__hIt7Sk2ON]:
                                                  hasVariant(
                                                    globalVariants,
                                                    "locale",
                                                    "en"
                                                  )
                                              }
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps[
                                                "updateSubmissionEndometriome"
                                              ] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "submissionEndometriome"
                                                        ]
                                                      },
                                                      operation: 6,
                                                      startIndex: (() => {
                                                        try {
                                                          return currentIndex3;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })(),
                                                      deleteCount: 1
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      const arr = $stateGet(
                                                        objRoot,
                                                        variablePath
                                                      );
                                                      arr.splice(
                                                        startIndex,
                                                        deleteCount
                                                      );
                                                      return arr;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps[
                                                  "updateSubmissionEndometriome"
                                                ] != null &&
                                                typeof $steps[
                                                  "updateSubmissionEndometriome"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateSubmissionEndometriome"
                                                ].then === "function"
                                              ) {
                                                $steps[
                                                  "updateSubmissionEndometriome"
                                                ] = await $steps[
                                                  "updateSubmissionEndometriome"
                                                ];
                                              }
                                            }}
                                            role={"img"}
                                          />
                                        </Stack__>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___8GEmQ
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__ahLmu,
                                              {
                                                [sty.textglobal_locale_en__ahLmuK2ON]:
                                                  hasVariant(
                                                    globalVariants,
                                                    "locale",
                                                    "en"
                                                  )
                                              }
                                            )}
                                          >
                                            {hasVariant(
                                              globalVariants,
                                              "locale",
                                              "en"
                                            )
                                              ? "Size"
                                              : "Taille"}
                                          </div>
                                          {(() => {
                                            const child$Props = {
                                              className: classNames(
                                                "__wab_instance",
                                                sty.select2
                                              ),
                                              defaultStylesClassName:
                                                classNames(
                                                  projectcss.root_reset,
                                                  projectcss.plasmic_default_styles,
                                                  projectcss.plasmic_mixins,
                                                  projectcss.plasmic_tokens,
                                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                                ),
                                              defaultValue: (() => {
                                                try {
                                                  return $queries.getOptions.data
                                                    .filter(
                                                      x =>
                                                        x.id === currentItem3.id
                                                    )
                                                    .map(x => ({
                                                      value: x.id,
                                                      label: x.name_fr
                                                    }));
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              onChange: async (
                                                ...eventArgs: any
                                              ) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  [
                                                    "select2",
                                                    __plasmic_idx_0,
                                                    __plasmic_idx_1,
                                                    "value"
                                                  ]
                                                ).apply(null, eventArgs);

                                                (async (value, option) => {
                                                  const $steps = {};

                                                  $steps["runCode"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          customFunction:
                                                            async () => {
                                                              return ($state.submissionEndometriome.filter(
                                                                x =>
                                                                  x.lesion_id ===
                                                                  currentItem.id
                                                              )[
                                                                currentIndex3
                                                              ].id =
                                                                $state.select2[
                                                                  currentIndex
                                                                ][
                                                                  currentIndex3
                                                                ].value);
                                                            }
                                                        };
                                                        return (({
                                                          customFunction
                                                        }) => {
                                                          return customFunction();
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["runCode"] != null &&
                                                    typeof $steps["runCode"] ===
                                                      "object" &&
                                                    typeof $steps["runCode"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["runCode"] =
                                                      await $steps["runCode"];
                                                  }

                                                  $steps[
                                                    "updateSubmissionEndometriome"
                                                  ] = false
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "submissionEndometriome"
                                                            ]
                                                          },
                                                          operation: 0
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateSubmissionEndometriome"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateSubmissionEndometriome"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateSubmissionEndometriome"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateSubmissionEndometriome"
                                                    ] = await $steps[
                                                      "updateSubmissionEndometriome"
                                                    ];
                                                  }
                                                }).apply(null, eventArgs);
                                              },
                                              options: (() => {
                                                try {
                                                  return (
                                                    $queries.getOptions.data
                                                      // filter on endo
                                                      .filter(
                                                        x =>
                                                          x.lesion_id ===
                                                          currentItem.id
                                                      )
                                                      // map to dropdown
                                                      .map(x => ({
                                                        value: x.id,
                                                        label: x.name_fr
                                                      }))
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return (() => {
                                                      const __composite = [
                                                        {
                                                          value: null,
                                                          label: null,
                                                          type: "option"
                                                        },
                                                        {
                                                          value: null,
                                                          label: null,
                                                          type: "option"
                                                        },
                                                        {
                                                          type: "option",
                                                          value: null,
                                                          label: null
                                                        }
                                                      ];
                                                      __composite["0"][
                                                        "value"
                                                      ] = "1";
                                                      __composite["0"][
                                                        "label"
                                                      ] = "1 cm";
                                                      __composite["1"][
                                                        "value"
                                                      ] = "2";
                                                      __composite["1"][
                                                        "label"
                                                      ] = "2 cm";
                                                      __composite["2"][
                                                        "value"
                                                      ] = "3";
                                                      __composite["2"][
                                                        "label"
                                                      ] = "3 cm";
                                                      return __composite;
                                                    })();
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              placeholder:
                                                "S\u00e9lectionner...",
                                              popupScopeClassName:
                                                sty["select2__popup"],
                                              value: generateStateValueProp(
                                                $state,
                                                [
                                                  "select2",
                                                  __plasmic_idx_0,
                                                  __plasmic_idx_1,
                                                  "value"
                                                ]
                                              )
                                            };
                                            initializeCodeComponentStates(
                                              $state,
                                              [
                                                {
                                                  name: "value",
                                                  plasmicStateName:
                                                    "select2[][].value"
                                                }
                                              ],
                                              [
                                                __plasmic_idx_0,
                                                __plasmic_idx_1
                                              ],
                                              undefined ?? {},
                                              child$Props
                                            );
                                            initializePlasmicStates(
                                              $state,
                                              [
                                                {
                                                  name: "select2[][].value",
                                                  initFunc: ({
                                                    $props,
                                                    $state,
                                                    $queries
                                                  }) =>
                                                    (() => {
                                                      try {
                                                        return $queries.getOptions.data
                                                          .filter(
                                                            x =>
                                                              x.id ===
                                                              currentItem3.id
                                                          )
                                                          .map(x => ({
                                                            value: x.id,
                                                            label: x.name_fr
                                                          }));
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                }
                                              ],
                                              [__plasmic_idx_0, __plasmic_idx_1]
                                            );
                                            return (
                                              <AntdSelect
                                                data-plasmic-name={"select2"}
                                                data-plasmic-override={
                                                  overrides.select2
                                                }
                                                {...child$Props}
                                              />
                                            );
                                          })()}
                                        </div>
                                      </Stack__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___2EwoK,
                                          {
                                            [sty.freeBoxglobal_locale_en___2EwoKk2ON]:
                                              hasVariant(
                                                globalVariants,
                                                "locale",
                                                "en"
                                              )
                                          }
                                        )}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.button11
                                            ),
                                            onClick: async event => {
                                              const $steps = {};

                                              $steps[
                                                "updateSubmissionEndometriome"
                                              ] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "submissionEndometriome"
                                                        ]
                                                      },
                                                      operation: 5,
                                                      value: {
                                                        lesion_id:
                                                          currentItem.id,
                                                        id: $queries.getOptions.data.find(
                                                          x =>
                                                            x.lesion_id ===
                                                            currentItem.id
                                                        ).id,
                                                        state_id:
                                                          currentItem.id +
                                                          (currentIndex3 + 1)
                                                      }
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      const arr = $stateGet(
                                                        objRoot,
                                                        variablePath
                                                      );
                                                      arr.push(value);
                                                      return arr;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps[
                                                  "updateSubmissionEndometriome"
                                                ] != null &&
                                                typeof $steps[
                                                  "updateSubmissionEndometriome"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateSubmissionEndometriome"
                                                ].then === "function"
                                              ) {
                                                $steps[
                                                  "updateSubmissionEndometriome"
                                                ] = await $steps[
                                                  "updateSubmissionEndometriome"
                                                ];
                                              }
                                            },
                                            onShapeChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              ((...eventArgs) => {
                                                generateStateOnChangeProp(
                                                  $state,
                                                  [
                                                    "button11",
                                                    __plasmic_idx_0,
                                                    __plasmic_idx_1,
                                                    "shape"
                                                  ]
                                                )(eventArgs[0]);
                                              }).apply(null, eventArgs);

                                              if (
                                                eventArgs.length > 1 &&
                                                eventArgs[1] &&
                                                eventArgs[1]
                                                  ._plasmic_state_init_
                                              ) {
                                                return;
                                              }
                                            },
                                            shape: generateStateValueProp(
                                              $state,
                                              [
                                                "button11",
                                                __plasmic_idx_0,
                                                __plasmic_idx_1,
                                                "shape"
                                              ]
                                            )
                                          };

                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "button11[][].shape",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) => "round"
                                              }
                                            ],
                                            [__plasmic_idx_0, __plasmic_idx_1]
                                          );
                                          return (
                                            <Button
                                              data-plasmic-name={"button11"}
                                              data-plasmic-override={
                                                overrides.button11
                                              }
                                              {...child$Props}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ba9Km
                                                )}
                                              >
                                                {"Button"}
                                              </div>
                                            </Button>
                                          );
                                        })()}
                                      </div>
                                    </Stack__>
                                  );
                                })
                              : null}
                          </div>
                        );
                      })
                    : null}
                  {(() => {
                    try {
                      return $queries.getLesions.data.filter(
                        l => l.category_fr === $state.step
                      )[0].multi_step;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"nextBack"}
                      data-plasmic-override={overrides.nextBack}
                      className={classNames(projectcss.all, sty.nextBack)}
                    >
                      {(() => {
                        try {
                          return (
                            $queries.getLesions.data.filter(
                              l => l.category_fr === $state.step
                            )[0].next_step !== null
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <IconIcon
                          data-plasmic-name={"next"}
                          data-plasmic-override={overrides.next}
                          className={classNames(projectcss.all, sty.next)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateProfondeStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $queries.getLesions.data.filter(
                                      l => l.category_fr === $state.step
                                    )[0].next_step
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateProfondeStep"] != null &&
                              typeof $steps["updateProfondeStep"] ===
                                "object" &&
                              typeof $steps["updateProfondeStep"].then ===
                                "function"
                            ) {
                              $steps["updateProfondeStep"] = await $steps[
                                "updateProfondeStep"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $queries.getLesions.data.filter(
                              l => l.category_fr === $state.step
                            )[0].previous_step !== null
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <IconIcon
                          data-plasmic-name={"back2"}
                          data-plasmic-override={overrides.back2}
                          className={classNames(projectcss.all, sty.back2)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateProfondeStep"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["step"]
                                    },
                                    operation: 0,
                                    value: $queries.getLesions.data.filter(
                                      l => l.category_fr === $state.step
                                    )[0].previous_step
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateProfondeStep"] != null &&
                              typeof $steps["updateProfondeStep"] ===
                                "object" &&
                              typeof $steps["updateProfondeStep"].then ===
                                "function"
                            ) {
                              $steps["updateProfondeStep"] = await $steps[
                                "updateProfondeStep"
                              ];
                            }
                          }}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.step === "Map" || $state.print;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"map"}
                  data-plasmic-override={overrides.map}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.map)}
                  id={"map"}
                >
                  <div
                    data-plasmic-name={"profil"}
                    data-plasmic-override={overrides.profil}
                    className={classNames(projectcss.all, sty.profil)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__kcgx, {
                        [sty.imgglobal_locale_en__kcgxK2ON]: hasVariant(
                          globalVariants,
                          "locale",
                          "en"
                        )
                      })}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"eager"}
                      src={{
                        src: "/plasmic/electric_sifem_for_production/images/imgJpg.jpg",
                        fullWidth: 320,
                        fullHeight: 320,
                        aspectRatio: undefined
                      }}
                    />

                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            // lesions selected...
                            $queries.getLesions.data
                              .filter(x =>
                                $state.submission.map(y => y.id).includes(x.id)
                              )
                              // which have filesProfil
                              .filter(x =>
                                $state.filesProfil
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaLesion"}
                          data-plasmic-override={overrides.traumaLesion}
                          alt={""}
                          className={classNames(sty.traumaLesion)}
                          displayHeight={"320px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"320px"}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_profil/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={``}
                        />
                      );
                    })}
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            $queries.getOptions.data
                              // is selected
                              .filter(
                                x =>
                                  $state.subSubmission
                                    .map(y => y.id)
                                    .includes(x.id) ||
                                  $state.submissionEndometriome
                                    .map(y => y.id)
                                    .includes(x.id)
                              )
                              // has profil images
                              .filter(x =>
                                $state.filesProfil
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              // map images
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaOptions"}
                          data-plasmic-override={overrides.traumaOptions}
                          alt={""}
                          className={classNames(sty.traumaOptions)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"320px"}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_profil/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={"320px"}
                        />
                      );
                    })}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x7QSy
                    )}
                  >
                    {" Vue pelvienne lat\u00e9rale"}
                  </div>
                  <div
                    data-plasmic-name={"face"}
                    data-plasmic-override={overrides.face}
                    className={classNames(projectcss.all, sty.face)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__nWoDr, {
                        [sty.imgglobal_locale_en__nWoDrK2ON]: hasVariant(
                          globalVariants,
                          "locale",
                          "en"
                        )
                      })}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"eager"}
                      src={{
                        src: "/plasmic/electric_sifem_for_production/images/img1Jpg.jpg",
                        fullWidth: 273,
                        fullHeight: 320,
                        aspectRatio: undefined
                      }}
                    />

                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            // lesions selected...
                            $queries.getLesions.data
                              .filter(
                                x =>
                                  x.has_options == false && x.face == "droite"
                              )
                              .filter(x =>
                                $state.submission.map(y => y.id).includes(x.id)
                              )
                              // which have filesFaceDroit
                              .filter(x =>
                                $state.filesFaceDroite
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaLesionDroit"}
                          data-plasmic-override={overrides.traumaLesionDroit}
                          alt={""}
                          className={classNames(sty.traumaLesionDroit)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"273px"}
                          height={``}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_face-droite/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={``}
                        />
                      );
                    })}
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            // lesions selected...
                            $queries.getLesions.data
                              .filter(
                                x => x.has_options == false && x.face == null
                              )
                              .filter(x =>
                                $state.submission.map(y => y.id).includes(x.id)
                              )
                              // which have filesFaceDroit
                              .filter(x =>
                                $state.filesFaceDroite
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaLesionCentre"}
                          data-plasmic-override={overrides.traumaLesionCentre}
                          alt={""}
                          className={classNames(sty.traumaLesionCentre)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"273px"}
                          height={``}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_face-droite/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={``}
                        />
                      );
                    })}
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            // lesions selected...
                            $queries.getLesions.data
                              .filter(
                                x =>
                                  x.has_options == false && x.face == "gauche"
                              )
                              .filter(x =>
                                $state.submission.map(y => y.id).includes(x.id)
                              )
                              // which have filesFaceGauche
                              .filter(x =>
                                $state.filesFaceGauche
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaLesionGauche"}
                          data-plasmic-override={overrides.traumaLesionGauche}
                          alt={""}
                          className={classNames(sty.traumaLesionGauche)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"273px"}
                          height={``}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_face_gauche/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={``}
                        />
                      );
                    })}
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            $queries.getOptions.data
                              .filter(x => x.face !== "gauche")
                              // is selected
                              .filter(
                                x =>
                                  $state.subSubmission
                                    .map(y => y.id)
                                    .includes(x.id) ||
                                  $state.submissionEndometriome
                                    .map(y => y.id)
                                    .includes(x.id)
                              )
                              // has profil images
                              .filter(x =>
                                $state.filesFaceDroite
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              // map images
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaOptionsDroite"}
                          data-plasmic-override={overrides.traumaOptionsDroite}
                          alt={""}
                          className={classNames(sty.traumaOptionsDroite)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"273px"}
                          height={``}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_face-droite/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={``}
                        />
                      );
                    })}
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            $queries.getOptions.data
                              .filter(x => x.face !== "droite")
                              // is selected
                              .filter(
                                x =>
                                  $state.subSubmission
                                    .map(y => y.id)
                                    .includes(x.id) ||
                                  $state.submissionEndometriome
                                    .map(y => y.id)
                                    .includes(x.id)
                              )
                              // has profil images
                              .filter(x =>
                                $state.filesFaceGauche
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              // map images
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaOptionsGauche"}
                          data-plasmic-override={overrides.traumaOptionsGauche}
                          alt={""}
                          className={classNames(sty.traumaOptionsGauche)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"273px"}
                          height={``}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_face_gauche/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={``}
                        />
                      );
                    })}
                  </div>
                  <div
                    data-plasmic-name={"abdo2"}
                    data-plasmic-override={overrides.abdo2}
                    className={classNames(projectcss.all, sty.abdo2)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__iXHfX, {
                        [sty.imgglobal_locale_en__iXHfXk2ON]: hasVariant(
                          globalVariants,
                          "locale",
                          "en"
                        )
                      })}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"eager"}
                      src={{
                        src: "/plasmic/electric_sifem_for_production/images/img2Jpg.jpg",
                        fullWidth: 307,
                        fullHeight: 320,
                        aspectRatio: undefined
                      }}
                    />

                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            // lesions selected...
                            $queries.getLesions.data
                              .filter(x =>
                                $state.submission.map(y => y.id).includes(x.id)
                              )
                              // which have filesAbo
                              .filter(x =>
                                $state.filesAbdo
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaLesion2"}
                          data-plasmic-override={overrides.traumaLesion2}
                          alt={""}
                          className={classNames(sty.traumaLesion2)}
                          displayHeight={"320px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_abdomen/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={``}
                        />
                      );
                    })}
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            $queries.getOptions.data
                              // is selected
                              .filter(
                                x =>
                                  $state.subSubmission
                                    .map(y => y.id)
                                    .includes(x.id) ||
                                  $state.submissionEndometriome
                                    .map(y => y.id)
                                    .includes(x.id)
                              )
                              // has abo images
                              .filter(x =>
                                $state.filesAbdo
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              // map images
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaOptions2"}
                          data-plasmic-override={overrides.traumaOptions2}
                          alt={""}
                          className={classNames(sty.traumaOptions2)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_abdomen/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={"320px"}
                        />
                      );
                    })}
                  </div>
                  <div
                    data-plasmic-name={"abdo"}
                    data-plasmic-override={overrides.abdo}
                    className={classNames(projectcss.all, sty.abdo)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__rEhi4, {
                        [sty.imgglobal_locale_en__rEhi4K2ON]: hasVariant(
                          globalVariants,
                          "locale",
                          "en"
                        )
                      })}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"eager"}
                      src={{
                        src: "/plasmic/electric_sifem_for_production/images/img2Jpg.jpg",
                        fullWidth: 307,
                        fullHeight: 320,
                        aspectRatio: undefined
                      }}
                    />

                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            // lesions selected...
                            $queries.getLesions.data
                              .filter(x =>
                                $state.submission.map(y => y.id).includes(x.id)
                              )
                              // which have filesAbo
                              .filter(x =>
                                $state.filesAbdo
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaLesion3"}
                          data-plasmic-override={overrides.traumaLesion3}
                          alt={""}
                          className={classNames(sty.traumaLesion3)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"307px"}
                          height={"320px"}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_abdomen/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={"307px"}
                        />
                      );
                    })}
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (
                            $queries.getOptions.data
                              // is selected
                              .filter(
                                x =>
                                  $state.subSubmission
                                    .map(y => y.id)
                                    .includes(x.id) ||
                                  $state.submissionEndometriome
                                    .map(y => y.id)
                                    .includes(x.id)
                              )
                              // has abo images
                              .filter(x =>
                                $state.filesAbdo
                                  .map(y => y.name)
                                  .includes(x.image_trauma)
                              )
                              // map images
                              .map(x => x.image_trauma)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          data-plasmic-name={"traumaOptions3"}
                          data-plasmic-override={overrides.traumaOptions3}
                          alt={""}
                          className={classNames(sty.traumaOptions3)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          height={"320"}
                          key={currentIndex}
                          src={(() => {
                            try {
                              return (
                                "https://dxfrrqlphlalfpaevhmc.supabase.co/storage/v1/object/public/lesions/image_map/image_POV_abdomen/" +
                                currentItem
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/electric_sifem_for_production/images/sagPlexusJpg.jpg",
                                  fullWidth: 1410,
                                  fullHeight: 1410,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                          width={"307"}
                        />
                      );
                    })}
                  </div>
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.step === "Score dPEI";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"score"}
                  data-plasmic-override={overrides.score}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.score, {
                    [sty.scoreglobal_locale_en]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  })}
                  id={"score"}
                >
                  <div
                    data-plasmic-name={"title3"}
                    data-plasmic-override={overrides.title3}
                    className={classNames(projectcss.all, sty.title3, {
                      [sty.title3global_locale_en]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    })}
                    id={"title"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__bDjKt)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/electric_sifem_for_production/images/image111Jpg.jpg",
                        fullWidth: 60,
                        fullHeight: 60,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__cbvd, {
                        [sty.freeBoxglobal_locale_en__cbvdK2ON]: hasVariant(
                          globalVariants,
                          "locale",
                          "en"
                        )
                      })}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n4Ia,
                          {
                            [sty.textglobal_locale_en__n4IaK2ON]: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "locale", "en") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.step === "Score dPEI"
                                  ? "Score dPEI"
                                  : $queries.getLesions.data.find(
                                      l => l.category_fr === $state.step
                                    ).category_en +
                                      ($state.step.includes("Antérolatéral")
                                        ? " (AL)"
                                        : $state.step.includes("Médiolatéral")
                                        ? " (ML)"
                                        : $state.step.includes("Postérolatéral")
                                        ? " (PL)"
                                        : $state.step.includes("Médiocentral")
                                        ? " (MC)"
                                        : $state.step.includes("Antérocentral")
                                        ? " (AC)"
                                        : $state.step.includes("Postérocentral")
                                        ? " (PC)"
                                        : $state.step.includes("Extrapelvien")
                                        ? " (EP)"
                                        : "");
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Map";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Score dPEI"
                        )}
                      </div>
                      <div
                        data-plasmic-name={"intro"}
                        data-plasmic-override={overrides.intro}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.intro,
                          {
                            [sty.introglobal_locale_en]: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                          }
                        )}
                      >
                        {hasVariant(globalVariants, "locale", "en") &&
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? " Deep Pelvic Endometriosis Index (dPEI) \nis an imaging scoring system \nfor the evaluation of pelvic endometriosis \nin women with suspected pelvic endometriosis. "
                          : hasVariant(globalVariants, "locale", "en")
                          ? " Deep Pelvic Endometriosis Index (dPEI) is an imaging scoring system \nfor the evaluation of pelvic endometriosis in women with suspected pelvic endometriosis. "
                          : hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Le deep Pelvic Endometriosis Index (dPEI) \nest un score d\u2019imagerie d\u2019\u00e9valuation de \nl\u2019endom\u00e9triose pelvienne pour les \npatientes suspect\u00e9es d\u2019endom\u00e9triose pelvienne."
                          : "Le deep Pelvic Endometriosis Index (dPEI) est un score d\u2019imagerie d\u2019\u00e9valuation de l\u2019endom\u00e9triose pelvienne pour les patientes suspect\u00e9es d\u2019endom\u00e9triose pelvienne."}
                      </div>
                    </div>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__i2HCr)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/electric_sifem_for_production/images/esru1Jpg.jpg",
                        fullWidth: 60,
                        fullHeight: 60,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"category2"}
                    data-plasmic-override={overrides.category2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.category2, {
                      [sty.category2global_locale_en]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    })}
                    id={"cat2"}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bArKt)}
                    >
                      <div
                        data-plasmic-name={"superficielle"}
                        data-plasmic-override={overrides.superficielle}
                        className={classNames(
                          projectcss.all,
                          sty.superficielle,
                          {
                            [sty.superficielleglobal_locale_en]: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bDjhp,
                            {
                              [sty.textglobal_locale_en__bDjhpK2ON]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en")
                            ? "Superficial"
                            : "Superficielle"}
                        </div>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.submission.filter(
                                x => x.category_fr === "Superficielle"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentsuper = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9B9WQ,
                                {
                                  [sty.textglobal_locale_en___9B9WQk2ON]:
                                    hasVariant(globalVariants, "locale", "en")
                                }
                              )}
                              key={currentIndex}
                            >
                              {hasVariant(globalVariants, "locale", "en") ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentsuper.name_en;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Aucun";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentsuper.name_fr;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Aucun";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          );
                        })}
                        {(() => {
                          try {
                            return (
                              $state.submission.filter(
                                x => x.category_fr === "Superficielle"
                              ).length == 0
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i7HfZ,
                              {
                                [sty.textglobal_locale_en__i7HfZk2ON]:
                                  hasVariant(globalVariants, "locale", "en")
                              }
                            )}
                          >
                            {hasVariant(globalVariants, "locale", "en")
                              ? "None"
                              : "Aucun"}
                          </div>
                        ) : null}
                      </div>
                      <div
                        data-plasmic-name={"superficielle3"}
                        data-plasmic-override={overrides.superficielle3}
                        className={classNames(
                          projectcss.all,
                          sty.superficielle3,
                          {
                            [sty.superficielle3global_locale_en]: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__btDqb,
                            {
                              [sty.textglobal_locale_en__btDqbk2ON]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en")
                            ? "Associated pathologies"
                            : "Pathologies associ\u00e9es"}
                        </div>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.submission.filter(
                                x => x.category_fr === "Pathologies associées"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bKcc0,
                                {
                                  [sty.textglobal_locale_en__bKcc0K2ON]:
                                    hasVariant(globalVariants, "locale", "en")
                                }
                              )}
                              key={currentIndex}
                            >
                              {hasVariant(globalVariants, "locale", "en") ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.name_en;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.name_fr;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          );
                        })}
                        {(() => {
                          try {
                            return (
                              $state.submission.filter(
                                x => x.category_fr === "Pathologies associées"
                              ).length == 0
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tAwTz,
                              {
                                [sty.textglobal_locale_en__tAwTzK2ON]:
                                  hasVariant(globalVariants, "locale", "en")
                              }
                            )}
                          >
                            {hasVariant(globalVariants, "locale", "en")
                              ? "None"
                              : "Aucun"}
                          </div>
                        ) : null}
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__syNje)}
                    >
                      <div
                        data-plasmic-name={"annexDroite"}
                        data-plasmic-override={overrides.annexDroite}
                        className={classNames(projectcss.all, sty.annexDroite, {
                          [sty.annexDroiteglobal_locale_en]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        })}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__djrDc,
                            {
                              [sty.textglobal_locale_en__djrDck2ON]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en")
                            ? "Adnexal right"
                            : "Annexielle droit"}
                        </div>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.submission.filter(
                                x => x.category_fr === "Annexielle > côté droit"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qxZGa
                              )}
                              key={currentIndex}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__s6HUc,
                                  {
                                    [sty.textglobal_locale_en__s6HUcK2ON]:
                                      hasVariant(globalVariants, "locale", "en")
                                  }
                                )}
                              >
                                {hasVariant(globalVariants, "locale", "en") ? (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name_en;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name_fr;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                )}
                              </div>
                              {(() => {
                                try {
                                  return (
                                    currentItem.name_fr ===
                                    "Endométriome (>1 cm)"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                                ? (_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $state.submissionEndometriome;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                    const currentEndo = __plasmic_item_1;
                                    const currentEndoIndex = __plasmic_idx_1;
                                    return (
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"endometriome2"}
                                        data-plasmic-override={
                                          overrides.endometriome2
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.endometriome2
                                        )}
                                        key={currentEndoIndex}
                                      >
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"badge2"}
                                          data-plasmic-override={
                                            overrides.badge2
                                          }
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.badge2
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"text7"}
                                            data-plasmic-override={
                                              overrides.text7
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text7,
                                              {
                                                [sty.text7global_locale_en]:
                                                  hasVariant(
                                                    globalVariants,
                                                    "locale",
                                                    "en"
                                                  )
                                              }
                                            )}
                                          >
                                            {hasVariant(
                                              globalVariants,
                                              "locale",
                                              "en"
                                            ) ? (
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      "Endometrioma " +
                                                      (currentEndoIndex + 1)
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "Endom\u00e9triome 1";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            ) : (
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      "Endométriome " +
                                                      (currentEndoIndex + 1)
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "Endom\u00e9triome 1";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            )}
                                          </div>
                                        </Stack__>
                                        <div
                                          data-plasmic-name={"longueur2"}
                                          data-plasmic-override={
                                            overrides.longueur2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.longueur2
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $queries.getOptions.data.find(
                                                  y => y.id === currentEndo.id
                                                ).name_fr;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "2 cm";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </Stack__>
                                    );
                                  })
                                : null}
                            </div>
                          );
                        })}
                        {(() => {
                          try {
                            return (
                              $state.submission.filter(
                                x => x.category_fr === "Annexielle > côté droit"
                              ).length == 0
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__npmxv,
                              {
                                [sty.textglobal_locale_en__npmxvk2ON]:
                                  hasVariant(globalVariants, "locale", "en")
                              }
                            )}
                          >
                            {hasVariant(globalVariants, "locale", "en")
                              ? "None"
                              : "Aucun"}
                          </div>
                        ) : null}
                      </div>
                      <div
                        data-plasmic-name={"annexDroite2"}
                        data-plasmic-override={overrides.annexDroite2}
                        className={classNames(
                          projectcss.all,
                          sty.annexDroite2,
                          {
                            [sty.annexDroite2global_locale_en]: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pfMul,
                            {
                              [sty.textglobal_locale_en__pfMulk2ON]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en")
                            ? "Adnexal left"
                            : "Annexielle gauche"}
                        </div>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.submission.filter(
                                x =>
                                  x.category_fr === "Annexielle > côté gauche"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__belAz
                              )}
                              key={currentIndex}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gn8N1,
                                  {
                                    [sty.textglobal_locale_en__gn8N1K2ON]:
                                      hasVariant(globalVariants, "locale", "en")
                                  }
                                )}
                              >
                                {hasVariant(globalVariants, "locale", "en") ? (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name_en;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.name_fr;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                )}
                              </div>
                              {(() => {
                                try {
                                  return (
                                    currentItem.name_fr ===
                                    "Endométriome (>1 cm)"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                                ? (_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $state.submissionEndometriome;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                    const currentEndo = __plasmic_item_1;
                                    const currentEndoIndex = __plasmic_idx_1;
                                    return (
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"endometriome3"}
                                        data-plasmic-override={
                                          overrides.endometriome3
                                        }
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.endometriome3
                                        )}
                                        key={currentEndoIndex}
                                      >
                                        <Stack__
                                          as={"div"}
                                          data-plasmic-name={"badge3"}
                                          data-plasmic-override={
                                            overrides.badge3
                                          }
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.badge3
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"text8"}
                                            data-plasmic-override={
                                              overrides.text8
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text8,
                                              {
                                                [sty.text8global_locale_en]:
                                                  hasVariant(
                                                    globalVariants,
                                                    "locale",
                                                    "en"
                                                  )
                                              }
                                            )}
                                          >
                                            {hasVariant(
                                              globalVariants,
                                              "locale",
                                              "en"
                                            ) ? (
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      "Endometrioma (>1 cm) " +
                                                      (currentEndoIndex + 1)
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "Endom\u00e9triome 1";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            ) : (
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      "Endométriome " +
                                                      (currentEndoIndex + 1)
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "Endom\u00e9triome 1";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            )}
                                          </div>
                                        </Stack__>
                                        <div
                                          data-plasmic-name={"longueur3"}
                                          data-plasmic-override={
                                            overrides.longueur3
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.longueur3
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $queries.getOptions.data.find(
                                                  y => y.id === currentEndo.id
                                                ).name_fr;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "2 cm";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </Stack__>
                                    );
                                  })
                                : null}
                            </div>
                          );
                        })}
                        {(() => {
                          try {
                            return (
                              $state.submission.filter(
                                x =>
                                  x.category_fr === "Annexielle > côté gauche"
                              ).length == 0
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__k6WDq,
                              {
                                [sty.textglobal_locale_en__k6WDqK2ON]:
                                  hasVariant(globalVariants, "locale", "en")
                              }
                            )}
                          >
                            {hasVariant(globalVariants, "locale", "en")
                              ? "None"
                              : "Aucun"}
                          </div>
                        ) : null}
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"res"}
                    data-plasmic-override={overrides.res}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.res)}
                    id={"res"}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"resultat"}
                      data-plasmic-override={overrides.resultat}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.resultat)}
                    >
                      {(() => {
                        try {
                          return !$state.print;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"titleResult"}
                          data-plasmic-override={overrides.titleResult}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.titleResult
                          )}
                        >
                          <div
                            data-plasmic-name={"result"}
                            data-plasmic-override={overrides.result}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.result,
                              {
                                [sty.resultglobal_locale_en]: hasVariant(
                                  globalVariants,
                                  "locale",
                                  "en"
                                )
                              }
                            )}
                          >
                            {hasVariant(globalVariants, "locale", "en")
                              ? "RESULTS"
                              : "R\u00c9SULTAT"}
                          </div>
                        </Stack__>
                      ) : null}
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"content"}
                        data-plasmic-override={overrides.content}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.content)}
                      >
                        <div
                          data-plasmic-name={"password17"}
                          data-plasmic-override={overrides.password17}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.password17,
                            {
                              [sty.password17global_locale_en]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en")
                            ? "The dPEI score is the first MRI score to be correlated with length of operation, hospital stay, and postoperative complications."
                            : "Le score dPEI est le premier score IRM \u00e0 \u00eatre corr\u00e9l\u00e9 avec la dur\u00e9e de l\u2019op\u00e9ration, du s\u00e9jour \u00e0 l\u2019h\u00f4pital et des complications postop\u00e9ratoires."}
                        </div>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"scoreContent"}
                          data-plasmic-override={overrides.scoreContent}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.scoreContent,
                            {
                              [sty.scoreContentglobal_locale_en]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          <div
                            data-plasmic-name={"progressBar"}
                            data-plasmic-override={overrides.progressBar}
                            className={classNames(
                              projectcss.all,
                              sty.progressBar
                            )}
                          >
                            <div
                              data-plasmic-name={"bar"}
                              data-plasmic-override={overrides.bar}
                              className={classNames(projectcss.all, sty.bar)}
                            >
                              <div
                                data-plasmic-name={"frame1437254354"}
                                data-plasmic-override={
                                  overrides.frame1437254354
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.frame1437254354
                                )}
                              >
                                <div
                                  data-plasmic-name={"frame1437254355"}
                                  data-plasmic-override={
                                    overrides.frame1437254355
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame1437254355
                                  )}
                                />

                                <div
                                  data-plasmic-name={"frame1437254356"}
                                  data-plasmic-override={
                                    overrides.frame1437254356
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.frame1437254356
                                  )}
                                />
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xFgt2
                                )}
                              >
                                {"0"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ijY2O,
                                  {
                                    [sty.textglobal_locale_en__ijY2Ok2ON]:
                                      hasVariant(globalVariants, "locale", "en")
                                  }
                                )}
                              >
                                {"2"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__geb4N
                                )}
                              >
                                {"4"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__czfjt
                                )}
                              >
                                {"9"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5Pc
                                )}
                              >
                                {"13"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xivm1
                                )}
                              >
                                {"18"}
                              </div>
                              <Ellipse15Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ixHb8
                                )}
                                role={"img"}
                              />

                              <Ellipse15Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__djEmw
                                )}
                                role={"img"}
                              />

                              <Ellipse15Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__caPpg
                                )}
                                role={"img"}
                              />

                              <Ellipse15Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vp321
                                )}
                                role={"img"}
                              />

                              <Ellipse15Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___2Bwq6
                                )}
                                role={"img"}
                              />

                              <Ellipse15Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uqMQy
                                )}
                                role={"img"}
                              />
                            </div>
                            <Embed
                              data-plasmic-name={"embedHtml"}
                              data-plasmic-override={overrides.embedHtml}
                              className={classNames(
                                "__wab_instance",
                                sty.embedHtml
                              )}
                              code={(() => {
                                try {
                                  return (
                                    "<svg width='32' height='32' viewBox='0 0 62 88' xmlns='http://www.w3.org/2000/svg' style='transform: translate3d(" +
                                    ($state.score2 * 13 - 16) +
                                    "px, 0, 0);'> <path  d='M31 0 C32.5 0 34 1 35 2.5 L61 51.5 C62 53.5 61 56 59 57 H3 C1 56 0 53.5 1 51.5 L27 2.5 C28 1 29.5 0 31 0 Z' fill='#d65d82' /></svg>"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\"<svg width='32' height='32' viewBox='0 0 62 88' xmlns='http://www.w3.org/2000/svg' style='transform: translate3d(20px, 0, 0);'> <path  d='M31 0 C32.5 0 34 1 35 2.5 L61 51.5 C62 53.5 61 56 59 57 H3 C1 56 0 53.5 1 51.5 L27 2.5 C28 1 29.5 0 31 0 Z' fill='#d65d82' /></svg>\"";
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"depi"}
                            data-plasmic-override={overrides.depi}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.depi)}
                          >
                            <div
                              data-plasmic-name={"password18"}
                              data-plasmic-override={overrides.password18}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.password18,
                                {
                                  [sty.password18global_locale_en]: hasVariant(
                                    globalVariants,
                                    "locale",
                                    "en"
                                  )
                                }
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return "dPEI = " + $state.score2;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "dPEI = 1";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wjfT,
                              {
                                [sty.textglobal_locale_en__wjfTK2ON]:
                                  hasVariant(globalVariants, "locale", "en")
                              }
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    new Date()
                                      .toLocaleString("fr-FR", {
                                        timeZone: "Europe/Paris"
                                      })
                                      // .replace(/[/]/g, "_")
                                      .slice(0, 16)
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"categoryV2"}
                      data-plasmic-override={overrides.categoryV2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.categoryV2)}
                    >
                      <div
                        data-plasmic-name={"left2"}
                        data-plasmic-override={overrides.left2}
                        className={classNames(projectcss.all, sty.left2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2UnjZ,
                            {
                              [sty.textglobal_locale_en___2UnjZk2ON]:
                                hasVariant(globalVariants, "locale", "en")
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en")
                            ? "Lesions"
                            : "L\u00e9sions"}
                        </div>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.submission.filter(
                                x =>
                                  x.category_fr !== "Pathologies associées" &&
                                  x.category_fr !== "Superficielle" &&
                                  x.category_fr !==
                                    "Annexielle > côté gauche" &&
                                  x.category_fr !== "Annexielle > côté droit"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__l6LUv,
                                {
                                  [sty.textglobal_locale_en__l6LUvK2ON]:
                                    hasVariant(globalVariants, "locale", "en")
                                }
                              )}
                              key={currentIndex}
                            >
                              {hasVariant(globalVariants, "locale", "en") ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.name_en;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.name_fr;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          );
                        })}
                      </div>
                      <div
                        data-plasmic-name={"left"}
                        data-plasmic-override={overrides.left}
                        className={classNames(projectcss.all, sty.left)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__do0N,
                            {
                              [sty.textglobal_locale_en__do0NK2ON]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en")
                            ? "Affected compartments"
                            : "Compartiments atteints"}
                        </div>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.cat.filter(
                                x =>
                                  x.category_fr !== "Pathologies associées" &&
                                  x.category_fr !== "Superficielle" &&
                                  x.category_fr !==
                                    "Annexielle > côté gauche" &&
                                  x.category_fr !== "Annexielle > côté droit"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__edxa8,
                                {
                                  [sty.textglobal_locale_en__edxa8K2ON]:
                                    hasVariant(globalVariants, "locale", "en")
                                }
                              )}
                              key={currentIndex}
                            >
                              {hasVariant(globalVariants, "locale", "en") ? (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.category_en;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              ) : (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.category_fr;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"buttons"}
                    data-plasmic-override={overrides.buttons}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttons)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"frame1437254358"}
                      data-plasmic-override={overrides.frame1437254358}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.frame1437254358,
                        {
                          [sty.frame1437254358global_locale_en]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        }
                      )}
                    >
                      <Button
                        data-plasmic-name={"button3"}
                        data-plasmic-override={overrides.button3}
                        className={classNames("__wab_instance", sty.button3, {
                          [sty.button3global_locale_en]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        })}
                        onClick={async event => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: ["info", "Impression en cours..."]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updatePrint"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["print"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePrint"] != null &&
                            typeof $steps["updatePrint"] === "object" &&
                            typeof $steps["updatePrint"].then === "function"
                          ) {
                            $steps["updatePrint"] = await $steps["updatePrint"];
                          }

                          $steps["updatePrintType"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["printType"]
                                  },
                                  operation: 0,
                                  value: "pdf"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePrintType"] != null &&
                            typeof $steps["updatePrintType"] === "object" &&
                            typeof $steps["updatePrintType"].then === "function"
                          ) {
                            $steps["updatePrintType"] = await $steps[
                              "updatePrintType"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return setTimeout(() => {}, 800);
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["runActionOnExportToPdf2"] = true
                            ? (() => {
                                const actionArgs = {
                                  tplRef: "expPdf",
                                  action: "export"
                                };
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnExportToPdf2"] != null &&
                            typeof $steps["runActionOnExportToPdf2"] ===
                              "object" &&
                            typeof $steps["runActionOnExportToPdf2"].then ===
                              "function"
                          ) {
                            $steps["runActionOnExportToPdf2"] = await $steps[
                              "runActionOnExportToPdf2"
                            ];
                          }

                          $steps["updatePrint2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["print"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePrint2"] != null &&
                            typeof $steps["updatePrint2"] === "object" &&
                            typeof $steps["updatePrint2"].then === "function"
                          ) {
                            $steps["updatePrint2"] = await $steps[
                              "updatePrint2"
                            ];
                          }
                        }}
                        onShapeChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button3",
                              "shape"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        shape={generateStateValueProp($state, [
                          "button3",
                          "shape"
                        ])}
                        showStartIcon={true}
                        startIcon={
                          <Vector7SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kqVUu
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gIZX,
                            {
                              [sty.textglobal_locale_en__gIZXk2ON]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en")
                            ? "Download PDF"
                            : "T\u00e9l\u00e9charger PDF"}
                        </div>
                      </Button>
                      <Button
                        data-plasmic-name={"button5"}
                        data-plasmic-override={overrides.button5}
                        className={classNames("__wab_instance", sty.button5, {
                          [sty.button5global_locale_en]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        })}
                        onClick={async event => {
                          const $steps = {};

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: ["info", "Impression en cours..."]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updatePrint"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["print"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePrint"] != null &&
                            typeof $steps["updatePrint"] === "object" &&
                            typeof $steps["updatePrint"].then === "function"
                          ) {
                            $steps["updatePrint"] = await $steps["updatePrint"];
                          }

                          $steps["updatePrintType"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["printType"]
                                  },
                                  operation: 0,
                                  value: "png"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePrintType"] != null &&
                            typeof $steps["updatePrintType"] === "object" &&
                            typeof $steps["updatePrintType"].then === "function"
                          ) {
                            $steps["updatePrintType"] = await $steps[
                              "updatePrintType"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return setTimeout(() => {}, 500);
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["runActionOnExportToPdf2"] = true
                            ? (() => {
                                const actionArgs = {
                                  tplRef: "expPdf",
                                  action: "export"
                                };
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnExportToPdf2"] != null &&
                            typeof $steps["runActionOnExportToPdf2"] ===
                              "object" &&
                            typeof $steps["runActionOnExportToPdf2"].then ===
                              "function"
                          ) {
                            $steps["runActionOnExportToPdf2"] = await $steps[
                              "runActionOnExportToPdf2"
                            ];
                          }

                          $steps["updatePrint2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["print"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePrint2"] != null &&
                            typeof $steps["updatePrint2"] === "object" &&
                            typeof $steps["updatePrint2"].then === "function"
                          ) {
                            $steps["updatePrint2"] = await $steps[
                              "updatePrint2"
                            ];
                          }
                        }}
                        onShapeChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button5",
                              "shape"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        shape={generateStateValueProp($state, [
                          "button5",
                          "shape"
                        ])}
                        showStartIcon={true}
                        startIcon={
                          <FilePngIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wegkj
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__e0Qe9,
                            {
                              [sty.textglobal_locale_en__e0Qe9K2ON]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        >
                          {hasVariant(globalVariants, "locale", "en")
                            ? "Download PNG"
                            : "T\u00e9l\u00e9charger PNG"}
                        </div>
                      </Button>
                    </Stack__>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"ress2"}
                    data-plasmic-override={overrides.ress2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.ress2, {
                      [sty.ress2global_locale_en]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    })}
                    id={"ress"}
                  >
                    <div
                      data-plasmic-name={"password19"}
                      data-plasmic-override={overrides.password19}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.password19,
                        {
                          [sty.password19global_locale_en]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "locale", "en")
                        ? "dPEI is a marker of the severity of the disease by predicting operating time, hospital stay and the risk of post operative complications."
                        : "Le score dPEI pr\u00e9dit la complexit\u00e9 de la maladie et permet de mieux orienter au sein des fili\u00e8res."}
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.ressources;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          data-plasmic-name={"ress"}
                          data-plasmic-override={overrides.ress}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.ress,
                            {
                              [sty.ressglobal_locale_en]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                          key={currentIndex}
                        >
                          {hasVariant(globalVariants, "locale", "en") ? (
                            "For more information on interpreting the dPEI score, and to find the expert center in your region: click here."
                          ) : hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Nom de la filière : " +
                                    currentItem.name +
                                    "\n" +
                                    "Site web : " +
                                    currentItem.website +
                                    "\n" +
                                    "Région : " +
                                    currentItem.region
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Pour plus d\u2019information sur l\u201dinterpr\u00e9tation du score dPEI, et pour trouver le centre expert de votre r\u00e9gion : ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Nom de la filière : " +
                                    currentItem.name +
                                    "\n" +
                                    "Site web : " +
                                    currentItem.website +
                                    "\n" +
                                    "Région : " +
                                    currentItem.region
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Pour plus d\u2019information sur l\u201dinterpr\u00e9tation du score dPEI, et pour trouver le centre expert de votre r\u00e9gion : ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      );
                    })}
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.table2, {
                          [sty.table2global_locale_en]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        }),
                        data: (() => {
                          try {
                            return $state.ressources;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        hideColumnPicker: true,
                        hideDensity: true,
                        hideExports: true,
                        hideSearch: true,
                        onRowSelectionChanged: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKey",
                            ["table2", "selectedRowKey"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRow",
                            ["table2", "selectedRow"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRows",
                            ["table2", "selectedRows"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedRowKeys",
                            ["table2", "selectedRowKeys"],
                            RichTable_Helpers
                          ).apply(null, eventArgs);
                        },
                        pagination: false,
                        scopeClassName: sty["table2__instance"],
                        selectedRowKey: generateStateValueProp($state, [
                          "table2",
                          "selectedRowKey"
                        ]),
                        selectedRowKeys: generateStateValueProp($state, [
                          "table2",
                          "selectedRowKeys"
                        ]),
                        themeResetClassName: classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "selectedRowKey",
                            plasmicStateName: "table2.selectedRowKey"
                          },
                          {
                            name: "selectedRow",
                            plasmicStateName: "table2.selectedRow"
                          },
                          {
                            name: "selectedRows",
                            plasmicStateName: "table2.selectedRows"
                          },
                          {
                            name: "selectedRowKeys",
                            plasmicStateName: "table2.selectedRowKeys"
                          }
                        ],
                        [],
                        RichTable_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <RichTable
                          data-plasmic-name={"table2"}
                          data-plasmic-override={overrides.table2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </Stack__>
                </Stack__>
              ) : null}
            </div>
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.cat;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentCat = __plasmic_item_0;
            const currentCatIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                data-plasmic-name={"category"}
                data-plasmic-override={overrides.category}
                hasGap={true}
                className={classNames(projectcss.all, sty.category, {
                  [sty.categoryglobal_locale_en]: hasVariant(
                    globalVariants,
                    "locale",
                    "en"
                  )
                })}
                key={currentCatIndex}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"title2"}
                  data-plasmic-override={overrides.title2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.title2)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (currentCat[0].visible =
                                !currentCat[0].visible);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <div
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.title,
                      {
                        [sty.titleglobal_locale_en]: hasVariant(
                          globalVariants,
                          "locale",
                          "en"
                        )
                      }
                    )}
                  >
                    {hasVariant(globalVariants, "locale", "en") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentCat.category_en;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "SUPERFICIELLE";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentCat.category_fr;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "SUPERFICIELLE";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    data-plasmic-name={"fleches"}
                    data-plasmic-override={overrides.fleches}
                    className={classNames(projectcss.all, sty.fleches)}
                  >
                    {(() => {
                      try {
                        return currentCat[0].visible;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Vector5SvgIcon
                        className={classNames(projectcss.all, sty.svg__xIufw)}
                        role={"img"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return !currentCat[0].visible;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <Vector6SvgIcon
                        className={classNames(projectcss.all, sty.svg__iMTba)}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                </Stack__>
                {(() => {
                  try {
                    return currentCat[0].visible;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.submission.filter(
                            x => x.category_fr === currentCat.category_fr
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_1, __plasmic_idx_1) => {
                      const currentLesion = __plasmic_item_1;
                      const currentLesionIndex = __plasmic_idx_1;
                      return (
                        <div
                          data-plasmic-name={"content2"}
                          data-plasmic-override={overrides.content2}
                          className={classNames(projectcss.all, sty.content2, {
                            [sty.content2global_locale_en]: hasVariant(
                              globalVariants,
                              "locale",
                              "en"
                            )
                          })}
                          key={currentLesionIndex}
                        >
                          {(() => {
                            const child$Props = {
                              isChecked:
                                generateStateValueProp($state, [
                                  "checkbox2",
                                  __plasmic_idx_0,
                                  __plasmic_idx_1,
                                  "isChecked"
                                ]) ?? false,
                              isDisabled: true,
                              onChange: async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "checkbox2",
                                    __plasmic_idx_0,
                                    __plasmic_idx_1,
                                    "isChecked"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }

                                (async isChecked => {
                                  const $steps = {};

                                  $steps["subOthers"] = false
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              return ($state.subSubmission =
                                                $state.subSubmission.filter(
                                                  item =>
                                                    item.currentItem2
                                                      .lesion_id !==
                                                    currentLesion.id
                                                ));
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["subOthers"] != null &&
                                    typeof $steps["subOthers"] === "object" &&
                                    typeof $steps["subOthers"].then ===
                                      "function"
                                  ) {
                                    $steps["subOthers"] = await $steps[
                                      "subOthers"
                                    ];
                                  }

                                  $steps["runCode"] = false
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              const index =
                                                $state.submission.findIndex(
                                                  item =>
                                                    item.currentItem.id ===
                                                    currentLesion.id
                                                );
                                              if (index === -1) {
                                                $state.submission.push({
                                                  currentItem
                                                });
                                              } else {
                                                $state.submission.splice(
                                                  index,
                                                  1
                                                );
                                              }
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["subEndo"] = false
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              const existingIndex =
                                                $state.submissionEndometriome.findIndex(
                                                  item =>
                                                    item.lesion_id ===
                                                    currentItem.id
                                                );
                                              if (existingIndex !== -1) {
                                                $state.submissionEndometriome.splice(
                                                  existingIndex,
                                                  1
                                                );
                                              } else {
                                                $state.submissionEndometriome.push(
                                                  {
                                                    lesion_id: currentItem.id,
                                                    id: $queries.getOptions.data.find(
                                                      x =>
                                                        x.lesion_id ===
                                                        currentItem.id
                                                    ).id
                                                  }
                                                );
                                              }
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["subEndo"] != null &&
                                    typeof $steps["subEndo"] === "object" &&
                                    typeof $steps["subEndo"].then === "function"
                                  ) {
                                    $steps["subEndo"] = await $steps["subEndo"];
                                  }
                                }).apply(null, eventArgs);
                              }
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "checkbox2[][].isChecked",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return $state.submission.some(
                                          item => item.id === currentLesion.id
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0, __plasmic_idx_1]
                            );
                            return (
                              <Checkbox
                                data-plasmic-name={"checkbox2"}
                                data-plasmic-override={overrides.checkbox2}
                                {...child$Props}
                              >
                                {hasVariant(globalVariants, "locale", "en") ? (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentLesion.name_en;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Absence d'endom\u00e9triose superficielle visible";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentLesion.name_fr;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Absence d'endom\u00e9triose superficielle visible";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                )}
                              </Checkbox>
                            );
                          })()}
                          {(() => {
                            try {
                              return (
                                currentLesion.name_fr === "Endométriome (>1 cm)"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $state.submissionEndometriome.filter(
                                      x => x.lesion_id === currentLesion.id
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_2, __plasmic_idx_2) => {
                                const currentEndo = __plasmic_item_2;
                                const currentEndoIndex = __plasmic_idx_2;
                                return (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"endometriome"}
                                    data-plasmic-override={
                                      overrides.endometriome
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.endometriome
                                    )}
                                    key={currentEndoIndex}
                                  >
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"badge"}
                                      data-plasmic-override={overrides.badge}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.badge
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"text"}
                                        data-plasmic-override={overrides.text}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text,
                                          {
                                            [sty.textglobal_locale_en]:
                                              hasVariant(
                                                globalVariants,
                                                "locale",
                                                "en"
                                              )
                                          }
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "locale",
                                          "en"
                                        ) ? (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  "Endometrioma (>1 cm) " +
                                                  (currentEndoIndex + 1)
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Endom\u00e9triome 1";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        ) : (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  "Endométriome " +
                                                  (currentEndoIndex + 1)
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Endom\u00e9triome 1";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        )}
                                      </div>
                                    </Stack__>
                                    <div
                                      data-plasmic-name={"longueur"}
                                      data-plasmic-override={overrides.longueur}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.longueur
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $queries.getOptions.data.find(
                                              y => y.id === currentEndo.id
                                            ).name_fr;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "2 cm";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </Stack__>
                                );
                              })
                            : null}
                          {(() => {
                            try {
                              return (
                                $queries.getOptions.data.filter(
                                  x => x.lesion_id == currentLesion.id
                                ).length > 0 &&
                                currentLesion.id !== "10" &&
                                currentLesion.id !== "16"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $queries.getOptions.data.filter(
                                      x => x.lesion_id == currentLesion.id
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_2, __plasmic_idx_2) => {
                                const currentItem2 = __plasmic_item_2;
                                const currentIndex2 = __plasmic_idx_2;
                                return (() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.subCheckbox2,
                                      {
                                        [sty.subCheckbox2global_locale_en]:
                                          hasVariant(
                                            globalVariants,
                                            "locale",
                                            "en"
                                          )
                                      }
                                    ),
                                    isChecked:
                                      generateStateValueProp($state, [
                                        "subCheckbox2",
                                        __plasmic_idx_0,
                                        __plasmic_idx_1,
                                        __plasmic_idx_2,
                                        "isChecked"
                                      ]) ?? false,
                                    isDisabled: true,
                                    key: currentIndex2,
                                    onChange: async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "subCheckbox2",
                                          __plasmic_idx_0,
                                          __plasmic_idx_1,
                                          __plasmic_idx_2,
                                          "isChecked"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }

                                      (async isChecked => {
                                        const $steps = {};

                                        $steps["runCode"] = false
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    const index =
                                                      $state.subSubmission.findIndex(
                                                        item =>
                                                          item.currentItem2
                                                            .id ===
                                                          currentItem2.id
                                                      );
                                                    if (index === -1) {
                                                      $state.subSubmission.push(
                                                        { currentItem2 }
                                                      );
                                                    } else {
                                                      $state.subSubmission.splice(
                                                        index,
                                                        1
                                                      );
                                                    }
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }).apply(null, eventArgs);
                                    }
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "subCheckbox2[][][].isChecked",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $state.subSubmission.some(
                                                item =>
                                                  item.id === currentItem2.id
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [
                                      __plasmic_idx_0,
                                      __plasmic_idx_1,
                                      __plasmic_idx_2
                                    ]
                                  );
                                  return (
                                    <Checkbox
                                      data-plasmic-name={"subCheckbox2"}
                                      data-plasmic-override={
                                        overrides.subCheckbox2
                                      }
                                      {...child$Props}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "locale",
                                        "en"
                                      ) ? (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem2.name_en;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Absence d'endom\u00e9triose superficielle visible";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      ) : (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem2.name_fr;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Absence d'endom\u00e9triose superficielle visible";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      )}
                                    </Checkbox>
                                  );
                                })();
                              })
                            : null}
                        </div>
                      );
                    })
                  : null}
              </Stack__>
            );
          })}
          <Stack__
            as={"div"}
            data-plasmic-name={"categoryMobile"}
            data-plasmic-override={overrides.categoryMobile}
            hasGap={true}
            className={classNames(projectcss.all, sty.categoryMobile, {
              [sty.categoryMobileglobal_locale_en]: hasVariant(
                globalVariants,
                "locale",
                "en"
              )
            })}
            id={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "cat3"
                : "cat3"
            }
          >
            <div
              data-plasmic-name={"superficielle2"}
              data-plasmic-override={overrides.superficielle2}
              className={classNames(projectcss.all, sty.superficielle2, {
                [sty.superficielle2global_locale_en]: hasVariant(
                  globalVariants,
                  "locale",
                  "en"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5WweM,
                  {
                    [sty.textglobal_locale_en___5WweMk2ON]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "locale", "en")
                  ? "Superficial"
                  : "Superficielle"}
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.submission.filter(
                      x => x.category_fr === "Superficielle"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentsuper = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__so5V,
                      {
                        [sty.textglobal_locale_en__so5VK2ON]: hasVariant(
                          globalVariants,
                          "locale",
                          "en"
                        )
                      }
                    )}
                    key={currentIndex}
                  >
                    {hasVariant(globalVariants, "locale", "en") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentsuper.name_en;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Aucun";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentsuper.name_fr;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Aucun";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                );
              })}
              {(() => {
                try {
                  return (
                    $state.submission.filter(
                      x => x.category_fr === "Superficielle"
                    ).length == 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g6JsY,
                    {
                      [sty.textglobal_locale_en__g6JsYk2ON]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "locale", "en")
                    ? "None"
                    : "Aucun"}
                </div>
              ) : null}
            </div>
            <div
              data-plasmic-name={"annexDroite3"}
              data-plasmic-override={overrides.annexDroite3}
              className={classNames(projectcss.all, sty.annexDroite3, {
                [sty.annexDroite3global_locale_en]: hasVariant(
                  globalVariants,
                  "locale",
                  "en"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qxlXv,
                  {
                    [sty.textglobal_locale_en__qxlXvk2ON]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "locale", "en")
                  ? "Adnexal > left side"
                  : "Annexielle droit"}
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.submission.filter(
                      x => x.category_fr === "Annexielle > côté droit"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wShgi)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lgo4N,
                        {
                          [sty.textglobal_locale_en__lgo4Nk2ON]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "locale", "en") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name_en;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name_fr;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                    {(() => {
                      try {
                        return currentItem.name_fr === "Endométriome (>1 cm)";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                      ? (_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.submissionEndometriome;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_1, __plasmic_idx_1) => {
                          const currentEndo = __plasmic_item_1;
                          const currentEndoIndex = __plasmic_idx_1;
                          return (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"endometriome4"}
                              data-plasmic-override={overrides.endometriome4}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.endometriome4
                              )}
                              key={currentEndoIndex}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"badge4"}
                                data-plasmic-override={overrides.badge4}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.badge4
                                )}
                              >
                                <div
                                  data-plasmic-name={"text9"}
                                  data-plasmic-override={overrides.text9}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text9,
                                    {
                                      [sty.text9global_locale_en]: hasVariant(
                                        globalVariants,
                                        "locale",
                                        "en"
                                      )
                                    }
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "locale",
                                    "en"
                                  ) ? (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            "Endometrioma " +
                                            (currentEndoIndex + 1)
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Endom\u00e9triome 1";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            "Endométriome " +
                                            (currentEndoIndex + 1)
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Endom\u00e9triome 1";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  )}
                                </div>
                              </Stack__>
                              <div
                                data-plasmic-name={"longueur4"}
                                data-plasmic-override={overrides.longueur4}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.longueur4
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $queries.getOptions.data.find(
                                        y => y.id === currentEndo.id
                                      ).name_fr;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "2 cm";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                          );
                        })
                      : null}
                  </div>
                );
              })}
              {(() => {
                try {
                  return (
                    $state.submission.filter(
                      x => x.category_fr === "Annexielle > côté droit"
                    ).length == 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eqfxz,
                    {
                      [sty.textglobal_locale_en__eqfxzK2ON]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "locale", "en")
                    ? "None"
                    : "Aucun"}
                </div>
              ) : null}
            </div>
            <div
              data-plasmic-name={"annexDroite4"}
              data-plasmic-override={overrides.annexDroite4}
              className={classNames(projectcss.all, sty.annexDroite4, {
                [sty.annexDroite4global_locale_en]: hasVariant(
                  globalVariants,
                  "locale",
                  "en"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k79SI,
                  {
                    [sty.textglobal_locale_en__k79SIk2ON]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "locale", "en")
                  ? "Adnexal > left side"
                  : "Annexielle gauche"}
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.submission.filter(
                      x => x.category_fr === "Annexielle > côté gauche"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dTaz8)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g2IA,
                        {
                          [sty.textglobal_locale_en__g2IAk2ON]: hasVariant(
                            globalVariants,
                            "locale",
                            "en"
                          )
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "locale", "en") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name_en;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name_fr;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                    {(() => {
                      try {
                        return currentItem.name_fr === "Endométriome (>1 cm)";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                      ? (_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.submissionEndometriome;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_1, __plasmic_idx_1) => {
                          const currentEndo = __plasmic_item_1;
                          const currentEndoIndex = __plasmic_idx_1;
                          return (
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"endometriome5"}
                              data-plasmic-override={overrides.endometriome5}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.endometriome5
                              )}
                              key={currentEndoIndex}
                            >
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"badge5"}
                                data-plasmic-override={overrides.badge5}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.badge5
                                )}
                              >
                                <div
                                  data-plasmic-name={"text10"}
                                  data-plasmic-override={overrides.text10}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text10,
                                    {
                                      [sty.text10global_locale_en]: hasVariant(
                                        globalVariants,
                                        "locale",
                                        "en"
                                      )
                                    }
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "locale",
                                    "en"
                                  ) ? (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            "Endometrioma (>1 cm) " +
                                            (currentEndoIndex + 1)
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Endom\u00e9triome 1";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            "Endométriome " +
                                            (currentEndoIndex + 1)
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Endom\u00e9triome 1";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  )}
                                </div>
                              </Stack__>
                              <div
                                data-plasmic-name={"longueur5"}
                                data-plasmic-override={overrides.longueur5}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.longueur5
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $queries.getOptions.data.find(
                                        y => y.id === currentEndo.id
                                      ).name_fr;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "2 cm";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                          );
                        })
                      : null}
                  </div>
                );
              })}
              {(() => {
                try {
                  return (
                    $state.submission.filter(
                      x => x.category_fr === "Annexielle > côté gauche"
                    ).length == 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r3Du,
                    {
                      [sty.textglobal_locale_en__r3DuK2ON]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "locale", "en")
                    ? "None"
                    : "Aucun"}
                </div>
              ) : null}
            </div>
            <div
              data-plasmic-name={"superficielle4"}
              data-plasmic-override={overrides.superficielle4}
              className={classNames(projectcss.all, sty.superficielle4, {
                [sty.superficielle4global_locale_en]: hasVariant(
                  globalVariants,
                  "locale",
                  "en"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zhuEm,
                  {
                    [sty.textglobal_locale_en__zhuEmK2ON]: hasVariant(
                      globalVariants,
                      "locale",
                      "en"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "locale", "en")
                  ? "Associated pathologies"
                  : "Pathologies associ\u00e9es"}
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.submission.filter(
                      x => x.category_fr === "Pathologies associées"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___185Vw,
                      {
                        [sty.textglobal_locale_en___185VwK2ON]: hasVariant(
                          globalVariants,
                          "locale",
                          "en"
                        )
                      }
                    )}
                    key={currentIndex}
                  >
                    {hasVariant(globalVariants, "locale", "en") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.name_en;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.name_fr;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                );
              })}
              {(() => {
                try {
                  return (
                    $state.submission.filter(
                      x => x.category_fr === "Pathologies associées"
                    ).length == 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xXt1P,
                    {
                      [sty.textglobal_locale_en__xXt1Pk2ON]: hasVariant(
                        globalVariants,
                        "locale",
                        "en"
                      )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "locale", "en")
                    ? "None"
                    : "Aucun"}
                </div>
              ) : null}
            </div>
          </Stack__>
          {(() => {
            try {
              return (
                $state.step === "Profonde" ||
                $queries.getLesions.data.find(
                  x => x.category_fr === $state.step
                ).macro_category_fr === "Profonde"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"navBar"}
              data-plasmic-override={overrides.navBar}
              className={classNames(projectcss.all, sty.navBar)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___6KwVw)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 0,
                          value: "Antérocentral"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <BtmNavbarTile
                  data-plasmic-name={"btmNavbarTile"}
                  data-plasmic-override={overrides.btmNavbarTile}
                  className={classNames("__wab_instance", sty.btmNavbarTile)}
                  frame1437254298={
                    <React.Fragment>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill19"}
                        data-plasmic-override={overrides.phGridFourFill19}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill19
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle74"}
                          data-plasmic-override={overrides.rectangle74}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle74
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle75"}
                          data-plasmic-override={overrides.rectangle75}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle75
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle76"}
                          data-plasmic-override={overrides.rectangle76}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle76
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill20"}
                        data-plasmic-override={overrides.phGridFourFill20}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill20
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle77"}
                          data-plasmic-override={overrides.rectangle77}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle77
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle78"}
                          data-plasmic-override={overrides.rectangle78}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle78
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle79"}
                          data-plasmic-override={overrides.rectangle79}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle79
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill21"}
                        data-plasmic-override={overrides.phGridFourFill21}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill21
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle80"}
                          data-plasmic-override={overrides.rectangle80}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle80
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle81"}
                          data-plasmic-override={overrides.rectangle81}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle81
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle82"}
                          data-plasmic-override={overrides.rectangle82}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle82
                          )}
                        />
                      </Stack__>
                    </React.Fragment>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kKctu
                    )}
                  >
                    {"AC"}
                  </div>
                </BtmNavbarTile>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__lSdkP)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 0,
                          value: "Médiocentral"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <BtmNavbarTile
                  data-plasmic-name={"btmNavbarTile7"}
                  data-plasmic-override={overrides.btmNavbarTile7}
                  className={classNames("__wab_instance", sty.btmNavbarTile7)}
                  frame1437254298={
                    <React.Fragment>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill37"}
                        data-plasmic-override={overrides.phGridFourFill37}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill37
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle128"}
                          data-plasmic-override={overrides.rectangle128}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle128
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle129"}
                          data-plasmic-override={overrides.rectangle129}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle129
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle130"}
                          data-plasmic-override={overrides.rectangle130}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle130
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill38"}
                        data-plasmic-override={overrides.phGridFourFill38}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill38
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle131"}
                          data-plasmic-override={overrides.rectangle131}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle131
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle132"}
                          data-plasmic-override={overrides.rectangle132}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle132
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle133"}
                          data-plasmic-override={overrides.rectangle133}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle133
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill39"}
                        data-plasmic-override={overrides.phGridFourFill39}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill39
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle134"}
                          data-plasmic-override={overrides.rectangle134}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle134
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle135"}
                          data-plasmic-override={overrides.rectangle135}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle135
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle136"}
                          data-plasmic-override={overrides.rectangle136}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle136
                          )}
                        />
                      </Stack__>
                    </React.Fragment>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y2Iqq
                    )}
                  >
                    {"MC"}
                  </div>
                </BtmNavbarTile>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__kYXxU)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 0,
                          value: "Postérocentral"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <BtmNavbarTile
                  data-plasmic-name={"btmNavbarTile6"}
                  data-plasmic-override={overrides.btmNavbarTile6}
                  className={classNames("__wab_instance", sty.btmNavbarTile6)}
                  frame1437254298={
                    <React.Fragment>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill34"}
                        data-plasmic-override={overrides.phGridFourFill34}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill34
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle119"}
                          data-plasmic-override={overrides.rectangle119}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle119
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle120"}
                          data-plasmic-override={overrides.rectangle120}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle120
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle121"}
                          data-plasmic-override={overrides.rectangle121}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle121
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill35"}
                        data-plasmic-override={overrides.phGridFourFill35}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill35
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle122"}
                          data-plasmic-override={overrides.rectangle122}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle122
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle123"}
                          data-plasmic-override={overrides.rectangle123}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle123
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle124"}
                          data-plasmic-override={overrides.rectangle124}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle124
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill36"}
                        data-plasmic-override={overrides.phGridFourFill36}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill36
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle125"}
                          data-plasmic-override={overrides.rectangle125}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle125
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle126"}
                          data-plasmic-override={overrides.rectangle126}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle126
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle127"}
                          data-plasmic-override={overrides.rectangle127}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle127
                          )}
                        />
                      </Stack__>
                    </React.Fragment>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__njY9A
                    )}
                  >
                    {"PC"}
                  </div>
                </BtmNavbarTile>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__rXx3Z)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 0,
                          value: "Antérolatéral droit"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <BtmNavbarTile
                  data-plasmic-name={"btmNavbarTile5"}
                  data-plasmic-override={overrides.btmNavbarTile5}
                  className={classNames("__wab_instance", sty.btmNavbarTile5)}
                  frame1437254298={
                    <React.Fragment>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill31"}
                        data-plasmic-override={overrides.phGridFourFill31}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill31
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle110"}
                          data-plasmic-override={overrides.rectangle110}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle110
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle111"}
                          data-plasmic-override={overrides.rectangle111}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle111
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle112"}
                          data-plasmic-override={overrides.rectangle112}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle112
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill32"}
                        data-plasmic-override={overrides.phGridFourFill32}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill32
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle113"}
                          data-plasmic-override={overrides.rectangle113}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle113
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle114"}
                          data-plasmic-override={overrides.rectangle114}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle114
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle115"}
                          data-plasmic-override={overrides.rectangle115}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle115
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill33"}
                        data-plasmic-override={overrides.phGridFourFill33}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill33
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle116"}
                          data-plasmic-override={overrides.rectangle116}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle116
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle117"}
                          data-plasmic-override={overrides.rectangle117}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle117
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle118"}
                          data-plasmic-override={overrides.rectangle118}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle118
                          )}
                        />
                      </Stack__>
                    </React.Fragment>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8ToMw
                    )}
                  >
                    {"AL"}
                  </div>
                </BtmNavbarTile>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__yd6C7)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 0,
                          value: "Médiolatéral droit"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <BtmNavbarTile
                  data-plasmic-name={"btmNavbarTile4"}
                  data-plasmic-override={overrides.btmNavbarTile4}
                  className={classNames("__wab_instance", sty.btmNavbarTile4)}
                  frame1437254298={
                    <React.Fragment>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill28"}
                        data-plasmic-override={overrides.phGridFourFill28}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill28
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle101"}
                          data-plasmic-override={overrides.rectangle101}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle101
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle102"}
                          data-plasmic-override={overrides.rectangle102}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle102
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle103"}
                          data-plasmic-override={overrides.rectangle103}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle103
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill29"}
                        data-plasmic-override={overrides.phGridFourFill29}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill29
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle104"}
                          data-plasmic-override={overrides.rectangle104}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle104
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle105"}
                          data-plasmic-override={overrides.rectangle105}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle105
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle106"}
                          data-plasmic-override={overrides.rectangle106}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle106
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill30"}
                        data-plasmic-override={overrides.phGridFourFill30}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill30
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle107"}
                          data-plasmic-override={overrides.rectangle107}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle107
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle108"}
                          data-plasmic-override={overrides.rectangle108}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle108
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle109"}
                          data-plasmic-override={overrides.rectangle109}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle109
                          )}
                        />
                      </Stack__>
                    </React.Fragment>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sx8GK
                    )}
                  >
                    {"ML"}
                  </div>
                </BtmNavbarTile>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__w9Wra)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 0,
                          value: "Postérolatéral droit"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <BtmNavbarTile
                  data-plasmic-name={"btmNavbarTile3"}
                  data-plasmic-override={overrides.btmNavbarTile3}
                  className={classNames("__wab_instance", sty.btmNavbarTile3)}
                  frame1437254298={
                    <React.Fragment>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill25"}
                        data-plasmic-override={overrides.phGridFourFill25}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill25
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle92"}
                          data-plasmic-override={overrides.rectangle92}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle92
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle93"}
                          data-plasmic-override={overrides.rectangle93}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle93
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle94"}
                          data-plasmic-override={overrides.rectangle94}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle94,
                            {
                              [sty.rectangle94global_locale_en]: hasVariant(
                                globalVariants,
                                "locale",
                                "en"
                              )
                            }
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill26"}
                        data-plasmic-override={overrides.phGridFourFill26}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill26
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle95"}
                          data-plasmic-override={overrides.rectangle95}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle95
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle96"}
                          data-plasmic-override={overrides.rectangle96}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle96
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle97"}
                          data-plasmic-override={overrides.rectangle97}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle97
                          )}
                        />
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"phGridFourFill27"}
                        data-plasmic-override={overrides.phGridFourFill27}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.phGridFourFill27
                        )}
                      >
                        <div
                          data-plasmic-name={"rectangle98"}
                          data-plasmic-override={overrides.rectangle98}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle98
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle99"}
                          data-plasmic-override={overrides.rectangle99}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle99
                          )}
                        />

                        <div
                          data-plasmic-name={"rectangle100"}
                          data-plasmic-override={overrides.rectangle100}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle100
                          )}
                        />
                      </Stack__>
                    </React.Fragment>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vtnOb
                    )}
                  >
                    {"PL"}
                  </div>
                </BtmNavbarTile>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__yafEw)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 0,
                          value: "Extrapelvien"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <BtmNavbarTile
                  data-plasmic-name={"btmNavbarTile2"}
                  data-plasmic-override={overrides.btmNavbarTile2}
                  className={classNames("__wab_instance", sty.btmNavbarTile2)}
                />
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "videoModal",
    "htmlVideo",
    "imagePovAbdomen",
    "expPdf",
    "imagePovFaceDroite",
    "imagePovFaceGauche",
    "imagePovProfil",
    "main",
    "navbar",
    "button",
    "container",
    "tabs",
    "button2",
    "button4",
    "button6",
    "button7",
    "button8",
    "tabUnderline",
    "sifemTitleWrapper",
    "questions",
    "back",
    "schema",
    "ac",
    "alG",
    "alD",
    "mlD",
    "mlG",
    "mc",
    "plG",
    "pc2",
    "plD",
    "ep",
    "adI",
    "pathologieAssociee",
    "check",
    "video",
    "text4",
    "checkbox",
    "addEnd",
    "subCheckbox",
    "detailsEndometriome",
    "endometriomeWrapper",
    "fr",
    "en",
    "select2",
    "button11",
    "nextBack",
    "next",
    "back2",
    "map",
    "profil",
    "traumaLesion",
    "traumaOptions",
    "face",
    "traumaLesionDroit",
    "traumaLesionCentre",
    "traumaLesionGauche",
    "traumaOptionsDroite",
    "traumaOptionsGauche",
    "abdo2",
    "traumaLesion2",
    "traumaOptions2",
    "abdo",
    "traumaLesion3",
    "traumaOptions3",
    "score",
    "title3",
    "intro",
    "category2",
    "superficielle",
    "superficielle3",
    "annexDroite",
    "endometriome2",
    "badge2",
    "text7",
    "longueur2",
    "annexDroite2",
    "endometriome3",
    "badge3",
    "text8",
    "longueur3",
    "res",
    "resultat",
    "titleResult",
    "result",
    "content",
    "password17",
    "scoreContent",
    "progressBar",
    "bar",
    "frame1437254354",
    "frame1437254355",
    "frame1437254356",
    "embedHtml",
    "depi",
    "password18",
    "categoryV2",
    "left2",
    "left",
    "buttons",
    "frame1437254358",
    "button3",
    "button5",
    "ress2",
    "password19",
    "ress",
    "table2",
    "category",
    "title2",
    "title",
    "fleches",
    "content2",
    "checkbox2",
    "endometriome",
    "badge",
    "text",
    "longueur",
    "subCheckbox2",
    "categoryMobile",
    "superficielle2",
    "annexDroite3",
    "endometriome4",
    "badge4",
    "text9",
    "longueur4",
    "annexDroite4",
    "endometriome5",
    "badge5",
    "text10",
    "longueur5",
    "superficielle4",
    "navBar",
    "btmNavbarTile",
    "phGridFourFill19",
    "rectangle74",
    "rectangle75",
    "rectangle76",
    "phGridFourFill20",
    "rectangle77",
    "rectangle78",
    "rectangle79",
    "phGridFourFill21",
    "rectangle80",
    "rectangle81",
    "rectangle82",
    "btmNavbarTile7",
    "phGridFourFill37",
    "rectangle128",
    "rectangle129",
    "rectangle130",
    "phGridFourFill38",
    "rectangle131",
    "rectangle132",
    "rectangle133",
    "phGridFourFill39",
    "rectangle134",
    "rectangle135",
    "rectangle136",
    "btmNavbarTile6",
    "phGridFourFill34",
    "rectangle119",
    "rectangle120",
    "rectangle121",
    "phGridFourFill35",
    "rectangle122",
    "rectangle123",
    "rectangle124",
    "phGridFourFill36",
    "rectangle125",
    "rectangle126",
    "rectangle127",
    "btmNavbarTile5",
    "phGridFourFill31",
    "rectangle110",
    "rectangle111",
    "rectangle112",
    "phGridFourFill32",
    "rectangle113",
    "rectangle114",
    "rectangle115",
    "phGridFourFill33",
    "rectangle116",
    "rectangle117",
    "rectangle118",
    "btmNavbarTile4",
    "phGridFourFill28",
    "rectangle101",
    "rectangle102",
    "rectangle103",
    "phGridFourFill29",
    "rectangle104",
    "rectangle105",
    "rectangle106",
    "phGridFourFill30",
    "rectangle107",
    "rectangle108",
    "rectangle109",
    "btmNavbarTile3",
    "phGridFourFill25",
    "rectangle92",
    "rectangle93",
    "rectangle94",
    "phGridFourFill26",
    "rectangle95",
    "rectangle96",
    "rectangle97",
    "phGridFourFill27",
    "rectangle98",
    "rectangle99",
    "rectangle100",
    "btmNavbarTile2"
  ],
  videoModal: ["videoModal", "htmlVideo"],
  htmlVideo: ["htmlVideo"],
  imagePovAbdomen: ["imagePovAbdomen"],
  expPdf: ["expPdf"],
  imagePovFaceDroite: ["imagePovFaceDroite"],
  imagePovFaceGauche: ["imagePovFaceGauche"],
  imagePovProfil: ["imagePovProfil"],
  main: [
    "main",
    "navbar",
    "button",
    "container",
    "tabs",
    "button2",
    "button4",
    "button6",
    "button7",
    "button8",
    "tabUnderline",
    "sifemTitleWrapper",
    "questions",
    "back",
    "schema",
    "ac",
    "alG",
    "alD",
    "mlD",
    "mlG",
    "mc",
    "plG",
    "pc2",
    "plD",
    "ep",
    "adI",
    "pathologieAssociee",
    "check",
    "video",
    "text4",
    "checkbox",
    "addEnd",
    "subCheckbox",
    "detailsEndometriome",
    "endometriomeWrapper",
    "fr",
    "en",
    "select2",
    "button11",
    "nextBack",
    "next",
    "back2",
    "map",
    "profil",
    "traumaLesion",
    "traumaOptions",
    "face",
    "traumaLesionDroit",
    "traumaLesionCentre",
    "traumaLesionGauche",
    "traumaOptionsDroite",
    "traumaOptionsGauche",
    "abdo2",
    "traumaLesion2",
    "traumaOptions2",
    "abdo",
    "traumaLesion3",
    "traumaOptions3",
    "score",
    "title3",
    "intro",
    "category2",
    "superficielle",
    "superficielle3",
    "annexDroite",
    "endometriome2",
    "badge2",
    "text7",
    "longueur2",
    "annexDroite2",
    "endometriome3",
    "badge3",
    "text8",
    "longueur3",
    "res",
    "resultat",
    "titleResult",
    "result",
    "content",
    "password17",
    "scoreContent",
    "progressBar",
    "bar",
    "frame1437254354",
    "frame1437254355",
    "frame1437254356",
    "embedHtml",
    "depi",
    "password18",
    "categoryV2",
    "left2",
    "left",
    "buttons",
    "frame1437254358",
    "button3",
    "button5",
    "ress2",
    "password19",
    "ress",
    "table2"
  ],
  navbar: ["navbar", "button"],
  button: ["button"],
  container: [
    "container",
    "tabs",
    "button2",
    "button4",
    "button6",
    "button7",
    "button8",
    "tabUnderline",
    "sifemTitleWrapper",
    "questions",
    "back",
    "schema",
    "ac",
    "alG",
    "alD",
    "mlD",
    "mlG",
    "mc",
    "plG",
    "pc2",
    "plD",
    "ep",
    "adI",
    "pathologieAssociee",
    "check",
    "video",
    "text4",
    "checkbox",
    "addEnd",
    "subCheckbox",
    "detailsEndometriome",
    "endometriomeWrapper",
    "fr",
    "en",
    "select2",
    "button11",
    "nextBack",
    "next",
    "back2",
    "map",
    "profil",
    "traumaLesion",
    "traumaOptions",
    "face",
    "traumaLesionDroit",
    "traumaLesionCentre",
    "traumaLesionGauche",
    "traumaOptionsDroite",
    "traumaOptionsGauche",
    "abdo2",
    "traumaLesion2",
    "traumaOptions2",
    "abdo",
    "traumaLesion3",
    "traumaOptions3",
    "score",
    "title3",
    "intro",
    "category2",
    "superficielle",
    "superficielle3",
    "annexDroite",
    "endometriome2",
    "badge2",
    "text7",
    "longueur2",
    "annexDroite2",
    "endometriome3",
    "badge3",
    "text8",
    "longueur3",
    "res",
    "resultat",
    "titleResult",
    "result",
    "content",
    "password17",
    "scoreContent",
    "progressBar",
    "bar",
    "frame1437254354",
    "frame1437254355",
    "frame1437254356",
    "embedHtml",
    "depi",
    "password18",
    "categoryV2",
    "left2",
    "left",
    "buttons",
    "frame1437254358",
    "button3",
    "button5",
    "ress2",
    "password19",
    "ress",
    "table2"
  ],
  tabs: [
    "tabs",
    "button2",
    "button4",
    "button6",
    "button7",
    "button8",
    "tabUnderline"
  ],
  button2: ["button2"],
  button4: ["button4"],
  button6: ["button6"],
  button7: ["button7"],
  button8: ["button8"],
  tabUnderline: ["tabUnderline"],
  sifemTitleWrapper: ["sifemTitleWrapper"],
  questions: [
    "questions",
    "back",
    "schema",
    "ac",
    "alG",
    "alD",
    "mlD",
    "mlG",
    "mc",
    "plG",
    "pc2",
    "plD",
    "ep",
    "adI",
    "pathologieAssociee",
    "check",
    "video",
    "text4",
    "checkbox",
    "addEnd",
    "subCheckbox",
    "detailsEndometriome",
    "endometriomeWrapper",
    "fr",
    "en",
    "select2",
    "button11",
    "nextBack",
    "next",
    "back2"
  ],
  back: ["back"],
  schema: [
    "schema",
    "ac",
    "alG",
    "alD",
    "mlD",
    "mlG",
    "mc",
    "plG",
    "pc2",
    "plD",
    "ep"
  ],
  ac: ["ac"],
  alG: ["alG"],
  alD: ["alD"],
  mlD: ["mlD"],
  mlG: ["mlG"],
  mc: ["mc"],
  plG: ["plG"],
  pc2: ["pc2"],
  plD: ["plD"],
  ep: ["ep"],
  adI: ["adI"],
  pathologieAssociee: ["pathologieAssociee"],
  check: [
    "check",
    "video",
    "text4",
    "checkbox",
    "addEnd",
    "subCheckbox",
    "detailsEndometriome",
    "endometriomeWrapper",
    "fr",
    "en",
    "select2",
    "button11"
  ],
  video: ["video", "text4"],
  text4: ["text4"],
  checkbox: ["checkbox", "addEnd"],
  addEnd: ["addEnd"],
  subCheckbox: ["subCheckbox"],
  detailsEndometriome: [
    "detailsEndometriome",
    "endometriomeWrapper",
    "fr",
    "en",
    "select2",
    "button11"
  ],
  endometriomeWrapper: ["endometriomeWrapper", "fr", "en", "select2"],
  fr: ["fr"],
  en: ["en"],
  select2: ["select2"],
  button11: ["button11"],
  nextBack: ["nextBack", "next", "back2"],
  next: ["next"],
  back2: ["back2"],
  map: [
    "map",
    "profil",
    "traumaLesion",
    "traumaOptions",
    "face",
    "traumaLesionDroit",
    "traumaLesionCentre",
    "traumaLesionGauche",
    "traumaOptionsDroite",
    "traumaOptionsGauche",
    "abdo2",
    "traumaLesion2",
    "traumaOptions2",
    "abdo",
    "traumaLesion3",
    "traumaOptions3"
  ],
  profil: ["profil", "traumaLesion", "traumaOptions"],
  traumaLesion: ["traumaLesion"],
  traumaOptions: ["traumaOptions"],
  face: [
    "face",
    "traumaLesionDroit",
    "traumaLesionCentre",
    "traumaLesionGauche",
    "traumaOptionsDroite",
    "traumaOptionsGauche"
  ],
  traumaLesionDroit: ["traumaLesionDroit"],
  traumaLesionCentre: ["traumaLesionCentre"],
  traumaLesionGauche: ["traumaLesionGauche"],
  traumaOptionsDroite: ["traumaOptionsDroite"],
  traumaOptionsGauche: ["traumaOptionsGauche"],
  abdo2: ["abdo2", "traumaLesion2", "traumaOptions2"],
  traumaLesion2: ["traumaLesion2"],
  traumaOptions2: ["traumaOptions2"],
  abdo: ["abdo", "traumaLesion3", "traumaOptions3"],
  traumaLesion3: ["traumaLesion3"],
  traumaOptions3: ["traumaOptions3"],
  score: [
    "score",
    "title3",
    "intro",
    "category2",
    "superficielle",
    "superficielle3",
    "annexDroite",
    "endometriome2",
    "badge2",
    "text7",
    "longueur2",
    "annexDroite2",
    "endometriome3",
    "badge3",
    "text8",
    "longueur3",
    "res",
    "resultat",
    "titleResult",
    "result",
    "content",
    "password17",
    "scoreContent",
    "progressBar",
    "bar",
    "frame1437254354",
    "frame1437254355",
    "frame1437254356",
    "embedHtml",
    "depi",
    "password18",
    "categoryV2",
    "left2",
    "left",
    "buttons",
    "frame1437254358",
    "button3",
    "button5",
    "ress2",
    "password19",
    "ress",
    "table2"
  ],
  title3: ["title3", "intro"],
  intro: ["intro"],
  category2: [
    "category2",
    "superficielle",
    "superficielle3",
    "annexDroite",
    "endometriome2",
    "badge2",
    "text7",
    "longueur2",
    "annexDroite2",
    "endometriome3",
    "badge3",
    "text8",
    "longueur3"
  ],
  superficielle: ["superficielle"],
  superficielle3: ["superficielle3"],
  annexDroite: ["annexDroite", "endometriome2", "badge2", "text7", "longueur2"],
  endometriome2: ["endometriome2", "badge2", "text7", "longueur2"],
  badge2: ["badge2", "text7"],
  text7: ["text7"],
  longueur2: ["longueur2"],
  annexDroite2: [
    "annexDroite2",
    "endometriome3",
    "badge3",
    "text8",
    "longueur3"
  ],
  endometriome3: ["endometriome3", "badge3", "text8", "longueur3"],
  badge3: ["badge3", "text8"],
  text8: ["text8"],
  longueur3: ["longueur3"],
  res: [
    "res",
    "resultat",
    "titleResult",
    "result",
    "content",
    "password17",
    "scoreContent",
    "progressBar",
    "bar",
    "frame1437254354",
    "frame1437254355",
    "frame1437254356",
    "embedHtml",
    "depi",
    "password18",
    "categoryV2",
    "left2",
    "left"
  ],
  resultat: [
    "resultat",
    "titleResult",
    "result",
    "content",
    "password17",
    "scoreContent",
    "progressBar",
    "bar",
    "frame1437254354",
    "frame1437254355",
    "frame1437254356",
    "embedHtml",
    "depi",
    "password18"
  ],
  titleResult: ["titleResult", "result"],
  result: ["result"],
  content: [
    "content",
    "password17",
    "scoreContent",
    "progressBar",
    "bar",
    "frame1437254354",
    "frame1437254355",
    "frame1437254356",
    "embedHtml",
    "depi",
    "password18"
  ],
  password17: ["password17"],
  scoreContent: [
    "scoreContent",
    "progressBar",
    "bar",
    "frame1437254354",
    "frame1437254355",
    "frame1437254356",
    "embedHtml",
    "depi",
    "password18"
  ],
  progressBar: [
    "progressBar",
    "bar",
    "frame1437254354",
    "frame1437254355",
    "frame1437254356",
    "embedHtml"
  ],
  bar: ["bar", "frame1437254354", "frame1437254355", "frame1437254356"],
  frame1437254354: ["frame1437254354", "frame1437254355", "frame1437254356"],
  frame1437254355: ["frame1437254355"],
  frame1437254356: ["frame1437254356"],
  embedHtml: ["embedHtml"],
  depi: ["depi", "password18"],
  password18: ["password18"],
  categoryV2: ["categoryV2", "left2", "left"],
  left2: ["left2"],
  left: ["left"],
  buttons: ["buttons", "frame1437254358", "button3", "button5"],
  frame1437254358: ["frame1437254358", "button3", "button5"],
  button3: ["button3"],
  button5: ["button5"],
  ress2: ["ress2", "password19", "ress", "table2"],
  password19: ["password19"],
  ress: ["ress"],
  table2: ["table2"],
  category: [
    "category",
    "title2",
    "title",
    "fleches",
    "content2",
    "checkbox2",
    "endometriome",
    "badge",
    "text",
    "longueur",
    "subCheckbox2"
  ],
  title2: ["title2", "title", "fleches"],
  title: ["title"],
  fleches: ["fleches"],
  content2: [
    "content2",
    "checkbox2",
    "endometriome",
    "badge",
    "text",
    "longueur",
    "subCheckbox2"
  ],
  checkbox2: ["checkbox2"],
  endometriome: ["endometriome", "badge", "text", "longueur"],
  badge: ["badge", "text"],
  text: ["text"],
  longueur: ["longueur"],
  subCheckbox2: ["subCheckbox2"],
  categoryMobile: [
    "categoryMobile",
    "superficielle2",
    "annexDroite3",
    "endometriome4",
    "badge4",
    "text9",
    "longueur4",
    "annexDroite4",
    "endometriome5",
    "badge5",
    "text10",
    "longueur5",
    "superficielle4"
  ],
  superficielle2: ["superficielle2"],
  annexDroite3: [
    "annexDroite3",
    "endometriome4",
    "badge4",
    "text9",
    "longueur4"
  ],
  endometriome4: ["endometriome4", "badge4", "text9", "longueur4"],
  badge4: ["badge4", "text9"],
  text9: ["text9"],
  longueur4: ["longueur4"],
  annexDroite4: [
    "annexDroite4",
    "endometriome5",
    "badge5",
    "text10",
    "longueur5"
  ],
  endometriome5: ["endometriome5", "badge5", "text10", "longueur5"],
  badge5: ["badge5", "text10"],
  text10: ["text10"],
  longueur5: ["longueur5"],
  superficielle4: ["superficielle4"],
  navBar: [
    "navBar",
    "btmNavbarTile",
    "phGridFourFill19",
    "rectangle74",
    "rectangle75",
    "rectangle76",
    "phGridFourFill20",
    "rectangle77",
    "rectangle78",
    "rectangle79",
    "phGridFourFill21",
    "rectangle80",
    "rectangle81",
    "rectangle82",
    "btmNavbarTile7",
    "phGridFourFill37",
    "rectangle128",
    "rectangle129",
    "rectangle130",
    "phGridFourFill38",
    "rectangle131",
    "rectangle132",
    "rectangle133",
    "phGridFourFill39",
    "rectangle134",
    "rectangle135",
    "rectangle136",
    "btmNavbarTile6",
    "phGridFourFill34",
    "rectangle119",
    "rectangle120",
    "rectangle121",
    "phGridFourFill35",
    "rectangle122",
    "rectangle123",
    "rectangle124",
    "phGridFourFill36",
    "rectangle125",
    "rectangle126",
    "rectangle127",
    "btmNavbarTile5",
    "phGridFourFill31",
    "rectangle110",
    "rectangle111",
    "rectangle112",
    "phGridFourFill32",
    "rectangle113",
    "rectangle114",
    "rectangle115",
    "phGridFourFill33",
    "rectangle116",
    "rectangle117",
    "rectangle118",
    "btmNavbarTile4",
    "phGridFourFill28",
    "rectangle101",
    "rectangle102",
    "rectangle103",
    "phGridFourFill29",
    "rectangle104",
    "rectangle105",
    "rectangle106",
    "phGridFourFill30",
    "rectangle107",
    "rectangle108",
    "rectangle109",
    "btmNavbarTile3",
    "phGridFourFill25",
    "rectangle92",
    "rectangle93",
    "rectangle94",
    "phGridFourFill26",
    "rectangle95",
    "rectangle96",
    "rectangle97",
    "phGridFourFill27",
    "rectangle98",
    "rectangle99",
    "rectangle100",
    "btmNavbarTile2"
  ],
  btmNavbarTile: [
    "btmNavbarTile",
    "phGridFourFill19",
    "rectangle74",
    "rectangle75",
    "rectangle76",
    "phGridFourFill20",
    "rectangle77",
    "rectangle78",
    "rectangle79",
    "phGridFourFill21",
    "rectangle80",
    "rectangle81",
    "rectangle82"
  ],
  phGridFourFill19: [
    "phGridFourFill19",
    "rectangle74",
    "rectangle75",
    "rectangle76"
  ],
  rectangle74: ["rectangle74"],
  rectangle75: ["rectangle75"],
  rectangle76: ["rectangle76"],
  phGridFourFill20: [
    "phGridFourFill20",
    "rectangle77",
    "rectangle78",
    "rectangle79"
  ],
  rectangle77: ["rectangle77"],
  rectangle78: ["rectangle78"],
  rectangle79: ["rectangle79"],
  phGridFourFill21: [
    "phGridFourFill21",
    "rectangle80",
    "rectangle81",
    "rectangle82"
  ],
  rectangle80: ["rectangle80"],
  rectangle81: ["rectangle81"],
  rectangle82: ["rectangle82"],
  btmNavbarTile7: [
    "btmNavbarTile7",
    "phGridFourFill37",
    "rectangle128",
    "rectangle129",
    "rectangle130",
    "phGridFourFill38",
    "rectangle131",
    "rectangle132",
    "rectangle133",
    "phGridFourFill39",
    "rectangle134",
    "rectangle135",
    "rectangle136"
  ],
  phGridFourFill37: [
    "phGridFourFill37",
    "rectangle128",
    "rectangle129",
    "rectangle130"
  ],
  rectangle128: ["rectangle128"],
  rectangle129: ["rectangle129"],
  rectangle130: ["rectangle130"],
  phGridFourFill38: [
    "phGridFourFill38",
    "rectangle131",
    "rectangle132",
    "rectangle133"
  ],
  rectangle131: ["rectangle131"],
  rectangle132: ["rectangle132"],
  rectangle133: ["rectangle133"],
  phGridFourFill39: [
    "phGridFourFill39",
    "rectangle134",
    "rectangle135",
    "rectangle136"
  ],
  rectangle134: ["rectangle134"],
  rectangle135: ["rectangle135"],
  rectangle136: ["rectangle136"],
  btmNavbarTile6: [
    "btmNavbarTile6",
    "phGridFourFill34",
    "rectangle119",
    "rectangle120",
    "rectangle121",
    "phGridFourFill35",
    "rectangle122",
    "rectangle123",
    "rectangle124",
    "phGridFourFill36",
    "rectangle125",
    "rectangle126",
    "rectangle127"
  ],
  phGridFourFill34: [
    "phGridFourFill34",
    "rectangle119",
    "rectangle120",
    "rectangle121"
  ],
  rectangle119: ["rectangle119"],
  rectangle120: ["rectangle120"],
  rectangle121: ["rectangle121"],
  phGridFourFill35: [
    "phGridFourFill35",
    "rectangle122",
    "rectangle123",
    "rectangle124"
  ],
  rectangle122: ["rectangle122"],
  rectangle123: ["rectangle123"],
  rectangle124: ["rectangle124"],
  phGridFourFill36: [
    "phGridFourFill36",
    "rectangle125",
    "rectangle126",
    "rectangle127"
  ],
  rectangle125: ["rectangle125"],
  rectangle126: ["rectangle126"],
  rectangle127: ["rectangle127"],
  btmNavbarTile5: [
    "btmNavbarTile5",
    "phGridFourFill31",
    "rectangle110",
    "rectangle111",
    "rectangle112",
    "phGridFourFill32",
    "rectangle113",
    "rectangle114",
    "rectangle115",
    "phGridFourFill33",
    "rectangle116",
    "rectangle117",
    "rectangle118"
  ],
  phGridFourFill31: [
    "phGridFourFill31",
    "rectangle110",
    "rectangle111",
    "rectangle112"
  ],
  rectangle110: ["rectangle110"],
  rectangle111: ["rectangle111"],
  rectangle112: ["rectangle112"],
  phGridFourFill32: [
    "phGridFourFill32",
    "rectangle113",
    "rectangle114",
    "rectangle115"
  ],
  rectangle113: ["rectangle113"],
  rectangle114: ["rectangle114"],
  rectangle115: ["rectangle115"],
  phGridFourFill33: [
    "phGridFourFill33",
    "rectangle116",
    "rectangle117",
    "rectangle118"
  ],
  rectangle116: ["rectangle116"],
  rectangle117: ["rectangle117"],
  rectangle118: ["rectangle118"],
  btmNavbarTile4: [
    "btmNavbarTile4",
    "phGridFourFill28",
    "rectangle101",
    "rectangle102",
    "rectangle103",
    "phGridFourFill29",
    "rectangle104",
    "rectangle105",
    "rectangle106",
    "phGridFourFill30",
    "rectangle107",
    "rectangle108",
    "rectangle109"
  ],
  phGridFourFill28: [
    "phGridFourFill28",
    "rectangle101",
    "rectangle102",
    "rectangle103"
  ],
  rectangle101: ["rectangle101"],
  rectangle102: ["rectangle102"],
  rectangle103: ["rectangle103"],
  phGridFourFill29: [
    "phGridFourFill29",
    "rectangle104",
    "rectangle105",
    "rectangle106"
  ],
  rectangle104: ["rectangle104"],
  rectangle105: ["rectangle105"],
  rectangle106: ["rectangle106"],
  phGridFourFill30: [
    "phGridFourFill30",
    "rectangle107",
    "rectangle108",
    "rectangle109"
  ],
  rectangle107: ["rectangle107"],
  rectangle108: ["rectangle108"],
  rectangle109: ["rectangle109"],
  btmNavbarTile3: [
    "btmNavbarTile3",
    "phGridFourFill25",
    "rectangle92",
    "rectangle93",
    "rectangle94",
    "phGridFourFill26",
    "rectangle95",
    "rectangle96",
    "rectangle97",
    "phGridFourFill27",
    "rectangle98",
    "rectangle99",
    "rectangle100"
  ],
  phGridFourFill25: [
    "phGridFourFill25",
    "rectangle92",
    "rectangle93",
    "rectangle94"
  ],
  rectangle92: ["rectangle92"],
  rectangle93: ["rectangle93"],
  rectangle94: ["rectangle94"],
  phGridFourFill26: [
    "phGridFourFill26",
    "rectangle95",
    "rectangle96",
    "rectangle97"
  ],
  rectangle95: ["rectangle95"],
  rectangle96: ["rectangle96"],
  rectangle97: ["rectangle97"],
  phGridFourFill27: [
    "phGridFourFill27",
    "rectangle98",
    "rectangle99",
    "rectangle100"
  ],
  rectangle98: ["rectangle98"],
  rectangle99: ["rectangle99"],
  rectangle100: ["rectangle100"],
  btmNavbarTile2: ["btmNavbarTile2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  videoModal: typeof Modal;
  htmlVideo: typeof Video;
  imagePovAbdomen: typeof FileList;
  expPdf: typeof ExportToPDF;
  imagePovFaceDroite: typeof FileList;
  imagePovFaceGauche: typeof FileList;
  imagePovProfil: typeof FileList;
  main: "div";
  navbar: typeof Navbar;
  button: typeof Button;
  container: "div";
  tabs: "div";
  button2: typeof Button;
  button4: typeof Button;
  button6: typeof Button;
  button7: typeof Button;
  button8: typeof Button;
  tabUnderline: typeof TabUnderline;
  sifemTitleWrapper: typeof SifemTitleWrapper;
  questions: "div";
  back: "div";
  schema: "div";
  ac: "a";
  alG: "a";
  alD: "a";
  mlD: "a";
  mlG: "a";
  mc: "a";
  plG: "a";
  pc2: "a";
  plD: "a";
  ep: "a";
  adI: "a";
  pathologieAssociee: typeof Checkbox;
  check: "div";
  video: "div";
  text4: "div";
  checkbox: typeof Checkbox;
  addEnd: typeof Button;
  subCheckbox: typeof Checkbox;
  detailsEndometriome: "div";
  endometriomeWrapper: "div";
  fr: "div";
  en: "div";
  select2: typeof AntdSelect;
  button11: typeof Button;
  nextBack: "div";
  next: "svg";
  back2: "svg";
  map: "div";
  profil: "div";
  traumaLesion: typeof PlasmicImg__;
  traumaOptions: typeof PlasmicImg__;
  face: "div";
  traumaLesionDroit: typeof PlasmicImg__;
  traumaLesionCentre: typeof PlasmicImg__;
  traumaLesionGauche: typeof PlasmicImg__;
  traumaOptionsDroite: typeof PlasmicImg__;
  traumaOptionsGauche: typeof PlasmicImg__;
  abdo2: "div";
  traumaLesion2: typeof PlasmicImg__;
  traumaOptions2: typeof PlasmicImg__;
  abdo: "div";
  traumaLesion3: typeof PlasmicImg__;
  traumaOptions3: typeof PlasmicImg__;
  score: "div";
  title3: "div";
  intro: "div";
  category2: "div";
  superficielle: "div";
  superficielle3: "div";
  annexDroite: "div";
  endometriome2: "div";
  badge2: "div";
  text7: "div";
  longueur2: "div";
  annexDroite2: "div";
  endometriome3: "div";
  badge3: "div";
  text8: "div";
  longueur3: "div";
  res: "div";
  resultat: "div";
  titleResult: "div";
  result: "div";
  content: "div";
  password17: "div";
  scoreContent: "div";
  progressBar: "div";
  bar: "div";
  frame1437254354: "div";
  frame1437254355: "div";
  frame1437254356: "div";
  embedHtml: typeof Embed;
  depi: "div";
  password18: "div";
  categoryV2: "div";
  left2: "div";
  left: "div";
  buttons: "div";
  frame1437254358: "div";
  button3: typeof Button;
  button5: typeof Button;
  ress2: "div";
  password19: "div";
  ress: "div";
  table2: typeof RichTable;
  category: "div";
  title2: "div";
  title: "div";
  fleches: "div";
  content2: "div";
  checkbox2: typeof Checkbox;
  endometriome: "div";
  badge: "div";
  text: "div";
  longueur: "div";
  subCheckbox2: typeof Checkbox;
  categoryMobile: "div";
  superficielle2: "div";
  annexDroite3: "div";
  endometriome4: "div";
  badge4: "div";
  text9: "div";
  longueur4: "div";
  annexDroite4: "div";
  endometriome5: "div";
  badge5: "div";
  text10: "div";
  longueur5: "div";
  superficielle4: "div";
  navBar: "div";
  btmNavbarTile: typeof BtmNavbarTile;
  phGridFourFill19: "div";
  rectangle74: "div";
  rectangle75: "div";
  rectangle76: "div";
  phGridFourFill20: "div";
  rectangle77: "div";
  rectangle78: "div";
  rectangle79: "div";
  phGridFourFill21: "div";
  rectangle80: "div";
  rectangle81: "div";
  rectangle82: "div";
  btmNavbarTile7: typeof BtmNavbarTile;
  phGridFourFill37: "div";
  rectangle128: "div";
  rectangle129: "div";
  rectangle130: "div";
  phGridFourFill38: "div";
  rectangle131: "div";
  rectangle132: "div";
  rectangle133: "div";
  phGridFourFill39: "div";
  rectangle134: "div";
  rectangle135: "div";
  rectangle136: "div";
  btmNavbarTile6: typeof BtmNavbarTile;
  phGridFourFill34: "div";
  rectangle119: "div";
  rectangle120: "div";
  rectangle121: "div";
  phGridFourFill35: "div";
  rectangle122: "div";
  rectangle123: "div";
  rectangle124: "div";
  phGridFourFill36: "div";
  rectangle125: "div";
  rectangle126: "div";
  rectangle127: "div";
  btmNavbarTile5: typeof BtmNavbarTile;
  phGridFourFill31: "div";
  rectangle110: "div";
  rectangle111: "div";
  rectangle112: "div";
  phGridFourFill32: "div";
  rectangle113: "div";
  rectangle114: "div";
  rectangle115: "div";
  phGridFourFill33: "div";
  rectangle116: "div";
  rectangle117: "div";
  rectangle118: "div";
  btmNavbarTile4: typeof BtmNavbarTile;
  phGridFourFill28: "div";
  rectangle101: "div";
  rectangle102: "div";
  rectangle103: "div";
  phGridFourFill29: "div";
  rectangle104: "div";
  rectangle105: "div";
  rectangle106: "div";
  phGridFourFill30: "div";
  rectangle107: "div";
  rectangle108: "div";
  rectangle109: "div";
  btmNavbarTile3: typeof BtmNavbarTile;
  phGridFourFill25: "div";
  rectangle92: "div";
  rectangle93: "div";
  rectangle94: "div";
  phGridFourFill26: "div";
  rectangle95: "div";
  rectangle96: "div";
  rectangle97: "div";
  phGridFourFill27: "div";
  rectangle98: "div";
  rectangle99: "div";
  rectangle100: "div";
  btmNavbarTile2: typeof BtmNavbarTile;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBilan__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBilan__VariantsArgs;
    args?: PlasmicBilan__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBilan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBilan__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBilan__ArgProps,
          internalVariantPropNames: PlasmicBilan__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBilan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBilan";
  } else {
    func.displayName = `PlasmicBilan.${nodeName}`;
  }
  return func;
}

export const PlasmicBilan = Object.assign(
  // Top-level PlasmicBilan renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    videoModal: makeNodeComponent("videoModal"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    imagePovAbdomen: makeNodeComponent("imagePovAbdomen"),
    expPdf: makeNodeComponent("expPdf"),
    imagePovFaceDroite: makeNodeComponent("imagePovFaceDroite"),
    imagePovFaceGauche: makeNodeComponent("imagePovFaceGauche"),
    imagePovProfil: makeNodeComponent("imagePovProfil"),
    main: makeNodeComponent("main"),
    navbar: makeNodeComponent("navbar"),
    button: makeNodeComponent("button"),
    container: makeNodeComponent("container"),
    tabs: makeNodeComponent("tabs"),
    button2: makeNodeComponent("button2"),
    button4: makeNodeComponent("button4"),
    button6: makeNodeComponent("button6"),
    button7: makeNodeComponent("button7"),
    button8: makeNodeComponent("button8"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    sifemTitleWrapper: makeNodeComponent("sifemTitleWrapper"),
    questions: makeNodeComponent("questions"),
    back: makeNodeComponent("back"),
    schema: makeNodeComponent("schema"),
    ac: makeNodeComponent("ac"),
    alG: makeNodeComponent("alG"),
    alD: makeNodeComponent("alD"),
    mlD: makeNodeComponent("mlD"),
    mlG: makeNodeComponent("mlG"),
    mc: makeNodeComponent("mc"),
    plG: makeNodeComponent("plG"),
    pc2: makeNodeComponent("pc2"),
    plD: makeNodeComponent("plD"),
    ep: makeNodeComponent("ep"),
    adI: makeNodeComponent("adI"),
    pathologieAssociee: makeNodeComponent("pathologieAssociee"),
    check: makeNodeComponent("check"),
    video: makeNodeComponent("video"),
    text4: makeNodeComponent("text4"),
    checkbox: makeNodeComponent("checkbox"),
    addEnd: makeNodeComponent("addEnd"),
    subCheckbox: makeNodeComponent("subCheckbox"),
    detailsEndometriome: makeNodeComponent("detailsEndometriome"),
    endometriomeWrapper: makeNodeComponent("endometriomeWrapper"),
    fr: makeNodeComponent("fr"),
    en: makeNodeComponent("en"),
    select2: makeNodeComponent("select2"),
    button11: makeNodeComponent("button11"),
    nextBack: makeNodeComponent("nextBack"),
    next: makeNodeComponent("next"),
    back2: makeNodeComponent("back2"),
    map: makeNodeComponent("map"),
    profil: makeNodeComponent("profil"),
    traumaLesion: makeNodeComponent("traumaLesion"),
    traumaOptions: makeNodeComponent("traumaOptions"),
    face: makeNodeComponent("face"),
    traumaLesionDroit: makeNodeComponent("traumaLesionDroit"),
    traumaLesionCentre: makeNodeComponent("traumaLesionCentre"),
    traumaLesionGauche: makeNodeComponent("traumaLesionGauche"),
    traumaOptionsDroite: makeNodeComponent("traumaOptionsDroite"),
    traumaOptionsGauche: makeNodeComponent("traumaOptionsGauche"),
    abdo2: makeNodeComponent("abdo2"),
    traumaLesion2: makeNodeComponent("traumaLesion2"),
    traumaOptions2: makeNodeComponent("traumaOptions2"),
    abdo: makeNodeComponent("abdo"),
    traumaLesion3: makeNodeComponent("traumaLesion3"),
    traumaOptions3: makeNodeComponent("traumaOptions3"),
    score: makeNodeComponent("score"),
    title3: makeNodeComponent("title3"),
    intro: makeNodeComponent("intro"),
    category2: makeNodeComponent("category2"),
    superficielle: makeNodeComponent("superficielle"),
    superficielle3: makeNodeComponent("superficielle3"),
    annexDroite: makeNodeComponent("annexDroite"),
    endometriome2: makeNodeComponent("endometriome2"),
    badge2: makeNodeComponent("badge2"),
    text7: makeNodeComponent("text7"),
    longueur2: makeNodeComponent("longueur2"),
    annexDroite2: makeNodeComponent("annexDroite2"),
    endometriome3: makeNodeComponent("endometriome3"),
    badge3: makeNodeComponent("badge3"),
    text8: makeNodeComponent("text8"),
    longueur3: makeNodeComponent("longueur3"),
    res: makeNodeComponent("res"),
    resultat: makeNodeComponent("resultat"),
    titleResult: makeNodeComponent("titleResult"),
    result: makeNodeComponent("result"),
    content: makeNodeComponent("content"),
    password17: makeNodeComponent("password17"),
    scoreContent: makeNodeComponent("scoreContent"),
    progressBar: makeNodeComponent("progressBar"),
    bar: makeNodeComponent("bar"),
    frame1437254354: makeNodeComponent("frame1437254354"),
    frame1437254355: makeNodeComponent("frame1437254355"),
    frame1437254356: makeNodeComponent("frame1437254356"),
    embedHtml: makeNodeComponent("embedHtml"),
    depi: makeNodeComponent("depi"),
    password18: makeNodeComponent("password18"),
    categoryV2: makeNodeComponent("categoryV2"),
    left2: makeNodeComponent("left2"),
    left: makeNodeComponent("left"),
    buttons: makeNodeComponent("buttons"),
    frame1437254358: makeNodeComponent("frame1437254358"),
    button3: makeNodeComponent("button3"),
    button5: makeNodeComponent("button5"),
    ress2: makeNodeComponent("ress2"),
    password19: makeNodeComponent("password19"),
    ress: makeNodeComponent("ress"),
    table2: makeNodeComponent("table2"),
    category: makeNodeComponent("category"),
    title2: makeNodeComponent("title2"),
    title: makeNodeComponent("title"),
    fleches: makeNodeComponent("fleches"),
    content2: makeNodeComponent("content2"),
    checkbox2: makeNodeComponent("checkbox2"),
    endometriome: makeNodeComponent("endometriome"),
    badge: makeNodeComponent("badge"),
    text: makeNodeComponent("text"),
    longueur: makeNodeComponent("longueur"),
    subCheckbox2: makeNodeComponent("subCheckbox2"),
    categoryMobile: makeNodeComponent("categoryMobile"),
    superficielle2: makeNodeComponent("superficielle2"),
    annexDroite3: makeNodeComponent("annexDroite3"),
    endometriome4: makeNodeComponent("endometriome4"),
    badge4: makeNodeComponent("badge4"),
    text9: makeNodeComponent("text9"),
    longueur4: makeNodeComponent("longueur4"),
    annexDroite4: makeNodeComponent("annexDroite4"),
    endometriome5: makeNodeComponent("endometriome5"),
    badge5: makeNodeComponent("badge5"),
    text10: makeNodeComponent("text10"),
    longueur5: makeNodeComponent("longueur5"),
    superficielle4: makeNodeComponent("superficielle4"),
    navBar: makeNodeComponent("navBar"),
    btmNavbarTile: makeNodeComponent("btmNavbarTile"),
    phGridFourFill19: makeNodeComponent("phGridFourFill19"),
    rectangle74: makeNodeComponent("rectangle74"),
    rectangle75: makeNodeComponent("rectangle75"),
    rectangle76: makeNodeComponent("rectangle76"),
    phGridFourFill20: makeNodeComponent("phGridFourFill20"),
    rectangle77: makeNodeComponent("rectangle77"),
    rectangle78: makeNodeComponent("rectangle78"),
    rectangle79: makeNodeComponent("rectangle79"),
    phGridFourFill21: makeNodeComponent("phGridFourFill21"),
    rectangle80: makeNodeComponent("rectangle80"),
    rectangle81: makeNodeComponent("rectangle81"),
    rectangle82: makeNodeComponent("rectangle82"),
    btmNavbarTile7: makeNodeComponent("btmNavbarTile7"),
    phGridFourFill37: makeNodeComponent("phGridFourFill37"),
    rectangle128: makeNodeComponent("rectangle128"),
    rectangle129: makeNodeComponent("rectangle129"),
    rectangle130: makeNodeComponent("rectangle130"),
    phGridFourFill38: makeNodeComponent("phGridFourFill38"),
    rectangle131: makeNodeComponent("rectangle131"),
    rectangle132: makeNodeComponent("rectangle132"),
    rectangle133: makeNodeComponent("rectangle133"),
    phGridFourFill39: makeNodeComponent("phGridFourFill39"),
    rectangle134: makeNodeComponent("rectangle134"),
    rectangle135: makeNodeComponent("rectangle135"),
    rectangle136: makeNodeComponent("rectangle136"),
    btmNavbarTile6: makeNodeComponent("btmNavbarTile6"),
    phGridFourFill34: makeNodeComponent("phGridFourFill34"),
    rectangle119: makeNodeComponent("rectangle119"),
    rectangle120: makeNodeComponent("rectangle120"),
    rectangle121: makeNodeComponent("rectangle121"),
    phGridFourFill35: makeNodeComponent("phGridFourFill35"),
    rectangle122: makeNodeComponent("rectangle122"),
    rectangle123: makeNodeComponent("rectangle123"),
    rectangle124: makeNodeComponent("rectangle124"),
    phGridFourFill36: makeNodeComponent("phGridFourFill36"),
    rectangle125: makeNodeComponent("rectangle125"),
    rectangle126: makeNodeComponent("rectangle126"),
    rectangle127: makeNodeComponent("rectangle127"),
    btmNavbarTile5: makeNodeComponent("btmNavbarTile5"),
    phGridFourFill31: makeNodeComponent("phGridFourFill31"),
    rectangle110: makeNodeComponent("rectangle110"),
    rectangle111: makeNodeComponent("rectangle111"),
    rectangle112: makeNodeComponent("rectangle112"),
    phGridFourFill32: makeNodeComponent("phGridFourFill32"),
    rectangle113: makeNodeComponent("rectangle113"),
    rectangle114: makeNodeComponent("rectangle114"),
    rectangle115: makeNodeComponent("rectangle115"),
    phGridFourFill33: makeNodeComponent("phGridFourFill33"),
    rectangle116: makeNodeComponent("rectangle116"),
    rectangle117: makeNodeComponent("rectangle117"),
    rectangle118: makeNodeComponent("rectangle118"),
    btmNavbarTile4: makeNodeComponent("btmNavbarTile4"),
    phGridFourFill28: makeNodeComponent("phGridFourFill28"),
    rectangle101: makeNodeComponent("rectangle101"),
    rectangle102: makeNodeComponent("rectangle102"),
    rectangle103: makeNodeComponent("rectangle103"),
    phGridFourFill29: makeNodeComponent("phGridFourFill29"),
    rectangle104: makeNodeComponent("rectangle104"),
    rectangle105: makeNodeComponent("rectangle105"),
    rectangle106: makeNodeComponent("rectangle106"),
    phGridFourFill30: makeNodeComponent("phGridFourFill30"),
    rectangle107: makeNodeComponent("rectangle107"),
    rectangle108: makeNodeComponent("rectangle108"),
    rectangle109: makeNodeComponent("rectangle109"),
    btmNavbarTile3: makeNodeComponent("btmNavbarTile3"),
    phGridFourFill25: makeNodeComponent("phGridFourFill25"),
    rectangle92: makeNodeComponent("rectangle92"),
    rectangle93: makeNodeComponent("rectangle93"),
    rectangle94: makeNodeComponent("rectangle94"),
    phGridFourFill26: makeNodeComponent("phGridFourFill26"),
    rectangle95: makeNodeComponent("rectangle95"),
    rectangle96: makeNodeComponent("rectangle96"),
    rectangle97: makeNodeComponent("rectangle97"),
    phGridFourFill27: makeNodeComponent("phGridFourFill27"),
    rectangle98: makeNodeComponent("rectangle98"),
    rectangle99: makeNodeComponent("rectangle99"),
    rectangle100: makeNodeComponent("rectangle100"),
    btmNavbarTile2: makeNodeComponent("btmNavbarTile2"),

    // Metadata about props expected for PlasmicBilan
    internalVariantProps: PlasmicBilan__VariantProps,
    internalArgProps: PlasmicBilan__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "dPEI Pocket",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBilan;
/* prettier-ignore-end */
