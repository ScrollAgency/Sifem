/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jdGpMnKMqZhB3E56S7s31E
// Component: 3eu65Jx8on-O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jdGpMnKMqZhB3E56S7s31E/projectcss
import sty from "./PlasmicBtmNavbarTile.module.css"; // plasmic-import: 3eu65Jx8on-O/css

createPlasmicElementProxy;

export type PlasmicBtmNavbarTile__VariantMembers = {};
export type PlasmicBtmNavbarTile__VariantsArgs = {};
type VariantPropType = keyof PlasmicBtmNavbarTile__VariantsArgs;
export const PlasmicBtmNavbarTile__VariantProps = new Array<VariantPropType>();

export type PlasmicBtmNavbarTile__ArgsType = {
  frame1437254298?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicBtmNavbarTile__ArgsType;
export const PlasmicBtmNavbarTile__ArgProps = new Array<ArgPropType>(
  "frame1437254298",
  "children"
);

export type PlasmicBtmNavbarTile__OverridesType = {
  mobileNavbarTiles8?: Flex__<"div">;
  frame1437253920?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  frame1437254297?: Flex__<"div">;
  frame29?: Flex__<"div">;
};

export interface DefaultBtmNavbarTileProps {
  frame1437254298?: React.ReactNode;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBtmNavbarTile__RenderFunc(props: {
  variants: PlasmicBtmNavbarTile__VariantsArgs;
  args: PlasmicBtmNavbarTile__ArgsType;
  overrides: PlasmicBtmNavbarTile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"mobileNavbarTiles8"}
      data-plasmic-override={overrides.mobileNavbarTiles8}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.mobileNavbarTiles8
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame1437253920"}
        data-plasmic-override={overrides.frame1437253920}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame1437253920)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            data-plasmic-name={"frame1437254297"}
            data-plasmic-override={overrides.frame1437254297}
            className={classNames(projectcss.all, sty.frame1437254297)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mA4Zn)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vTzz9)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__j1ITp)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__fJnMa)}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yi57Q)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__t3W)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4Jll8
                      )}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__rOh3J)}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wcb1G)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__no5FI)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__wp5K2)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__r9Mzn)}
                    />
                  </Stack__>
                </React.Fragment>
              ),
              value: args.frame1437254298
            })}
          </div>
        </div>
        {renderPlasmicSlot({
          defaultContents: "EP",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </Stack__>
      {false ? (
        <div
          data-plasmic-name={"frame29"}
          data-plasmic-override={overrides.frame29}
          className={classNames(projectcss.all, sty.frame29)}
        />
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mobileNavbarTiles8: [
    "mobileNavbarTiles8",
    "frame1437253920",
    "freeBox",
    "frame1437254297",
    "frame29"
  ],
  frame1437253920: ["frame1437253920", "freeBox", "frame1437254297"],
  freeBox: ["freeBox", "frame1437254297"],
  frame1437254297: ["frame1437254297"],
  frame29: ["frame29"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mobileNavbarTiles8: "div";
  frame1437253920: "div";
  freeBox: "div";
  frame1437254297: "div";
  frame29: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBtmNavbarTile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBtmNavbarTile__VariantsArgs;
    args?: PlasmicBtmNavbarTile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBtmNavbarTile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBtmNavbarTile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBtmNavbarTile__ArgProps,
          internalVariantPropNames: PlasmicBtmNavbarTile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBtmNavbarTile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mobileNavbarTiles8") {
    func.displayName = "PlasmicBtmNavbarTile";
  } else {
    func.displayName = `PlasmicBtmNavbarTile.${nodeName}`;
  }
  return func;
}

export const PlasmicBtmNavbarTile = Object.assign(
  // Top-level PlasmicBtmNavbarTile renders the root element
  makeNodeComponent("mobileNavbarTiles8"),
  {
    // Helper components rendering sub-elements
    frame1437253920: makeNodeComponent("frame1437253920"),
    freeBox: makeNodeComponent("freeBox"),
    frame1437254297: makeNodeComponent("frame1437254297"),
    frame29: makeNodeComponent("frame29"),

    // Metadata about props expected for PlasmicBtmNavbarTile
    internalVariantProps: PlasmicBtmNavbarTile__VariantProps,
    internalArgProps: PlasmicBtmNavbarTile__ArgProps
  }
);

export default PlasmicBtmNavbarTile;
/* prettier-ignore-end */
